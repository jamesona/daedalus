!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=83)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(0),i=n(25),o=n(51),u=n(5),s=n(37),c=n(14),a=n(34),f=function(t){function e(n,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.a;break;case 1:if(!n){u.destination=o.a;break}if("object"==typeof n){n instanceof e?(u.syncErrorThrowable=n.syncErrorThrowable,u.destination=n,n.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,n));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,n,r,i)}return u}return r.a(e,t),e.prototype[s.a]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(u.a),l=function(t){function e(e,n,r,u){var s,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return Object(i.a)(n)?s=n:n&&(s=n.next,r=n.error,u=n.complete,n!==o.a&&(a=Object.create(n),Object(i.a)(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=s,c._error=r,c._complete=u,c}return r.a(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):Object(a.a)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;Object(a.a)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw t;Object(a.a)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return c.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(Object(a.a)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(f)},function(t,e,n){"use strict";var r=n(48),i=n(1),o=n(37),u=n(51);var s=n(21),c=n(36),a=n(14);n.d(e,"a",(function(){return f}));var f=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,s=function(t,e,n){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||e||n?new i.a(t,e,n):new i.a(u.a)}(t,e,n);if(r?s.add(r.call(s,this.source)):s.add(this.source||a.a.useDeprecatedSynchronousErrorHandling&&!s.syncErrorThrowable?this._subscribe(s):this._trySubscribe(s)),a.a.useDeprecatedSynchronousErrorHandling&&s.syncErrorThrowable&&(s.syncErrorThrowable=!1,s.syncErrorThrown))throw s.syncErrorValue;return s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),Object(r.a)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=l(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[s.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:Object(c.b)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=l(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function l(t){if(t||(t=a.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(13),i=n(39),o=n(2);function u(t,e,n,u,s){if(void 0===s&&(s=new r.a(t,n,u)),!s.closed)return e instanceof o.a?e.subscribe(s):Object(i.a)(e)(s)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(7),i=n(47),o=n(25),u=n(38),s=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,s=this._unsubscribe,a=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var f=0;f<n.length;++f){n[f].remove(this)}if(Object(o.a)(s))try{s.call(this)}catch(t){e=t instanceof u.a?c(t.errors):[t]}if(Object(r.a)(a)){f=-1;for(var l=a.length;++f<l;){var h=a[f];if(Object(i.a)(h))try{h.unsubscribe()}catch(t){e=e||[],t instanceof u.a?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new u.a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce((function(t,e){return t.concat(e instanceof u.a?e.errors:e)}),[])}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(2),o=n(1),u=n(5),s=n(22),c=n(67),a=n(37),f=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return r.a(e,t),e}(o.a),l=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r.a(e,t),e.prototype[a.a]=function(){return new f(this)},e.prototype.lift=function(t){var e=new h(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new s.a;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new s.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new s.a;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new s.a;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new s.a;return this.hasError?(t.error(this.thrownError),u.a.EMPTY):this.isStopped?(t.complete(),u.a.EMPTY):(this.observers.push(t),new c.a(this,t))},e.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},e.create=function(t,e){return new h(t,e)},e}(i.a),h=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r.a(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.a.EMPTY},e}(l)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(30),i=new(n(28).a)(r.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new u(t,e))}}var u=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new s(t,this.project,this.thisArg))},t}(),s=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a)},function(t,e,n){"use strict";function r(t){return t&&"function"==typeof t.schedule}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o}));var r=n(2),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(39),o=n(65);function u(t,e){return e?Object(o.a)(t,e):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,e,n){"use strict";function r(){}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(96)),r(n(97)),r(n(98)),r(n(75)),r(n(99)),r(n(100)),r(n(101)),r(n(102)),r(n(76))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(t,e){return function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new s(t,this.predicate,this.thisArg))},t}(),s=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return s}));var r,i=n(11),o=n(35),u=n(42);r||(r={});var s=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(u.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,e,n){"use strict";function r(t){return t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,"a",(function(){return i}));var i=r()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n(0),i=n(3),o=n(4),u=n(13),s=n(9),c=n(12);function a(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(a((function(n,r){return Object(c.a)(t(n,r)).pipe(Object(s.a)((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new f(t,n))})}var f=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new u.a(this,e,n),o=this.destination;o.add(r);var s=Object(i.a)(this,t,void 0,void 0,r);s!==r&&o.add(s)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(68),o=n(49);function u(t,e){return e?Object(o.a)(t,e):new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(54),o=function(t){function e(n,r){void 0===r&&(r=i.a.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),i=n(6),o=n(5),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.a(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.a)},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){return t.call(this)||this}return r.a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(5).a);n.d(e,"a",(function(){return o}));var o=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(i)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.config=Object.assign({},{title:"Daedalus",fontName:"Press Start 2P",fontScale:100,selectedItemColor:"#501500",menuColor:"#555",menuItemColor:"#444",menuTextColor:"#bbb",menuTextHoverColor:"#eee",menuItemDisabledColor:"#666",menuTextDisabledColor:"#444",keyBindings:{up:["ArrowUp","w","W"],down:["ArrowDown","s","S"],left:["ArrowLeft","a","A"],right:["ArrowRight","d","D"],select:["Enter"," "],back:["Escape","Backspace"]},cursorPollRate:10,roomSize:[16,16],tileSize:16,brokenWallProbability:.25},{})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(35),i=n(61);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,e,n){"use strict";function r(t){setTimeout((function(){throw t}),0)}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(10),i=n(27),o=n(49);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(r.a)(n)?(t.pop(),Object(o.a)(t,n)):Object(i.a)(t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o}));var r=n(15);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return t?1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}:r.a}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";var r=n(68),i=n(34),o=n(20),u=n(21),s=n(69),c=n(70),a=n(47);n.d(e,"a",(function(){return f}));var f=function(t){if(t&&"function"==typeof t[u.a])return f=t,function(t){var e=f[u.a]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Object(s.a)(t))return Object(r.a)(t);if(Object(c.a)(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return e=t,function(t){for(var n=e[o.a]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,f,l=Object(a.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new s(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),s=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(0),i=n(6),o=n(66),u=n(5),s=n(59),c=n(22),a=n(67),f=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new l(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.a;if(this.isStopped||this.hasError?e=u.a.EMPTY:(this.observers.push(t),e=new a.a(this,t)),i&&t.add(t=new s.a(t,i)),n)for(var f=0;f<o&&!t.closed;f++)t.next(r[f]);else for(f=0;f<o&&!t.closed;f++)t.next(r[f].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.a),l=function(){return function(t,e){this.time=t,this.value=e}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(2);function i(t,e){return e?new r.a((function(n){return e.schedule(o,0,{error:t,subscriber:n})})):new r.a((function(e){return e.error(t)}))}function o(t){var e=t.error;t.subscriber.error(e)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(10),o=n(7),u=n(4),s=n(3),c=n(27),a={};function f(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(c.a)(t,r).lift(new l(n))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return r.a(e,t),e.prototype._next=function(t){this.values.push(a),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Object(s.a)(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,u=o[n],s=this.toRespond?u===a?--this.toRespond:this.toRespond:0;o[n]=e,0===s&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(23),i=n(19);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(12),o=n(11);function u(t){return new r.a((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(i.a)(n):Object(o.b)()).subscribe(e)}))}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(27),o=n(7),u=n(1),s=n(4),c=n(3),a=n(20);function f(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(i.a)(t,void 0).lift(new l(n))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return r.a(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new d(t)):"function"==typeof t[a.a]?e.push(new p(t[a.a]())):e.push(new b(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var u,s=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),s.done)return void n.complete();o.push(s.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.a),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[a.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),b=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(e,t),e.prototype[a.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(c.a)(this,this.observable,this,e)},e}(s.a)},function(t,e,n){"use strict";function r(t){return null!==t&&"object"==typeof t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(1);function i(t){for(;t;){var e=t,n=e.closed,i=e.destination,o=e.isStopped;if(n||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(2),i=n(5);function o(t,e){return new r.a((function(n){var r=new i.a,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}},function(t,e,n){"use strict";var r=n(0),i=1,o=function(){return Promise.resolve()}(),u={};function s(t){return t in u&&(delete u[t],!0)}var c=function(t){var e=i++;return u[e]=!0,o.then((function(){return s(e)&&t()})),e},a=function(t){s(t)},f=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=c(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(a(n),e.scheduled=void 0)},e}(n(30).a),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(28).a);n.d(e,"a",(function(){return h}));var h=new l(f)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(14),i=n(34),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n(4),o=n(3);function u(t){return function(e){return e.lift(new s(t))}}var s=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,r){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.a),a=n(8),f=n(64);function l(t,e){return void 0===e&&(e=a.a),u((function(){return Object(f.a)(t,e)}))}function h(t){return function(e){return e.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add(Object(o.a)(r,n)),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.a),b=n(1);function v(t,e){return void 0===e&&(e=null),function(n){return n.lift(new y(t,e))}}var y=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?w:m}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.a(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(b.a),w=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%n==0&&r.push([]);for(var o=r.length;o--;){var u=r[o];u.push(t),u.length===e&&(r.splice(o,1),this.destination.next(u))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(b.a),_=n(10);function g(t){var e=arguments.length,n=a.a;Object(_.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new x(t,r,i,n))}}var x=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new O(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),O=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;u.bufferTimeSpan=n,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var s=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:s,bufferTimeSpan:n};u.add(s.closeAction=o.schedule(j,n,c))}else{var a={subscriber:u,context:s},f={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(s.closeAction=o.schedule(T,n,a)),u.add(o.schedule(I,r,f))}return u}return r.a(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(j,n,r))}},e.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(b.a);function j(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function I(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(T,n,{subscriber:r,context:o})),this.schedule(t,e))}function T(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var E=n(5);function C(t,e){return function(n){return n.lift(new P(t,e))}}var P=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new N(t,this.openings,this.closingSelector))},t}(),N=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,n)),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new E.a,r={buffer:[],subscription:n};e.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(i.a);function A(t){return function(e){return e.lift(new k(t))}}var k=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new M(t,this.closingSelector))},t}(),M=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,r,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new E.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(i.a),R=n(13);function V(t){return function(e){var n=new D(t),r=e.lift(n);return n.caught=r}}var D=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new W(t,this.selector,this.caught))},t}(),W=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new R.a(this,void 0,void 0);this.add(r);var i=Object(o.a)(this,n,void 0,void 0,r);i!==r&&this.add(i)}},e}(i.a),F=n(43);function z(t){return function(e){return e.lift(new F.a(t))}}var B=n(7),U=n(12);function L(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(B.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(U.a)([e].concat(t)),new F.a(n))}}var Y=n(33);function H(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Y.a.apply(void 0,[e].concat(t)))}}var q=n(61),$=n(23);function K(t,e){return Object($.a)(t,e,1)}function G(t,e){return K((function(){return t}),e)}function X(t){return function(e){return e.lift(new J(t,e))}}var J=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(b.a);function Z(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r.durationSubscription=null,r}return r.a(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.a);function nt(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new rt(t,e))}}var rt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(b.a);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(e){return e.lift(new st(t))}}var st=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.a(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(b.a);function at(t){return t instanceof Date&&!isNaN(+t)}var ft=n(18);function lt(t,e){void 0===e&&(e=a.a);var n=at(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ht(n,e))}}var ht=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new dt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(ft.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(ft.a.createComplete()),this.unsubscribe()},e}(b.a),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),bt=n(2);function vt(t,e){return e?function(n){return new wt(n,e).lift(new yt(t))}:function(e){return e.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new mt(t,this.delayDurationSelector))},t}(),mt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.a),wt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.a(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new _t(t,this.source))},e}(bt.a),_t=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.a(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(b.a);function gt(){return function(t){return t.lift(new xt)}}var xt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new St(t))},t}(),St=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(b.a);function Ot(t,e){return function(n){return n.lift(new jt(t,e))}}var jt=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new It(t,this.keySelector,this.flushes))},t}(),It=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=n,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.a);function Tt(t,e){return function(n){return n.lift(new Et(t,e))}}var Et=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Ct(t,this.compare,this.keySelector))},t}(),Ct=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof n&&(i.compare=n),i}return r.a(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(b.a);function Pt(t,e){return Tt((function(n,r){return e?e(n[t],r[t]):n[t]===r[t]}))}var Nt=n(24),At=n(17),kt=n(26);function Mt(t){return void 0===t&&(t=Dt),function(e){return e.lift(new Rt(t))}}var Rt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Vt(t,this.errorFactory))},t}(),Vt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(b.a);function Dt(){return new kt.a}var Wt=n(11);function Ft(t){return function(e){return 0===t?Object(Wt.b)():e.lift(new zt(t))}}var zt=function(){function t(t){if(this.total=t,this.total<0)throw new Nt.a}return t.prototype.call=function(t,e){return e.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(b.a);function Ut(t,e){if(t<0)throw new Nt.a;var n=arguments.length>=2;return function(r){return r.pipe(Object(At.a)((function(e,n){return n===t})),Ft(1),n?ut(e):Mt((function(){return new Nt.a})))}}var Lt=n(35);function Yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object(Y.a)(e,Lt.a.apply(void 0,t))}}function Ht(t,e){return function(n){return n.lift(new qt(t,e,n))}}var qt=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new $t(t,this.predicate,this.thisArg,this.source))},t}(),$t=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function Kt(){return function(t){return t.lift(new Gt)}}var Gt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Xt(t))},t}(),Xt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a),Jt=n(9);function Qt(t,e){return e?function(n){return n.pipe(Qt((function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Jt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new Zt(t))}}var Zt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new R.a(this,e,n),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.concurrent,this.scheduler))},t}(),re=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.a);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new ue(t,this.callback))},t}(),ue=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new E.a(n)),r}return r.a(e,t),e}(b.a);function se(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ce(t,n,!1,e))}}var ce=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ae(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ae=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.predicate=n,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(b.a);function fe(t,e){return function(n){return n.lift(new ce(t,n,!0,e))}}var le=n(19);function he(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(At.a)((function(e,n){return t(e,n,r)})):le.a,Ft(1),n?ut(e):Mt((function(){return new kt.a})))}}var pe=n(55);function de(){return function(t){return t.lift(new be)}}var be=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ve(t))},t}(),ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype._next=function(t){},e}(b.a);function ye(){return function(t){return t.lift(new me)}}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new we(t))},t}(),we=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function _e(t){return function(e){return 0===t?Object(Wt.b)():e.lift(new ge(t))}}var ge=function(){function t(t){if(this.total=t,this.total<0)throw new Nt.a}return t.prototype.call=function(t,e){return e.subscribe(new xe(t,this.total))},t}(),xe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(b.a);function Se(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(At.a)((function(e,n){return t(e,n,r)})):le.a,_e(1),n?ut(e):Mt((function(){return new kt.a})))}}function Oe(t){return function(e){return e.lift(new je(t))}}var je=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.value))},t}(),Ie=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.a(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(b.a);function Te(){return function(t){return t.lift(new Ee)}}var Ee=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ce(t))},t}(),Ce=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){this.destination.next(ft.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(ft.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(ft.a.createComplete()),t.complete()},e}(b.a);function Pe(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new Ne(t,e,n))}}var Ne=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new Ae(t,this.accumulator,this.seed,this.hasSeed))},t}(),Ae=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(b.a),ke=n(36);function Me(t,e){return arguments.length>=2?function(n){return Object(ke.a)(Pe(t,e),_e(1),ut(e))(n)}:function(e){return Object(ke.a)(Pe((function(e,n,r){return t(e,n,r+1)})),_e(1))(e)}}function Re(t){return Me("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Ve=n(62);function De(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Ve.a.apply(void 0,[e].concat(t)))}}var We=n(44);function Fe(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object($.a)((function(){return t}),e,n):("number"==typeof e&&(n=e),Object($.a)((function(){return t}),n))}function ze(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new Be(t,e,n))}}var Be=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new Ue(t,this.accumulator,this.seed,this.concurrent))},t}(),Ue=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var r=new R.a(this,e,n),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.a);function Le(t){return Me("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var Ye=n(57);function He(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new qe(r,e));var i=Object.create(n,Ye.b);return i.source=n,i.subjectFactory=r,i}}var qe=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),$e=n(59);function Ke(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),function(e){return e.lift(new Ge(t))}}var Ge=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new Xe(t,this.nextSources))},t}(),Xe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.a(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new R.a(this,void 0,void 0),n=this.destination;n.add(e);var r=Object(o.a)(this,t,void 0,void 0,e);r!==e&&n.add(r)}else this.destination.complete()},e}(i.a);function Je(){return function(t){return t.lift(new Qe)}}var Qe=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t))},t}(),Ze=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.a(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(b.a),tn=n(71);function en(t,e){return function(n){return[Object(At.a)(t,e)(n),Object(At.a)(Object(tn.a)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return Object(Jt.a)(rn(t,n))(e)}}function rn(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var on=n(6);function un(t){return t?He((function(){return new on.a}),t):He(new on.a)}var sn=n(58);function cn(t){return function(e){return He(new sn.a(t))(e)}}var an=n(29);function fn(){return function(t){return He(new an.a)(t)}}var ln=n(41);function hn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new ln.a(t,e,r);return function(t){return He((function(){return o}),i)(t)}}var pn=n(63);function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),e.lift.call(pn.a.apply(void 0,[e].concat(t)))}}function bn(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Wt.b)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new yn(t,this.count,this.source))},t}(),yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function mn(t){return function(e){return e.lift(new wn(t))}}var wn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new _n(t,this.notifier,e))},t}(),_n=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new on.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(i.a);function gn(t){return void 0===t&&(t=-1),function(e){return e.lift(new xn(t,e))}}var xn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Sn(t,this.count,this.source))},t}(),Sn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function On(t){return function(e){return e.lift(new jn(t,e))}}var jn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new In(t,this.notifier,this.source))},t}(),In=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{n=new on.a;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.a),Tn=n(40);function En(t){return function(e){return e.lift(new Cn(t))}}var Cn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new Pn(t),r=e.subscribe(n);return r.add(Object(o.a)(n,this.notifier)),r},t}(),Pn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.a(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.a);function Nn(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new An(t,e))}}var An=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new kn(t,this.period,this.scheduler))},t}(),kn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Mn,n,{subscriber:i,period:n})),i}return r.a(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(b.a);function Mn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Rn(t,e){return function(n){return n.lift(new Vn(t,e))}}var Vn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Dn(t,this.compareTo,this.comparator))},t}(),Dn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new Wn(e,i))),i}return r.a(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var r=t.shift(),i=e.shift(),o=!1;try{o=n?n(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(b.a),Wn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.a(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(b.a);function Fn(){return new on.a}function zn(){return function(t){return Object(Tn.a)()(He(Fn)(t))}}function Bn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift(function(t){var e,n,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,s=t.refCount,c=t.scheduler,a=0,f=!1,l=!1;return function(t){a++,e&&!f||(f=!1,e=new ln.a(i,u,c),n=t.subscribe({next:function(t){e.next(t)},error:function(t){f=!0,e.error(t)},complete:function(){l=!0,n=void 0,e.complete()}}));var r=e.subscribe(this);this.add((function(){a--,r.unsubscribe(),n&&!l&&s&&0===a&&(n.unsubscribe(),n=void 0,e=void 0)}))}}(r))}}function Un(t){return function(e){return e.lift(new Ln(t,e))}}var Ln=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Yn(t,this.predicate,this.source))},t}(),Yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new kt.a)},e}(b.a);function Hn(t){return function(e){return e.lift(new qn(t))}}var qn=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new $n(t,this.total))},t}(),$n=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(b.a);function Kn(t){return function(e){return e.lift(new Gn(t))}}var Gn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Nt.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new b.a(t)):e.subscribe(new Xn(t,this._skipCount))},t}(),Xn=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.a(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(b.a);function Jn(t){return function(e){return e.lift(new Qn(t))}}var Qn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Zn(t,this.notifier))},t}(),Zn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var i=new R.a(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=Object(o.a)(r,n,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.a(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.a);function tr(t){return function(e){return e.lift(new er(t))}}var er=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new nr(t,this.predicate))},t}(),nr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(b.a);function rr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(_.a)(n)?(t.pop(),function(e){return Object(Y.a)(t,e,n)}):function(e){return Object(Y.a)(t,e)}}var ir=n(50),or=n(31),ur=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=ir.a);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!Object(or.a)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.a),i}return r.a(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=ir.a),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(bt.a);function sr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new cr(t,e))}}var cr=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new ur(e,this.delay,this.scheduler).subscribe(t)},t}();function ar(t,e){return"function"==typeof e?function(n){return n.pipe(ar((function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Jt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new fr(t))}}var fr=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new lr(t,this.project))},t}(),lr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=this.innerSubscription;r&&r.unsubscribe();var i=new R.a(this,e,n),u=this.destination;u.add(i),this.innerSubscription=Object(o.a)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e}(i.a);function hr(){return ar(le.a)}function pr(t,e){return e?ar((function(){return t}),e):ar((function(){return t}))}function dr(t){return function(e){return e.lift(new br(t))}}var br=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vr(t),r=Object(o.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),vr=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.a);function yr(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new mr(t,e))}}var mr=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new wr(t,this.predicate,this.inclusive))},t}(),wr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(b.a),_r=n(15),gr=n(25);function xr(t,e,n){return function(r){return r.lift(new Sr(t,e,n))}}var Sr=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Or(t,this.nextOrObserver,this.error,this.complete))},t}(),Or=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=_r.a,o._tapError=_r.a,o._tapComplete=_r.a,o._tapError=r||_r.a,o._tapComplete=i||_r.a,Object(gr.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||_r.a,o._tapError=n.error||_r.a,o._tapComplete=n.complete||_r.a),o}return r.a(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(b.a),jr={leading:!0,trailing:!1};function Ir(t,e){return void 0===e&&(e=jr),function(n){return n.lift(new Tr(t,e.leading,e.trailing))}}var Tr=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Er(t,this.durationSelector,this.leading,this.trailing))},t}(),Er=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,r,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.a);function Cr(t,e,n){return void 0===e&&(e=a.a),void 0===n&&(n=jr),function(r){return r.lift(new Pr(t,e,n.leading,n.trailing))}}var Pr=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new Nr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Nr=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.duration=n,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.a(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Ar,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(b.a);function Ar(t){t.subscriber.clearThrottle()}var kr=n(45);function Mr(t){return void 0===t&&(t=a.a),function(e){return Object(kr.a)((function(){return e.pipe(Pe((function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Jt.a)((function(t){var e=t.current,n=t.last,r=t.value;return new Rr(r,e-n)})))}))}}var Rr=function(){return function(t,e){this.value=t,this.interval=e}}(),Vr=n(60);function Dr(t,e,n){return void 0===n&&(n=a.a),function(r){var i=at(t),o=i?+t-n.now():Math.abs(t);return r.lift(new Wr(o,i,e,n))}}var Wr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Fr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Fr=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.absoluteTimeout=n,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.a(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.a),zr=n(42);function Br(t,e){return void 0===e&&(e=a.a),Dr(t,Object(zr.a)(new Vr.a),e)}function Ur(t){return void 0===t&&(t=a.a),Object(Jt.a)((function(e){return new Lr(e,t.now())}))}var Lr=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Yr(t,e,n){return 0===n?[e]:(t.push(e),t)}function Hr(){return Me(Yr,[])}function qr(t){return function(e){return e.lift(new $r(t))}}var $r=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Kr(t),r=e.subscribe(n);return r.closed||n.add(Object(o.a)(n,this.windowBoundaries)),r},t}(),Kr=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new on.a,e.next(n.window),n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new on.a;e.next(n)},e}(i.a);function Gr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new Xr(t,e))}}var Xr=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Jr(t,this.windowSize,this.startWindowEvery))},t}(),Jr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new on.a],i.count=0,e.next(i.windows[0]),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var s=this.count-r+1;if(s>=0&&s%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var c=new on.a;i.push(c),n.next(c)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(b.a);function Qr(t){var e=a.a,n=null,r=Number.POSITIVE_INFINITY;return Object(_.a)(arguments[3])&&(e=arguments[3]),Object(_.a)(arguments[2])?e=arguments[2]:Object(or.a)(arguments[2])&&(r=arguments[2]),Object(_.a)(arguments[1])?e=arguments[1]:Object(or.a)(arguments[1])&&(n=arguments[1]),function(i){return i.lift(new Zr(t,n,r,e))}}var Zr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ei(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.a(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(on.a),ei=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;u.destination=e,u.windowTimeSpan=n,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var s=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:s,context:null},a={windowTimeSpan:n,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,n,c)),u.add(o.schedule(ri,r,a))}else{var f={subscriber:u,window:s,windowTimeSpan:n};u.add(o.schedule(ni,n,f))}return u}return r.a(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(b.a);function ni(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function ri(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),u={action:this,subscription:null},s={subscriber:n,window:o,context:u};u.subscription=r.schedule(ii,e,s),this.add(u.subscription),this.schedule(t,i)}function ii(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function oi(t,e){return function(n){return n.lift(new ui(t,e))}}var ui=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new si(t,this.openings,this.closingSelector))},t}(),si=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,n,n)),i}return r.a(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var s=new on.a,c=new E.a,a={window:s,subscription:c};this.contexts.push(a);var f=Object(o.a)(this,u,a);f.closed?this.closeWindow(this.contexts.length-1):(f.context=a,c.add(f)),this.destination.next(s)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(i.a);function ci(t){return function(e){return e.lift(new ai(t))}}var ai=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new fi(t,this.closingSelector))},t}(),fi=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new on.a;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(i.a);function li(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var r=t;return e.lift(new hi(r,n))}}var hi=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new pi(t,this.observables,this.project))},t}(),pi=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.observables=n,i.project=r,i.toRespond=[];var u=n.length;i.values=new Array(u);for(var s=0;s<u;s++)i.toRespond.push(s);for(s=0;s<u;s++){var c=n[s];i.add(Object(o.a)(i,c,c,s))}return i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values[n]=e;var o=this.toRespond;if(o.length>0){var u=o.indexOf(n);-1!==u&&o.splice(u,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a),di=n(46);function bi(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(di.b.apply(void 0,[e].concat(t)))}}function vi(t){return function(e){return e.lift(new di.a(t))}}n.d(e,"audit",(function(){return u})),n.d(e,"auditTime",(function(){return l})),n.d(e,"buffer",(function(){return h})),n.d(e,"bufferCount",(function(){return v})),n.d(e,"bufferTime",(function(){return g})),n.d(e,"bufferToggle",(function(){return C})),n.d(e,"bufferWhen",(function(){return A})),n.d(e,"catchError",(function(){return V})),n.d(e,"combineAll",(function(){return z})),n.d(e,"combineLatest",(function(){return L})),n.d(e,"concat",(function(){return H})),n.d(e,"concatAll",(function(){return q.a})),n.d(e,"concatMap",(function(){return K})),n.d(e,"concatMapTo",(function(){return G})),n.d(e,"count",(function(){return X})),n.d(e,"debounce",(function(){return Z})),n.d(e,"debounceTime",(function(){return nt})),n.d(e,"defaultIfEmpty",(function(){return ut})),n.d(e,"delay",(function(){return lt})),n.d(e,"delayWhen",(function(){return vt})),n.d(e,"dematerialize",(function(){return gt})),n.d(e,"distinct",(function(){return Ot})),n.d(e,"distinctUntilChanged",(function(){return Tt})),n.d(e,"distinctUntilKeyChanged",(function(){return Pt})),n.d(e,"elementAt",(function(){return Ut})),n.d(e,"endWith",(function(){return Yt})),n.d(e,"every",(function(){return Ht})),n.d(e,"exhaust",(function(){return Kt})),n.d(e,"exhaustMap",(function(){return Qt})),n.d(e,"expand",(function(){return ee})),n.d(e,"filter",(function(){return At.a})),n.d(e,"finalize",(function(){return ie})),n.d(e,"find",(function(){return se})),n.d(e,"findIndex",(function(){return fe})),n.d(e,"first",(function(){return he})),n.d(e,"groupBy",(function(){return pe.b})),n.d(e,"ignoreElements",(function(){return de})),n.d(e,"isEmpty",(function(){return ye})),n.d(e,"last",(function(){return Se})),n.d(e,"map",(function(){return Jt.a})),n.d(e,"mapTo",(function(){return Oe})),n.d(e,"materialize",(function(){return Te})),n.d(e,"max",(function(){return Re})),n.d(e,"merge",(function(){return De})),n.d(e,"mergeAll",(function(){return We.a})),n.d(e,"mergeMap",(function(){return $.a})),n.d(e,"flatMap",(function(){return $.a})),n.d(e,"mergeMapTo",(function(){return Fe})),n.d(e,"mergeScan",(function(){return ze})),n.d(e,"min",(function(){return Le})),n.d(e,"multicast",(function(){return He})),n.d(e,"observeOn",(function(){return $e.b})),n.d(e,"onErrorResumeNext",(function(){return Ke})),n.d(e,"pairwise",(function(){return Je})),n.d(e,"partition",(function(){return en})),n.d(e,"pluck",(function(){return nn})),n.d(e,"publish",(function(){return un})),n.d(e,"publishBehavior",(function(){return cn})),n.d(e,"publishLast",(function(){return fn})),n.d(e,"publishReplay",(function(){return hn})),n.d(e,"race",(function(){return dn})),n.d(e,"reduce",(function(){return Me})),n.d(e,"repeat",(function(){return bn})),n.d(e,"repeatWhen",(function(){return mn})),n.d(e,"retry",(function(){return gn})),n.d(e,"retryWhen",(function(){return On})),n.d(e,"refCount",(function(){return Tn.a})),n.d(e,"sample",(function(){return En})),n.d(e,"sampleTime",(function(){return Nn})),n.d(e,"scan",(function(){return Pe})),n.d(e,"sequenceEqual",(function(){return Rn})),n.d(e,"share",(function(){return zn})),n.d(e,"shareReplay",(function(){return Bn})),n.d(e,"single",(function(){return Un})),n.d(e,"skip",(function(){return Hn})),n.d(e,"skipLast",(function(){return Kn})),n.d(e,"skipUntil",(function(){return Jn})),n.d(e,"skipWhile",(function(){return tr})),n.d(e,"startWith",(function(){return rr})),n.d(e,"subscribeOn",(function(){return sr})),n.d(e,"switchAll",(function(){return hr})),n.d(e,"switchMap",(function(){return ar})),n.d(e,"switchMapTo",(function(){return pr})),n.d(e,"take",(function(){return Ft})),n.d(e,"takeLast",(function(){return _e})),n.d(e,"takeUntil",(function(){return dr})),n.d(e,"takeWhile",(function(){return yr})),n.d(e,"tap",(function(){return xr})),n.d(e,"throttle",(function(){return Ir})),n.d(e,"throttleTime",(function(){return Cr})),n.d(e,"throwIfEmpty",(function(){return Mt})),n.d(e,"timeInterval",(function(){return Mr})),n.d(e,"timeout",(function(){return Br})),n.d(e,"timeoutWith",(function(){return Dr})),n.d(e,"timestamp",(function(){return Ur})),n.d(e,"toArray",(function(){return Hr})),n.d(e,"window",(function(){return qr})),n.d(e,"windowCount",(function(){return Gr})),n.d(e,"windowTime",(function(){return Qr})),n.d(e,"windowToggle",(function(){return oi})),n.d(e,"windowWhen",(function(){return ci})),n.d(e,"withLatestFrom",(function(){return li})),n.d(e,"zip",(function(){return bi})),n.d(e,"zipAll",(function(){return vi}))},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(57),o=n(55),u=n(21),s=n(6),c=n(58),a=n(41),f=n(29),l=n(50),h=n(8),p=n(66),d=n(0),b=n(30),v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return d.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(b.a),y=n(28),m=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(y.a))(v),w=function(t){function e(e,n){void 0===e&&(e=_),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return d.a(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(y.a),_=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return d.a(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(b.a),g=n(54),x=n(5),S=n(1),O=n(18),j=n(36),I=n(15),T=n(19);function E(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var C=n(24),P=n(26),N=n(22),A=n(38),k=n(60),M=n(9),R=n(48),V=n(7),D=n(10);function W(t,e,n){if(e){if(!Object(D.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return W(t,n).apply(void 0,r).pipe(Object(M.a)((function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,u=this,s={context:u,subject:o,callbackFunc:t,scheduler:n};return new r.a((function(r){if(n){var i={args:e,subscriber:r,params:s};return n.schedule(F,0,i)}if(!o){o=new f.a;try{t.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(R.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function F(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,s=i.scheduler,c=i.subject;if(!c){c=i.subject=new f.a;try{o.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(s.schedule(z,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function z(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function B(t,e,n){if(e){if(!Object(D.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,n).apply(void 0,r).pipe(Object(M.a)((function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.a((function(r){var i=o.context,u=o.subject;if(n)return n.schedule(U,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new f.a;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?u.error(n):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){Object(R.a)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function U(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,u=n.args,s=n.scheduler,c=n.subject;if(!c){c=n.subject=new f.a;try{o.apply(i,u.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(s.schedule(Y,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(s.schedule(L,0,{value:i,subject:c}))}}]))}catch(t){this.add(s.schedule(Y,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function L(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Y(t){var e=t.err;t.subject.error(e)}var H=n(43),q=n(33),$=n(45),K=n(11),G=n(47),X=n(12);function J(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(V.a)(n))return Q(n,null);if(Object(G.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return Q(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(V.a)(t[0])?t[0]:t,null).pipe(Object(M.a)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,e){return new r.a((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,s=function(s){var c=Object(X.a)(t[s]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,u++),i[s]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(u===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},c=0;c<r;c++)s(c);else n.complete()}))}var Z=n(25);function tt(t,e,n,i){return Object(Z.a)(n)&&(i=n,n=void 0),i?tt(t,e,n).pipe(Object(M.a)((function(t){return Object(V.a)(t)?i.apply(void 0,t):i(t)}))):new r.a((function(r){!function t(e,n,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var s=e;e.addEventListener(n,r,o),u=function(){return s.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),u=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),u=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var f=0,l=e.length;f<l;f++)t(e[f],n,r,i,o)}i.add(u)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function et(t,e,n){return n?et(t,e).pipe(Object(M.a)((function(t){return Object(V.a)(t)?n.apply(void 0,t):n(t)}))):new r.a((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(Object(Z.a)(e))return function(){return e(i,r)}}))}function nt(t,e,n,i,o){var u,s;if(1==arguments.length){var c=t;s=c.initialState,e=c.condition,n=c.iterate,u=c.resultSelector||T.a,o=c.scheduler}else void 0===i||Object(D.a)(i)?(s=t,u=T.a,o=i):(s=t,u=i);return new r.a((function(t){var r=s;if(o)return o.schedule(rt,0,{subscriber:t,iterate:n,condition:e,resultSelector:u,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function rt(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function it(t,e,n){return void 0===e&&(e=K.a),void 0===n&&(n=K.a),Object($.a)((function(){return t()?e:n}))}var ot=n(31);function ut(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.a),new r.a((function(n){return n.add(e.schedule(st,t,{subscriber:n,counter:0,period:t})),n}))}function st(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var ct=n(62),at=new r.a(I.a);function ft(){return at}var lt=n(35);function ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return K.a;var n=t[0],i=t.slice(1);return 1===t.length&&Object(V.a)(n)?ht.apply(void 0,n):new r.a((function(t){var e=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(X.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function pt(t,e){return e?new r.a((function(n){var r=Object.keys(t),i=new x.a;return i.add(e.schedule(dt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i})):new r.a((function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()}))}function dt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var u=e[n];r.next([u,o[u]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var bt=n(71),vt=n(39),yt=n(17);function mt(t,e,n){return[Object(yt.a)(e,n)(new r.a(Object(vt.a)(t))),Object(yt.a)(Object(bt.a)(e,n))(new r.a(Object(vt.a)(t)))]}var wt=n(63);function _t(t,e,n){return void 0===t&&(t=0),new r.a((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(gt,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function gt(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var xt=n(42),St=n(64);function Ot(t,e){return new r.a((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Object(X.a)(i):K.a).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var jt=n(46),It=n(65),Tt=n(14);n.d(e,"Observable",(function(){return r.a})),n.d(e,"ConnectableObservable",(function(){return i.a})),n.d(e,"GroupedObservable",(function(){return o.a})),n.d(e,"observable",(function(){return u.a})),n.d(e,"Subject",(function(){return s.a})),n.d(e,"BehaviorSubject",(function(){return c.a})),n.d(e,"ReplaySubject",(function(){return a.a})),n.d(e,"AsyncSubject",(function(){return f.a})),n.d(e,"asapScheduler",(function(){return l.a})),n.d(e,"asyncScheduler",(function(){return h.a})),n.d(e,"queueScheduler",(function(){return p.a})),n.d(e,"animationFrameScheduler",(function(){return m})),n.d(e,"VirtualTimeScheduler",(function(){return w})),n.d(e,"VirtualAction",(function(){return _})),n.d(e,"Scheduler",(function(){return g.a})),n.d(e,"Subscription",(function(){return x.a})),n.d(e,"Subscriber",(function(){return S.a})),n.d(e,"Notification",(function(){return O.a})),n.d(e,"NotificationKind",(function(){return O.b})),n.d(e,"pipe",(function(){return j.a})),n.d(e,"noop",(function(){return I.a})),n.d(e,"identity",(function(){return T.a})),n.d(e,"isObservable",(function(){return E})),n.d(e,"ArgumentOutOfRangeError",(function(){return C.a})),n.d(e,"EmptyError",(function(){return P.a})),n.d(e,"ObjectUnsubscribedError",(function(){return N.a})),n.d(e,"UnsubscriptionError",(function(){return A.a})),n.d(e,"TimeoutError",(function(){return k.a})),n.d(e,"bindCallback",(function(){return W})),n.d(e,"bindNodeCallback",(function(){return B})),n.d(e,"combineLatest",(function(){return H.b})),n.d(e,"concat",(function(){return q.a})),n.d(e,"defer",(function(){return $.a})),n.d(e,"empty",(function(){return K.b})),n.d(e,"forkJoin",(function(){return J})),n.d(e,"from",(function(){return X.a})),n.d(e,"fromEvent",(function(){return tt})),n.d(e,"fromEventPattern",(function(){return et})),n.d(e,"generate",(function(){return nt})),n.d(e,"iif",(function(){return it})),n.d(e,"interval",(function(){return ut})),n.d(e,"merge",(function(){return ct.a})),n.d(e,"never",(function(){return ft})),n.d(e,"of",(function(){return lt.a})),n.d(e,"onErrorResumeNext",(function(){return ht})),n.d(e,"pairs",(function(){return pt})),n.d(e,"partition",(function(){return mt})),n.d(e,"race",(function(){return wt.a})),n.d(e,"range",(function(){return _t})),n.d(e,"throwError",(function(){return xt.a})),n.d(e,"timer",(function(){return St.a})),n.d(e,"using",(function(){return Ot})),n.d(e,"zip",(function(){return jt.b})),n.d(e,"scheduled",(function(){return It.a})),n.d(e,"EMPTY",(function(){return K.a})),n.d(e,"NEVER",(function(){return at})),n.d(e,"config",(function(){return Tt.a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},function(t,e,n){"use strict";n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return h}));var r=n(0),i=n(1),o=n(5),u=n(2),s=n(6);function c(t,e,n,r){return function(i){return i.lift(new a(t,e,n,r))}}var a=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),f=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.keySelector=n,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new s.a,n.set(e,i);var o=new h(e,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(e,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,n){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.a),l=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.a(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.a),h=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.a(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new p(n)),e.add(r.subscribe(t)),e},e}(u.a),p=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.a(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(112),u=n(32),s=n(72),c=function(t){function e(){var e=t.call(this)||this;return e.store=s.store,e.onInit&&setTimeout((function(){return e.onInit()}),1),e}return i(e,t),Object.defineProperty(e.prototype,"state",{get:function(){return this.store.currentState},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cursorPosition",{get:function(){return this.state.input.cursorPosition},enumerable:!0,configurable:!0}),e.prototype.printState=function(t,e,n,r,i){void 0===i&&(i="yellow");var o=this.store.currentState,s=JSON.stringify(r?r(o):o);this.fillText({x:t,y:e,text:s,size:n,name:u.config.fontName,color:i})},e.prototype.setFontSize=function(e,n){void 0===n&&(n=u.config.fontName),t.prototype.setFontSize.call(this,e,n)},e.prototype.drawCursor=function(t,e){void 0===t&&(t=this.cursorPosition?this.cursorPosition[0]:0),void 0===e&&(e=this.cursorPosition?this.cursorPosition[1]:0),this.loadFrame();var n=new Image;n.src=o.default,this.ctx.drawImage(n,t-4,e-2)},e.prototype.cursorInArea=function(t,e,n,r){var i,o;if(!(null===(o=null===(i=this.state)||void 0===i?void 0:i.input)||void 0===o?void 0:o.cursorPosition))return!1;var u=this.state.input.cursorPosition,s=u[0],c=u[1];return s>=t&&s<=n&&c>=e&&c<=r},e.prototype.keyIsPressed=function(t){var e,n,r;return null===(r=null===(n=null===(e=this.state)||void 0===e?void 0:e.input)||void 0===n?void 0:n.keysDown)||void 0===r?void 0:r.includes(t)},e}(n(81).CanvasAPI);e.Renderable=c},function(t,e,n){"use strict";n.d(e,"a",(function(){return a})),n.d(e,"b",(function(){return f}));var r=n(0),i=n(6),o=n(2),u=n(1),s=n(5),c=n(40),a=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.a(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new s.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=s.a.EMPTY)),t},e.prototype.refCount=function(){return Object(c.a)()(this)},e}(o.a),f=function(){var t=a.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.b);u.a},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),i=n(6),o=n(22),u=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r.a(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",(function(){return u})),n.d(e,"a",(function(){return c}));var r=n(0),i=n(1),o=n(18);function u(t,e){return void 0===e&&(e=0),function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.a(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(i.a),a=function(){return function(t,e){this.notification=t,this.destination=e}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(44);function i(){return Object(r.a)(1)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(2),i=n(10),o=n(44),u=n(27);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,s=null,c=t[t.length-1];return Object(i.a)(c)?(s=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof c&&(n=t.pop()),null===s&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(n)(Object(u.a)(t,s))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(0),i=n(7),o=n(27),u=n(4),s=n(3);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new a)}var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new f(t))},t}(),f=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.a(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Object(s.a)(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(e)},e}(u.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(2),i=n(8),o=n(31),u=n(10);function s(t,e,n){void 0===t&&(t=0);var s=-1;return Object(o.a)(e)?s=Number(e)<1?1:Number(e):Object(u.a)(e)&&(n=e),Object(u.a)(n)||(n=i.a),new r.a((function(e){var r=Object(o.a)(t)?t:+t-n.now();return n.schedule(c,r,{index:0,period:s,subscriber:e})}))}function c(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},function(t,e,n){"use strict";var r=n(2),i=n(5),o=n(21);var u=n(49),s=n(20);var c=n(70),a=n(69);function f(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,e){return new r.a((function(n){var r=new i.a;return r.add(e.schedule((function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Object(c.a)(t))return function(t,e){return new r.a((function(n){var r=new i.a;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Object(a.a)(t))return Object(u.a)(t,e);if(function(t){return t&&"function"==typeof t[s.a]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new r.a((function(n){var r,o=new i.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(e.schedule((function(){r=t[s.a](),o.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}n.d(e,"a",(function(){return f}))},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n(30).a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e}(n(28).a);n.d(e,"a",(function(){return u}));var u=new o(i)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return r.a(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(5).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,e,n){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(103);e.store=new r.Store(i.stateSubject,i.actionsObserver,i.reducerManager)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.worldInit=r.createAction("[Dungeon] World Init"),e.addRoom=r.createAction("[Dungeon] Add Room",r.props()),e.enterRoom=r.createAction("[Dungeon] Enter Room",r.props()),e.setActiveRoom=r.createAction("[Dungeon] Set Active Room",r.props())},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var n=t.call(this)||this;return n.setActiveScene=e,n}return i(e,t),e}(n(56).Renderable);e.Scene=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return t.call(this,{type:"init"})||this}return i(e,t),e.prototype.next=function(e){if("function"==typeof e)throw new TypeError("\n\t\t\t\tDispatch expected an object, instead it received a function.\n\t\t\t\tIf you're using the createAction function, make sure to invoke the function\n\t\t\t\tbefore dispatching the action. For example, someAction should be someAction().");if(void 0===e)throw new TypeError("Actions must be objects");if(void 0===e.type)throw new TypeError("Actions must have a type property");t.prototype.next.call(this,e)},e}(n(53).BehaviorSubject);e.ActionsSubject=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(52);e.ofType=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r.filter((function(e){return t.some((function(t){return"string"==typeof t?t===e.type:t.type===e.type}))}))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(52),o=n(32),u=n(76),s=n(72),c=n(79),a=n(78),f=function(){function t(){}return t.onInit=function(){s.store.addReducer(this.storeNodeName,a.userInputReducer),document.addEventListener("mousemove",(function(t){var e=(new Date).valueOf();(!r||e-r>o.config.cursorPollRate)&&(s.store.dispatch(c.mouseMove({event:t})),r=e)})),document.addEventListener("mousedown",(function(t){return s.store.dispatch(c.mouseDown({event:t}))})),document.addEventListener("mouseup",(function(t){return s.store.dispatch(c.mouseUp({event:t}))})),document.addEventListener("mouseover",(function(t){return s.store.dispatch(c.mouseOver({event:t}))})),document.addEventListener("mouseout",(function(t){return s.store.dispatch(c.mouseOut({event:t}))})),document.addEventListener("keydown",(function(t){return s.store.dispatch(c.keyDown({event:t}))})),document.addEventListener("keyup",(function(t){return s.store.dispatch(c.keyUp({event:t}))})),document.addEventListener("keypress",(function(t){return s.store.dispatch(c.keyPress({event:t}))}))},t.keyboardEvents$=function(){return s.store.actions$.pipe(u.ofType(c.keyDown,c.keyUp,c.keyPress))},t.mouseEvents$=function(){return s.store.actions$.pipe(u.ofType(c.mouseMove,c.mouseDown,c.mouseUp,c.mouseOver,c.mouseOut))},t.cursorPosition$=function(){return this.mouseEvents$().pipe(u.ofType(c.mouseMove),i.map((function(t){return t.event})),i.map((function(t){return[t.clientX,t.clientY]})))},t.storeNodeName="input",t}();e.InputHandler=f},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0});var o=n(32),u=n(16),s=n(79),c=o.config.keyBindings,a=function(t){return Object.keys(c).find((function(e){return c[e].includes(t.key)}))};e.createInitialState=function(){return{keysDown:[],mouseDown:!1,cursorPosition:null}},e.userInputReducer=u.createReducer(e.createInitialState(),u.on(s.mouseMove,(function(t,e){var n=e.event;return r(r({},t),{cursorPosition:[n.clientX,n.clientY]})})),u.on(s.mouseDown,(function(t){return r(r({},t),{mouseDown:!0})})),u.on(s.mouseUp,(function(t){return r(r({},t),{mouseDown:!1})})),u.on(s.keyDown,(function(t,e){var n=e.event,o=a(n);return o&&!t.keysDown.includes(o)?r(r({},t),{keysDown:i(t.keysDown,[o])}):t})),u.on(s.keyUp,(function(t,e){var n=e.event,i=a(n);return i&&t.keysDown.includes(i)?r(r({},t),{keysDown:t.keysDown.filter((function(t){return t!==i}))}):t})))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.mouseMove=r.createAction("[User Input] mousemove",r.props()),e.mouseDown=r.createAction("[User Input] mousedown",r.props()),e.mouseUp=r.createAction("[User Input] mouseup",r.props()),e.mouseOver=r.createAction("[User Input] mouseover",r.props()),e.mouseOut=r.createAction("[User Input] mouseout",r.props()),e.keyDown=r.createAction("[User Input] keydown",r.props()),e.keyUp=r.createAction("[User Input] keyup",r.props()),e.keyPress=r.createAction("[User Input] keypress",r.props())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.updateDimensions=r.createAction("[Main-Menu] Update Render Dimensions",r.props())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=new Image,i=function(){function t(){}return Object.defineProperty(t.prototype,"ctx",{get:function(){return t.ctx},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"canvas",{get:function(){return t.canvas},enumerable:!0,configurable:!0}),t.prototype.getClientBoundingRect=function(){return this.canvas.getBoundingClientRect()},t.prototype.getFontName=function(){return this.ctx.font.split(" ").pop()},t.prototype.clear=function(){var t=this.getClientBoundingRect(),e=t.width,n=t.height;this.fillRect({x:0,y:0,width:e,height:n,color:"black"})},t.prototype.saveFrame=function(){r.src=this.ctx.canvas.toDataURL()},t.prototype.loadFrame=function(){r.src&&this.ctx.drawImage(r,0,0)},t.prototype.setFontSize=function(t,e){var n=document.body.getBoundingClientRect(),r=n.width,i=n.height,o=Math.floor(t/((r+i)/4)*100);this.ctx.font=o+'px "'+e+'"'},t.prototype.doWithFont=function(t){var e=this,n=t.fn,r=t.align,i=t.baseline,o=t.color,u=t.alpha,s=t.size,c=t.name,a=this.ctx,f=a.font,l=a.textAlign,h=a.textBaseline;this.setFontSize(s,c),this.ctx.textAlign=r||l,this.ctx.textBaseline=i||h;var p=this.doWithColor({fn:function(){return n(e.ctx)},color:o,alpha:u});return this.ctx.font=f,this.ctx.textAlign=l,this.ctx.textBaseline=h,p},t.prototype.doWithColor=function(t){var e=t.fn,n=t.color,r=t.alpha,i=this.ctx,o=i.globalAlpha,u=i.fillStyle;this.ctx.fillStyle=n||u,this.ctx.globalAlpha=r||1;var s=e(this.ctx);return this.ctx.fillStyle=u,this.ctx.globalAlpha=o,s},t.prototype.fillRect=function(t){var e=this,n=t.x,r=t.y,i=t.width,o=t.height,u=t.color,s=t.alpha;this.doWithColor({fn:function(){return e.ctx.fillRect(n,r,i,o)},color:u,alpha:s})},t.prototype.fillText=function(t){var e=this,n=t.text,r=t.x,i=t.y,o=t.color,u=t.alpha,s=t.size,c=t.align,a=t.baseline,f=t.name;this.doWithFont({fn:function(){return e.ctx.fillText(n,r,i)},color:o,alpha:u,size:s,align:c,baseline:a,name:f})},t.canvas=document.createElement("canvas"),t.ctx=t.canvas.getContext("2d"),t}();e.CanvasAPI=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(116);e.selectDungeonState=r.createSelector(i.selectScenes,(function(t){return t.dungeon})),e.selectRooms=r.createSelector(e.selectDungeonState,(function(t){return t.rooms})),e.selectActiveRoom=r.createSelector(e.selectDungeonState,(function(t){var e=t.activeRoom;return console.log("active room:",e),e}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(84);var r=n(90),i=n(32),o=n(91);new r(i.config.fontName).load().then((function(){return new o.Game(document.body)}))},function(t,e,n){var r=n(85),i=n(86);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1},u=(r(i,o),i.locals?i.locals:{});t.exports=u},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),u=[];function s(t){for(var e=-1,n=0;n<u.length;n++)if(u[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],c=e.base?o[0]+e.base:o[0],a=n[c]||0,f="".concat(c," ").concat(a);n[c]=a+1;var l=s(f),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(u[l].references++,u[l].updater(h)):u.push({identifier:f,updater:v(h,e),references:1}),r.push(f)}return r}function a(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var u=o(t.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function h(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),u=t.childNodes;u[e]&&t.removeChild(u[e]),u.length?t.insertBefore(o,u[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,b=0;function v(t,e){var n,r,i;if(e.singleton){var o=b++;n=d||(d=a(e)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=a(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);u[i].references--}for(var o=c(t,e),a=0;a<n.length;a++){var f=s(n[a]);0===u[f].references&&(u[f].updater(),u.splice(f,1))}n=o}}}},function(t,e,n){var r=n(87),i=n(88),o=n(89);e=r(!1);var u=i(o);e.push([t.i,"@font-face{font-family:'Press Start 2P';src:url("+u+") format(\"truetype\");font-weight:500;font-style:normal}html,body,canvas{font-family:'Press Start 2P';display:block;margin:0;padding:0;width:100vw;height:100vh;cursor:none}\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(u=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([i]).join("\n")}var u,s,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default=n.p+"2c404fd06cd67770807d242b2d2e5a16.ttf"},function(t,e,n){!function(){function e(t,e){document.addEventListener?t.addEventListener("scroll",e,!1):t.attachEvent("scroll",e)}function n(t){this.a=document.createElement("div"),this.a.setAttribute("aria-hidden","true"),this.a.appendChild(document.createTextNode(t)),this.b=document.createElement("span"),this.c=document.createElement("span"),this.h=document.createElement("span"),this.f=document.createElement("span"),this.g=-1,this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;",this.b.appendChild(this.h),this.c.appendChild(this.f),this.a.appendChild(this.b),this.a.appendChild(this.c)}function r(t,e){t.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+e+";"}function i(t){var e=t.a.offsetWidth,n=e+100;return t.f.style.width=n+"px",t.c.scrollLeft=n,t.b.scrollLeft=t.b.scrollWidth+100,t.g!==e&&(t.g=e,!0)}function o(t,n){function r(){var t=o;i(t)&&t.a.parentNode&&n(t.g)}var o=t;e(t.b,r),e(t.c,r),i(t)}function u(t,e){var n=e||{};this.family=t,this.style=n.style||"normal",this.weight=n.weight||"normal",this.stretch=n.stretch||"normal"}var s=null,c=null,a=null,f=null;function l(){return null===f&&(f=!!document.fonts),f}function h(){if(null===a){var t=document.createElement("div");try{t.style.font="condensed 100px sans-serif"}catch(t){}a=""!==t.style.font}return a}function p(t,e){return[t.style,t.weight,h()?t.stretch:"","100px",e].join(" ")}u.prototype.load=function(t,e){var i=this,u=t||"BESbswy",a=0,f=e||3e3,h=(new Date).getTime();return new Promise((function(t,e){if(l()&&!function(){if(null===c)if(l()&&/Apple/.test(window.navigator.vendor)){var t=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);c=!!t&&603>parseInt(t[1],10)}else c=!1;return c}()){var d=new Promise((function(t,e){!function n(){(new Date).getTime()-h>=f?e(Error(f+"ms timeout exceeded")):document.fonts.load(p(i,'"'+i.family+'"'),u).then((function(e){1<=e.length?t():setTimeout(n,25)}),e)}()})),b=new Promise((function(t,e){a=setTimeout((function(){e(Error(f+"ms timeout exceeded"))}),f)}));Promise.race([b,d]).then((function(){clearTimeout(a),t(i)}),e)}else!function(t){document.body?t():document.addEventListener?document.addEventListener("DOMContentLoaded",(function e(){document.removeEventListener("DOMContentLoaded",e),t()})):document.attachEvent("onreadystatechange",(function e(){"interactive"!=document.readyState&&"complete"!=document.readyState||(document.detachEvent("onreadystatechange",e),t())}))}((function(){function c(){var e;(e=-1!=v&&-1!=y||-1!=v&&-1!=m||-1!=y&&-1!=m)&&((e=v!=y&&v!=m&&y!=m)||(null===s&&(e=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),s=!!e&&(536>parseInt(e[1],10)||536===parseInt(e[1],10)&&11>=parseInt(e[2],10))),e=s&&(v==w&&y==w&&m==w||v==_&&y==_&&m==_||v==g&&y==g&&m==g)),e=!e),e&&(x.parentNode&&x.parentNode.removeChild(x),clearTimeout(a),t(i))}var l=new n(u),d=new n(u),b=new n(u),v=-1,y=-1,m=-1,w=-1,_=-1,g=-1,x=document.createElement("div");x.dir="ltr",r(l,p(i,"sans-serif")),r(d,p(i,"serif")),r(b,p(i,"monospace")),x.appendChild(l.a),x.appendChild(d.a),x.appendChild(b.a),document.body.appendChild(x),w=l.a.offsetWidth,_=d.a.offsetWidth,g=b.a.offsetWidth,function t(){if((new Date).getTime()-h>=f)x.parentNode&&x.parentNode.removeChild(x),e(Error(f+"ms timeout exceeded"));else{var n=document.hidden;!0!==n&&void 0!==n||(v=l.a.offsetWidth,y=d.a.offsetWidth,m=b.a.offsetWidth,c()),a=setTimeout(t,50)}}(),o(l,(function(t){v=t,c()})),r(l,p(i,'"'+i.family+'",sans-serif')),o(d,(function(t){y=t,c()})),r(d,p(i,'"'+i.family+'",serif')),o(b,(function(t){m=t,c()})),r(b,p(i,'"'+i.family+'",monospace'))}))}))},t.exports=u}()},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(92),u=n(77),s=n(72),c=function(t){function e(e){var n=t.call(this)||this;return e.innerHTML="",e.appendChild(n.canvas),s.store.subscribe((function(){return n.render()})),u.InputHandler.onInit(),n.setActiveScene(new o.MainMenu((function(t){return n.setActiveScene(t)}))),n.onClientRectUpdate(),n}return i(e,t),e.prototype.setActiveScene=function(t){this._activeScene=t},e.prototype.onClientRectUpdate=function(){var t=this;this._resizeListener||(this._resizeListener=window.addEventListener("resize",(function(){return t.onClientRectUpdate()})));var e=this.canvas.getBoundingClientRect();this.canvas.setAttribute("width",String(e.width)),this.canvas.setAttribute("height",String(e.height)),this.clear(),this.render()},e.prototype.setScene=function(t){this._activeScene=t},e.prototype.render=function(){this._activeScene&&(this._activeScene.clear(),this._activeScene.render(),this._activeScene.drawCursor())},e}(n(81).CanvasAPI);e.Game=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(93))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o,u=n(32),s=n(94),c=n(95),a=n(108),f=n(80),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.defaultFontSize=u.config.fontScale,e.titleFontSize=3*e.defaultFontSize,e.hasActivatedSinceMouseDown=!1,e}return i(e,t),e.prototype.onInit=function(){var t=this;this.items=[{text:"New Game",onSelect:function(){t.setActiveScene(new a.Dungeon((function(e){return t.setActiveScene(e)})))},hitbox:void 0},{text:"Continue Game",onSelect:function(){},hitbox:void 0,disabled:!0},{text:"Import Save",onSelect:function(){},hitbox:void 0},{text:"Export Save",onSelect:function(){},hitbox:void 0},{text:"About",onSelect:function(){},hitbox:void 0}];var e=this.canvas.getBoundingClientRect(),n=e.width,r=e.height,i=this.getTitleDimensions(),o=i.width,u=i.height,s=u/2,c=o+2*s,l=u+(u+s)*(this.items.length+1),h=(n-c)/2,p=(r-l)/2;this.store.dispatch(f.updateDimensions({dimensions:{body:{width:c,height:l,margin:s,position:[h,p]},title:{height:u,width:o,position:[n/2,p+2*u]}}}))},e.prototype.onChanges=function(){if(this.items&&this.state){var t=c.selectKeysDown(this.state);if(t&&t.length){if(this.keyIsPressed("up")?this.activeItem=void 0!==this.activeItem?this.activeItem-1:0:this.keyIsPressed("down")&&(this.activeItem=void 0!==this.activeItem?this.activeItem+1:0),s.Nullish.isNotNullish(this.activeItem)){this.activeItem<0&&(this.activeItem=0),this.activeItem>this.items.length-1&&(this.activeItem=this.items.length-1);var e=this.items[this.activeItem];!e.disabled&&this.keyIsPressed("select")&&(o||(o=!0,e.onSelect()))}}else o=!1}},e.prototype.render=function(){var t=this.state.scenes["main-menu"].dimensions,e=t.body,n=e.height,r=e.width,i=e.position,o=e.margin,u=i[0],s=i[1],c=t.title.position,a=c[0],f=c[1],l=t.title.height;this.drawBackground(u,s,r,n),this.drawTitle(a,f),this.drawItems(u,s+2.5*l,r,l,l+o,o)},e.prototype.getTitleDimensions=function(){var t=this.ctx.font;this.setFontSize(this.titleFontSize);var e=this.ctx.measureText(u.config.title).width,n=(this.ctx.font.match(/\d+/)||[0])[0];return this.ctx.font=t,{height:Number(n),width:e}},e.prototype.drawBackground=function(t,e,n,r){var i=u.config.menuColor;this.fillRect({x:t,y:e,width:n,height:r,color:i}),this.cursorInArea(t,e,t+n,e+r)&&(this.activeItem=void 0)},e.prototype.drawTitle=function(t,e){this.fillText({x:t,y:e,text:u.config.title,size:this.titleFontSize,color:u.config.menuTextColor,align:"center",baseline:"bottom",name:u.config.fontName})},e.prototype.drawItems=function(t,e,n,r,i,o){var u,s=this;null===(u=this.items)||void 0===u||u.forEach((function(u,c){var a=c*i;s.drawMenuItem(u.text,t,e+a,n,r,c,o)}))},e.prototype.drawMenuItem=function(t,e,n,r,i,o,s){var c=this;if(void 0===s&&(s=0),this.items){var a=[e+s,n,e+r-s,n+i],f=this.items[o];f.hitbox&&JSON.stringify(f.hitbox)!==JSON.stringify(a)||(this.items[o].hitbox=a);var l=this.items[o].disabled;!l&&c.cursorInArea.apply(c,a)&&(this.activeItem=o,this.state.input.mouseDown&&(this.hasActivatedSinceMouseDown||(this.hasActivatedSinceMouseDown=!0,this.items[o].onSelect())));var h=this.activeItem===o,p=h?u.config.menuTextHoverColor:u.config.menuTextColor;this.drawMenuItemBackground(e,n,r,i,s,l?u.config.menuItemDisabledColor:u.config.menuItemColor),!l&&h&&this.drawMenuItemBackground(e,n,r,i,s,u.config.selectedItemColor,.4),this.drawMenuItemText(e,n,r,i,s,l?u.config.menuTextDisabledColor:p,t)}},e.prototype.drawMenuItemBackground=function(t,e,n,r,i,o,u){void 0===u&&(u=1),this.fillRect({x:t+i,y:e,width:n-2*i,height:r,color:o,alpha:u})},e.prototype.drawMenuItemText=function(t,e,n,r,i,o,s){this.fillText({color:o,text:s,x:t+(n+i)/2,y:e+r/2,size:this.defaultFontSize,baseline:"middle",align:"center",name:u.config.fontName})},e}(n(74).Scene);e.MainMenu=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.isDefined=function(t){return void 0!==t},t.isNotNull=function(t){return null!==t},t.isNotNullish=function(e){return t.isDefined(e)&&t.isNotNull(e)},t}();e.Nullish=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(77);e.selectUserInputState=r.createFeatureSelector(i.InputHandler.storeNodeName),e.selectCursorPosition=r.createSelector(e.selectUserInputState,(function(t){return t.cursorPosition})),e.selectKeysDown=r.createSelector(e.selectUserInputState,(function(t){return t.keysDown}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arraysAreNotAllowedMsg="arrays are not allowed in action creators",e.typePropertyIsNotAllowedMsg="type property is not allowed in action creators"},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function i(t,e){return Object.defineProperty(e,"type",{value:t,writable:!1})}Object.defineProperty(e,"__esModule",{value:!0}),e.createAction=function(t,e){if("function"==typeof e)return i(t,(function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return r(r({},e.apply(void 0,n)),{type:t})}));switch(e?e._as:"empty"){case"empty":return i(t,(function(){return{type:t}}));case"props":return i(t,(function(e){return r(r({},e),{type:t})}));default:throw new Error("Unexpected config.")}},e.props=function(){return{_as:"props",_p:void 0}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(53),u=n(52),s=function(t){function e(e,n,r){var i=t.call(this)||this;return i.stateSubject=e,i.actionsObserver=n,i.reducerManager=r,i.actions$=i.actionsObserver.asObservable(),i.source=e.asObservable(),i.actionsObserver.asObservable().pipe(u.withLatestFrom(i.stateSubject.asObservable(),i.reducerManager.asObservable(),(function(t,e,n){return n(e,t)})),u.distinctUntilChanged()).subscribe((function(t){return i.stateSubject.next(t)})),i}return i(e,t),Object.defineProperty(e.prototype,"currentState",{get:function(){return this.stateSubject.getValue()},enumerable:!0,configurable:!0}),e.prototype.selectSync=function(t){return t(this.currentState)},e.prototype.selectByPath=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this.pipe(u.pluck.apply(void 0,t),u.distinctUntilChanged())},e.prototype.selectByFunction=function(t){return this.pipe(u.map((function(e){return t(e)})))},e.prototype.lift=function(t){var n=new e(this.stateSubject,this.actionsObserver,this.reducerManager);return n.operator=t,n},e.prototype.dispatch=function(t){this.actionsObserver.next(t)},e.prototype.next=function(t){this.actionsObserver.next(t)},e.prototype.error=function(t){this.actionsObserver.error(t)},e.prototype.complete=function(){this.actionsObserver.complete()},e.prototype.addReducer=function(t,e){this.reducerManager.addReducer(t,e)},e.prototype.addReducerMap=function(t){this.reducerManager.addFeature(t)},e}(o.Observable);e.Store=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var u=n(53),s=n(75),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(u.Observable);e.ReducerObservable=c;var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(s.ActionsSubject);function f(){return function(t,e){void 0===e&&(e={});var n=Object.keys(t);return function(r,i){var u=o(o({},e),r);return n.reduce((function(e,n){var r;return o(o({},e),((r={})[n]=t[n](e[n],i),r))}),u)}}}e.ReducerManagerDispatcher=a,e.makeDefaultReducerFactory=f;var l=function(t){function e(e,n,r){void 0===r&&(r=f());var i=t.call(this,r(e,n))||this;return i.reducers=e,i.initialState=n,i.reducerFactory=r,i}return i(e,t),e.prototype.addFeature=function(t){this.addFeatures([t])},e.prototype.addFeatures=function(t){var e=this,n=t.reduce((function(t,n){var r=n.reducers,i=n.initialState,o=n.key,u=e.reducerFactory(r,i);return t[o]=u,t}),{});this.addReducers(n)},e.prototype.addReducer=function(t,e){var n;this.addReducers(((n={})[t]=e,n))},e.prototype.addReducers=function(t){this.updateReducers(t)},e.prototype.updateReducers=function(t){this.reducers=o(o({},this.reducers),t),this.next(this.reducerFactory(this.reducers,this.initialState))},e}(u.BehaviorSubject);e.ReducerManager=l},function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};function i(t,e){return t===e}function o(t,e,n){for(var r=0;r<t.length;r++)if(!n(t[r],e[r]))return!0;return!1}function u(t,e,n){void 0===e&&(e=i),void 0===n&&(n=i);var r,u=null,s=null;return{memoized:function(){if(void 0!==r)return r.result;if(!u)return s=t.apply(null,arguments),u=arguments,s;if(!o(arguments,u,e))return s;var i=t.apply(null,arguments);return u=arguments,n(s,i)?s:(s=i,i)},reset:function(){u=null,s=null},setResult:function(t){void 0===t&&(t=void 0),r={result:t}},clearResult:function(){r=void 0}}}function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a(u).apply(void 0,t)}function c(t,e,n,i){if(void 0===n){var o=e.map((function(e){return e(t)}));return i.memoized.apply(null,o)}var u=e.map((function(e){return e(t,n)}));return i.memoized.apply(null,r(u,[n]))}function a(t,e){return void 0===e&&(e={stateFn:c}),function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o=n;if(Array.isArray(o[0])){var s=o[0],c=o.slice(1);o=r(s,c)}var a=o.slice(0,o.length-1),f=o[o.length-1],l=a.filter((function(t){return t.release&&"function"==typeof t.release})),h=t((function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return f.apply(null,t)})),p=u((function(t,n){return e.stateFn.apply(null,[t,a,n,h])}));function d(){p.reset(),h.reset(),l.forEach((function(t){return t.release()}))}return Object.assign(p.memoized,{release:d,projector:h.memoized,setResult:p.setResult,clearResult:p.clearResult})}}Object.defineProperty(e,"__esModule",{value:!0}),e.isEqualCheck=i,e.resultMemoize=function(t,e){return u(t,i,e)},e.defaultMemoize=u,e.createSelector=s,e.defaultStateFn=c,e.createSelectorFactory=a,e.createFeatureSelector=function(t){return s((function(e){var n=e[t];return t in e||console.warn('store: The feature name "'+t+"\" does not exist in the state, therefore createFeatureSelector cannot access it.  Be sure it is imported in a loaded module using StoreModule.forRoot('"+t+"', ...) or StoreModule.forFeature('"+t+"', ...).  If the default state is intended to be undefined, as is the case with router state, this development-only warning message can be ignored."),n}),(function(t){return t}))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(n(53).BehaviorSubject);e.StateSubject=o},function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.on=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.pop(),i=t.reduce((function(t,e){return r(t,[e.type])}),[]);return{reducer:n,types:i}},e.createReducer=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=new Map,i=function(t){for(var e=function(e){if(r.has(e)){var n=r.get(e);r.set(e,(function(e,r){return t.reducer(n(e,r),r)}))}else r.set(e,t.reducer)},n=0,i=t.types;n<i.length;n++){e(i[n])}},o=0,u=e;o<u.length;o++){var s=u[o];i(s)}return function(e,n){void 0===e&&(e=t);var i=r.get(n.type);return i?i(e,n):e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(53),i=n(16),o=n(78),u=n(104),s={input:o.createInitialState(),scenes:u.createInitialState()},c={input:o.userInputReducer,scenes:u.reducer};e.stateSubject=new r.BehaviorSubject(s),e.actionsObserver=new i.ActionsSubject,e.reducerManager=new i.ReducerManager(c,s)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(105),o=n(106),u={"main-menu":i.mainMenuReducer,dungeon:o.dungeonReducer};e.createInitialState=function(){return{"main-menu":i.createInitialState(),dungeon:o.createInitialState()}},e.reducer=r.makeDefaultReducerFactory()(u,e.createInitialState())},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),o=n(80);e.createInitialState=function(){return{dimensions:{body:{height:0,width:0,margin:0,position:[0,0]},title:{height:0,width:0,position:[0,0]}}}},e.mainMenuReducer=i.createReducer(e.createInitialState(),i.on(o.updateDimensions,(function(t,e){var n=e.dimensions;return r(r({},t),{dimensions:n})})))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),o=n(73),u=n(107),s=new u.EntityStateAdapter;e.createInitialState=function(){return{rooms:new u.EntityState,activeRoom:null}},e.dungeonReducer=i.createReducer(e.createInitialState(),i.on(o.addRoom,(function(t,e){var n=e.room;return r(r({},t),{rooms:s.upsertOne(n,t.rooms)})})),i.on(o.setActiveRoom,(function(t,e){var n=e.roomID;return r(r({},t),{activeRoom:t.rooms.entities[n]||null})})))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){void 0===t&&(t={}),this.entities=t}return Object.defineProperty(t.prototype,"ids",{get:function(){return this._ids||(this._ids=Reflect.ownKeys(this.entities)),this._ids},enumerable:!0,configurable:!0}),t}();e.EntityState=i;var o=function(){function t(){}return t.prototype.append=function(t,e){var n;return r(r({},e),((n={})[t.id]=t,n))},t.prototype.upsertOne=function(t,e){var n=this.append(t,e.entities);return new i(n)},t}();e.EntityStateAdapter=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(109))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(110),u=n(74),s=n(118),c=n(82),a=n(73),f=n(16),l=n(52),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.world=new o.World((function(t){return e.setActiveScene(t)})),e.player=new s.Player,e.onSetActiveRoom$=e.store.actions$.pipe(f.ofType(a.setActiveRoom),l.map((function(t){var n=t.roomID;return e.store.selectSync(c.selectRooms).entities[n]}))),e}return i(e,t),e.prototype.onInit=function(){var t=this;this.onSetActiveRoom$.subscribe((function(e){e&&(t.previousActiveRoom&&t.previousActiveRoom.removeActor(t.player),e.addActor(t.player),t.previousActiveRoom=e)}))},e.prototype.render=function(){this.world.render()},e}(u.Scene);e.Dungeon=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(52),u=n(16),s=n(111),c=n(74),a=n(82),f=n(73),l=n(117),h=function(t){function e(){var n=null!==t&&t.apply(this,arguments)||this;return n.onEnterRoom$=n.store.actions$.pipe(u.ofType(f.enterRoom),o.tap((function(t){var e=t.x,r=t.y;return n.generateRoom(e,r)})),o.map((function(t){var r=t.x,i=t.y,u=e.coordinatesToID(r,i);n.store.selectByFunction(a.selectRooms).pipe(o.first((function(t){return!!t.entities[u]})),o.take(1)).subscribe((function(){n.store.dispatch(f.setActiveRoom({roomID:u}))}))}))),n}return i(e,t),e.coordinatesToID=function(t,e){return t+":"+e},e.coordinatesFromID=function(t){return t.split(":").map((function(t){return Number(t)})).slice(0,2)},Object.defineProperty(e.prototype,"rooms",{get:function(){return a.selectRooms(this.state)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentRoom",{get:function(){return a.selectActiveRoom(this.state)},enumerable:!0,configurable:!0}),e.prototype.onInit=function(){this.onEnterRoom$.subscribe((function(){return console.log("Entered A Room")})),this.store.dispatch(f.enterRoom({x:0,y:0}))},e.prototype.render=function(){this.currentRoom&&this.currentRoom.render()},e.prototype.generateRoom=function(t,n){var r,i,o=this.findNeighbors(t,n),u=(r=o,i=function(t,e){var n=l.getCardinalCompliment(e);return!!t&&t.doors[n]},Object.keys(r).reduce((function(t,e){var n=r[e];return t[e]=i(n,e),t}),{}));this.store.dispatch(f.addRoom({room:new s.Room(e.coordinatesToID(t,n),u),coordinates:[t,n]}))},e.prototype.findNeighbors=function(t,n){return{north:this.rooms.entities[e.coordinatesToID(t,n+1)],east:this.rooms.entities[e.coordinatesToID(t+1,n)],south:this.rooms.entities[e.coordinatesToID(t,n-1)],west:this.rooms.entities[e.coordinatesToID(t-1,n)]}},e}(c.Scene);e.World=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0});var u=n(32),s=n(56),c=n(113),a=n(115),f=function(t){function e(e,n){void 0===n&&(n={north:!1,east:!1,south:!1,west:!1});var r=t.call(this)||this;return r.id=e,r.doors=n,r.actors=[],r}return i(e,t),Object.defineProperty(e.prototype,"tileList",{get:function(){var t;return(null===(t=this.tiles)||void 0===t?void 0:t.reduce((function(t,e){return o(t,e)}),[]))||[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"doorCount",{get:function(){return Object.values(this.doors).reduce((function(t,e){return t+(e?1:0)}),0)},enumerable:!0,configurable:!0}),e.prototype.onInit=function(){this.generate()},e.prototype.render=function(){this.tileList.forEach((function(t){t.render()})),this.actors.forEach((function(t){t.render()}))},e.prototype.addActor=function(t){this.actors.includes(t)||this.actors.push(t)},e.prototype.removeActor=function(t){this.actors=this.actors.filter((function(e){return e!==t}))},e.prototype.generate=function(){this.doors,this.tiles=[[]];for(var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height,r=Math.min(Math.floor(e/u.config.roomSize[0]),Math.floor(n/u.config.roomSize[1])),i=[e/2,n/2],o=i[1],s=i[0]-u.config.roomSize[0]*r/2,a=o-u.config.roomSize[1]*r/2,f=u.config.roomSize,l=f[0],h=f[1],p=0;p<l;p++){this.tiles[p]=[];for(var d=0;d<h;d++)this.tiles[p][d]=new c.Tile([Math.floor(s+p*r),Math.floor(a+d*r)],this.determineTileType(p,l-1,d,h-1))}},e.prototype.determineTileType=function(t,e,n,r){var i=n%r==0,o=n===r,s=t%e==0,f=0===t,l=t===e,h=c.Tile.type.Floor;return f&&(h=o?c.Tile.type.SW_Corner:c.Tile.type.W_Wall),l&&(h=o?c.Tile.type.SE_Corner:c.Tile.type.E_Wall),i&&(s||(h=Math.random()<u.config.brokenWallProbability?a.ExtendedMath.randomInt(0,6):0)),h},e}(s.Renderable);e.Room=f},function(t,e,n){"use strict";n.r(e),e.default=n.p+"76a0d81952d0c2fe44203690b89bae7c.png"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(114),u=n(32),s=function(t){function e(e,n){var r=t.call(this)||this;return r.location=e,r.type=n,r.needsToRender=!0,r}var n,r;return i(e,t),e.prototype.render=function(){this.drawTile()},Object.defineProperty(e.prototype,"renderSize",{get:function(){var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height;return Math.min(Math.floor(e/u.config.roomSize[0]),Math.floor(n/u.config.roomSize[1]))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureCoords",{get:function(){var t=[this.type%4,Math.floor(this.type/4)],e=t[1],n=[t[0]*u.config.tileSize,e*u.config.tileSize],r=n[0],i=n[1],o=u.config.tileSize,s=u.config.tileSize,c=this.location;return{sourceX:r,sourceY:i,sourceWidth:o,sourceHeight:s,drawX:c[0],drawY:c[1],drawWidth:this.renderSize,drawHeight:this.renderSize}},enumerable:!0,configurable:!0}),e.prototype.drawTile=function(){var t=this.textureCoords,n=t.sourceX,r=t.sourceY,i=t.sourceWidth,o=t.sourceHeight,u=t.drawX,s=t.drawY,c=t.drawWidth,a=t.drawHeight;this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(e.textures,n,r,i,o,u,s,c,a)},e.textures=((n=new Image).src=o.default,n),e.type=(function(t){t[t.Wall_1=0]="Wall_1",t[t.Wall_2=1]="Wall_2",t[t.Wall_3=2]="Wall_3",t[t.Wall_4=3]="Wall_4",t[t.Wall_5=4]="Wall_5",t[t.Wall_6=5]="Wall_6",t[t.Wall_7=6]="Wall_7",t[t.Door_SW=7]="Door_SW",t[t.Door_SE=8]="Door_SE",t[t.Inner_Corners=9]="Inner_Corners",t[t.W_Wall=10]="W_Wall",t[t.E_Wall=11]="E_Wall",t[t.Inner_Walls=12]="Inner_Walls",t[t.SW_Corner=13]="SW_Corner",t[t.SE_Corner=14]="SE_Corner",t[t.Floor=15]="Floor"}(r||(r={})),r),e}(n(56).Renderable);e.Tile=s},function(t,e,n){"use strict";n.r(e),e.default=n.p+"d995d8c0bcabd98f49a3ee123baff9c8.png"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.randomInt=function(t,e){return t=Math.ceil(t),e=Math.max(e),Math.floor(Math.random()*(e-t+1))+t},t.parseHex=function(t){return parseInt(t||"0",16)},t.toPositiveDeg=function(t){return t<0?t+360:t},t.sum=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.reduce((function(t,e){return t+e}),0)},t.average=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.sum.apply(t,e)/e.length},t}();e.ExtendedMath=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.selectScenes=r.createFeatureSelector("scenes")},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.north=0]="north",t[t.east=1]="east",t[t.south=2]="south",t[t.west=3]="west"}(r=e.CardinalDirections||(e.CardinalDirections={})),function(t){t[t.northeast=0]="northeast",t[t.southeast=1]="southeast",t[t.southwest=2]="southwest",t[t.northwest=3]="northwest"}(e.IntercardinalDirections||(e.IntercardinalDirections={})),e.getCardinalCompliment=function(t){return r[(r[t]+2)%4]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(119))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(120),u=n(121),s=n(32),c=function(t){function e(){return t.call(this,[5,7])||this}var n;return i(e,t),e.prototype.render=function(){var t=this.textureCoords,n=t.sourceX,r=t.sourceY,i=t.sourceWidth,o=t.sourceHeight,u=t.drawX,s=t.drawY,c=t.drawWidth,a=t.drawHeight;this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(e.texture,n,r,i,o,u,s,c,a)},Object.defineProperty(e.prototype,"renderSize",{get:function(){return 100},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tileRenderSize",{get:function(){var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height;return Math.min(Math.floor(e/s.config.roomSize[0]),Math.floor(n/s.config.roomSize[1]))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureCoords",{get:function(){var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height,r=[0,0],i=r[0],o=r[1],u=.8*this.renderSize,c=this.renderSize,a=[e/2,n/2],f=a[1],l=[a[0]-(this.tileRenderSize*(s.config.roomSize[0]-2)+47)/2,f-(this.tileRenderSize*(s.config.roomSize[1]-2)+70)/2],h=l[0],p=l[1],d=this.locationInRoom,b=d[0],v=d[1],y=[this.tileRenderSize*b,this.tileRenderSize*v],m=[h+y[0],p+y[1]];return{sourceX:i,sourceY:o,sourceWidth:47,sourceHeight:70,drawX:m[0],drawY:m[1],drawWidth:u,drawHeight:c}},enumerable:!0,configurable:!0}),e.texture=((n=new Image).src=o.default,n),e}(u.Actor);e.Player=c},function(t,e,n){"use strict";n.r(e),e.default=n.p+"9a34e5ecc82df23578b4da56308250d1.png"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(56),u=n(32),s=function(t){function e(e){void 0===e&&(e=[0,0]);var n=t.call(this)||this;return n.locationInRoom=e,n}return i(e,t),Object.defineProperty(e.prototype,"drawCoordinates",{get:function(){var t=this.locationInRoom.map((function(t){return t*u.config.tileSize}));return[t[0],t[1]]},enumerable:!0,configurable:!0}),e}(o.Renderable);e.Actor=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,