!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=83)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(0),i=n(25),o=n(51),u=n(5),s=n(37),c=n(14),a=n(33),f=function(t){function e(n,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.a;break;case 1:if(!n){u.destination=o.a;break}if("object"==typeof n){n instanceof e?(u.syncErrorThrowable=n.syncErrorThrowable,u.destination=n,n.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,n));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,n,r,i)}return u}return r.a(e,t),e.prototype[s.a]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(u.a),l=function(t){function e(e,n,r,u){var s,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return Object(i.a)(n)?s=n:n&&(s=n.next,r=n.error,u=n.complete,n!==o.a&&(a=Object.create(n),Object(i.a)(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=s,c._error=r,c._complete=u,c}return r.a(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):Object(a.a)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;Object(a.a)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw t;Object(a.a)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return c.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(Object(a.a)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(f)},function(t,e,n){"use strict";var r=n(48),i=n(1),o=n(37),u=n(51);var s=n(21),c=n(36),a=n(14);n.d(e,"a",(function(){return f}));var f=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,s=function(t,e,n){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||e||n?new i.a(t,e,n):new i.a(u.a)}(t,e,n);if(r?s.add(r.call(s,this.source)):s.add(this.source||a.a.useDeprecatedSynchronousErrorHandling&&!s.syncErrorThrowable?this._subscribe(s):this._trySubscribe(s)),a.a.useDeprecatedSynchronousErrorHandling&&s.syncErrorThrowable&&(s.syncErrorThrowable=!1,s.syncErrorThrown))throw s.syncErrorValue;return s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),Object(r.a)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=l(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[s.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:Object(c.b)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=l(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function l(t){if(t||(t=a.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(13),i=n(39),o=n(2);function u(t,e,n,u,s){if(void 0===s&&(s=new r.a(t,n,u)),!s.closed)return e instanceof o.a?e.subscribe(s):Object(i.a)(e)(s)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(7),i=n(47),o=n(25),u=n(38),s=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,s=this._unsubscribe,a=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var f=0;f<n.length;++f){n[f].remove(this)}if(Object(o.a)(s))try{s.call(this)}catch(t){e=t instanceof u.a?c(t.errors):[t]}if(Object(r.a)(a)){f=-1;for(var l=a.length;++f<l;){var h=a[f];if(Object(i.a)(h))try{h.unsubscribe()}catch(t){e=e||[],t instanceof u.a?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new u.a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce((function(t,e){return t.concat(e instanceof u.a?e.errors:e)}),[])}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(2),o=n(1),u=n(5),s=n(22),c=n(67),a=n(37),f=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return r.a(e,t),e}(o.a),l=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r.a(e,t),e.prototype[a.a]=function(){return new f(this)},e.prototype.lift=function(t){var e=new h(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new s.a;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new s.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new s.a;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new s.a;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new s.a;return this.hasError?(t.error(this.thrownError),u.a.EMPTY):this.isStopped?(t.complete(),u.a.EMPTY):(this.observers.push(t),new c.a(this,t))},e.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},e.create=function(t,e){return new h(t,e)},e}(i.a),h=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r.a(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.a.EMPTY},e}(l)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(30),i=new(n(28).a)(r.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new u(t,e))}}var u=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new s(t,this.project,this.thisArg))},t}(),s=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a)},function(t,e,n){"use strict";function r(t){return t&&"function"==typeof t.schedule}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o}));var r=n(2),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(39),o=n(65);function u(t,e){return e?Object(o.a)(t,e):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,e,n){"use strict";function r(){}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(96)),r(n(97)),r(n(98)),r(n(75)),r(n(99)),r(n(100)),r(n(101)),r(n(102)),r(n(76))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(t,e){return function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new s(t,this.predicate,this.thisArg))},t}(),s=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return s}));var r,i=n(11),o=n(35),u=n(42);r||(r={});var s=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(u.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,e,n){"use strict";function r(t){return t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,"a",(function(){return i}));var i=r()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n(0),i=n(3),o=n(4),u=n(13),s=n(9),c=n(12);function a(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(a((function(n,r){return Object(c.a)(t(n,r)).pipe(Object(s.a)((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new f(t,n))})}var f=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new u.a(this,e,n),o=this.destination;o.add(r);var s=Object(i.a)(this,t,void 0,void 0,r);s!==r&&o.add(s)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(68),o=n(49);function u(t,e){return e?Object(o.a)(t,e):new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(54),o=function(t){function e(n,r){void 0===r&&(r=i.a.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),i=n(6),o=n(5),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.a(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.a)},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){return t.call(this)||this}return r.a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(5).a);n.d(e,"a",(function(){return o}));var o=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(i)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(35),i=n(61);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,e,n){"use strict";function r(t){setTimeout((function(){throw t}),0)}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.config=Object.assign({},{title:"Daedalus",fontName:"Press Start 2P",fontScale:100,selectedItemColor:"#501500",menuColor:"#555",menuItemColor:"#444",menuTextColor:"#bbb",menuTextHoverColor:"#eee",menuItemDisabledColor:"#666",menuTextDisabledColor:"#444",keyBindings:{up:["ArrowUp","w","W"],down:["ArrowDown","s","S"],left:["ArrowLeft","a","A"],right:["ArrowRight","d","D"],select:["Enter"," "],back:["Escape","Backspace"]},cursorPollRate:10,roomSize:[16,16],tileSize:16},{})},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(10),i=n(27),o=n(49);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(r.a)(n)?(t.pop(),Object(o.a)(t,n)):Object(i.a)(t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o}));var r=n(15);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return t?1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}:r.a}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";var r=n(68),i=n(33),o=n(20),u=n(21),s=n(69),c=n(70),a=n(47);n.d(e,"a",(function(){return f}));var f=function(t){if(t&&"function"==typeof t[u.a])return f=t,function(t){var e=f[u.a]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Object(s.a)(t))return Object(r.a)(t);if(Object(c.a)(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return e=t,function(t){for(var n=e[o.a]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,f,l=Object(a.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0),i=n(1);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new s(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),s=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(0),i=n(6),o=n(66),u=n(5),s=n(59),c=n(22),a=n(67),f=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new l(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.a;if(this.isStopped||this.hasError?e=u.a.EMPTY:(this.observers.push(t),e=new a.a(this,t)),i&&t.add(t=new s.a(t,i)),n)for(var f=0;f<o&&!t.closed;f++)t.next(r[f]);else for(f=0;f<o&&!t.closed;f++)t.next(r[f].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.a),l=function(){return function(t,e){this.time=t,this.value=e}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(2);function i(t,e){return e?new r.a((function(n){return e.schedule(o,0,{error:t,subscriber:n})})):new r.a((function(e){return e.error(t)}))}function o(t){var e=t.error;t.subscriber.error(e)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(10),o=n(7),u=n(4),s=n(3),c=n(27),a={};function f(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(c.a)(t,r).lift(new l(n))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return r.a(e,t),e.prototype._next=function(t){this.values.push(a),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Object(s.a)(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,u=o[n],s=this.toRespond?u===a?--this.toRespond:this.toRespond:0;o[n]=e,0===s&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(23),i=n(19);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(2),i=n(12),o=n(11);function u(t){return new r.a((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(i.a)(n):Object(o.b)()).subscribe(e)}))}},function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"a",(function(){return l}));var r=n(0),i=n(27),o=n(7),u=n(1),s=n(4),c=n(3),a=n(20);function f(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(i.a)(t,void 0).lift(new l(n))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return r.a(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new d(t)):"function"==typeof t[a.a]?e.push(new p(t[a.a]())):e.push(new b(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var u,s=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),s.done)return void n.complete();o.push(s.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.a),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[a.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),b=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(e,t),e.prototype[a.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(c.a)(this,this.observable,this,e)},e}(s.a)},function(t,e,n){"use strict";function r(t){return null!==t&&"object"==typeof t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(1);function i(t){for(;t;){var e=t,n=e.closed,i=e.destination,o=e.isStopped;if(n||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(2),i=n(5);function o(t,e){return new r.a((function(n){var r=new i.a,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}},function(t,e,n){"use strict";var r=n(0),i=1,o=function(){return Promise.resolve()}(),u={};function s(t){return t in u&&(delete u[t],!0)}var c=function(t){var e=i++;return u[e]=!0,o.then((function(){return s(e)&&t()})),e},a=function(t){s(t)},f=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=c(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(a(n),e.scheduled=void 0)},e}(n(30).a),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(28).a);n.d(e,"a",(function(){return h}));var h=new l(f)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(14),i=n(33),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n(4),o=n(3);function u(t){return function(e){return e.lift(new s(t))}}var s=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,r){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.a),a=n(8),f=n(64);function l(t,e){return void 0===e&&(e=a.a),u((function(){return Object(f.a)(t,e)}))}function h(t){return function(e){return e.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add(Object(o.a)(r,n)),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.a),b=n(1);function v(t,e){return void 0===e&&(e=null),function(n){return n.lift(new y(t,e))}}var y=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?w:m}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.a(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(b.a),w=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%n==0&&r.push([]);for(var o=r.length;o--;){var u=r[o];u.push(t),u.length===e&&(r.splice(o,1),this.destination.next(u))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(b.a),_=n(10);function g(t){var e=arguments.length,n=a.a;Object(_.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new x(t,r,i,n))}}var x=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new O(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),O=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;u.bufferTimeSpan=n,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var s=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:s,bufferTimeSpan:n};u.add(s.closeAction=o.schedule(j,n,c))}else{var a={subscriber:u,context:s},f={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(s.closeAction=o.schedule(T,n,a)),u.add(o.schedule(I,r,f))}return u}return r.a(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(j,n,r))}},e.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(b.a);function j(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function I(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(T,n,{subscriber:r,context:o})),this.schedule(t,e))}function T(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var E=n(5);function C(t,e){return function(n){return n.lift(new N(t,e))}}var N=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new P(t,this.openings,this.closingSelector))},t}(),P=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,n)),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new E.a,r={buffer:[],subscription:n};e.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(i.a);function A(t){return function(e){return e.lift(new k(t))}}var k=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new R(t,this.closingSelector))},t}(),R=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,r,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new E.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(i.a),M=n(13);function V(t){return function(e){var n=new D(t),r=e.lift(n);return n.caught=r}}var D=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new W(t,this.selector,this.caught))},t}(),W=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new M.a(this,void 0,void 0);this.add(r);var i=Object(o.a)(this,n,void 0,void 0,r);i!==r&&this.add(i)}},e}(i.a),F=n(43);function z(t){return function(e){return e.lift(new F.a(t))}}var B=n(7),U=n(12);function L(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(B.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(U.a)([e].concat(t)),new F.a(n))}}var Y=n(32);function H(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Y.a.apply(void 0,[e].concat(t)))}}var q=n(61),$=n(23);function K(t,e){return Object($.a)(t,e,1)}function G(t,e){return K((function(){return t}),e)}function J(t){return function(e){return e.lift(new X(t,e))}}var X=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(b.a);function Z(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r.durationSubscription=null,r}return r.a(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.a);function nt(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new rt(t,e))}}var rt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(b.a);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(e){return e.lift(new st(t))}}var st=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.a(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(b.a);function at(t){return t instanceof Date&&!isNaN(+t)}var ft=n(18);function lt(t,e){void 0===e&&(e=a.a);var n=at(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ht(n,e))}}var ht=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new dt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(ft.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(ft.a.createComplete()),this.unsubscribe()},e}(b.a),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),bt=n(2);function vt(t,e){return e?function(n){return new wt(n,e).lift(new yt(t))}:function(e){return e.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new mt(t,this.delayDurationSelector))},t}(),mt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.a),wt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.a(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new _t(t,this.source))},e}(bt.a),_t=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.a(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(b.a);function gt(){return function(t){return t.lift(new xt)}}var xt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new St(t))},t}(),St=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(b.a);function Ot(t,e){return function(n){return n.lift(new jt(t,e))}}var jt=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new It(t,this.keySelector,this.flushes))},t}(),It=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=n,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.a);function Tt(t,e){return function(n){return n.lift(new Et(t,e))}}var Et=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Ct(t,this.compare,this.keySelector))},t}(),Ct=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof n&&(i.compare=n),i}return r.a(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(b.a);function Nt(t,e){return Tt((function(n,r){return e?e(n[t],r[t]):n[t]===r[t]}))}var Pt=n(24),At=n(17),kt=n(26);function Rt(t){return void 0===t&&(t=Dt),function(e){return e.lift(new Mt(t))}}var Mt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Vt(t,this.errorFactory))},t}(),Vt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(b.a);function Dt(){return new kt.a}var Wt=n(11);function Ft(t){return function(e){return 0===t?Object(Wt.b)():e.lift(new zt(t))}}var zt=function(){function t(t){if(this.total=t,this.total<0)throw new Pt.a}return t.prototype.call=function(t,e){return e.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(b.a);function Ut(t,e){if(t<0)throw new Pt.a;var n=arguments.length>=2;return function(r){return r.pipe(Object(At.a)((function(e,n){return n===t})),Ft(1),n?ut(e):Rt((function(){return new Pt.a})))}}var Lt=n(35);function Yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object(Y.a)(e,Lt.a.apply(void 0,t))}}function Ht(t,e){return function(n){return n.lift(new qt(t,e,n))}}var qt=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new $t(t,this.predicate,this.thisArg,this.source))},t}(),$t=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function Kt(){return function(t){return t.lift(new Gt)}}var Gt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Jt(t))},t}(),Jt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a),Xt=n(9);function Qt(t,e){return e?function(n){return n.pipe(Qt((function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Xt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new Zt(t))}}var Zt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new M.a(this,e,n),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.concurrent,this.scheduler))},t}(),re=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.a);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new ue(t,this.callback))},t}(),ue=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new E.a(n)),r}return r.a(e,t),e}(b.a);function se(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ce(t,n,!1,e))}}var ce=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ae(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ae=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.predicate=n,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(b.a);function fe(t,e){return function(n){return n.lift(new ce(t,n,!0,e))}}var le=n(19);function he(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(At.a)((function(e,n){return t(e,n,r)})):le.a,Ft(1),n?ut(e):Rt((function(){return new kt.a})))}}var pe=n(55);function de(){return function(t){return t.lift(new be)}}var be=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ve(t))},t}(),ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype._next=function(t){},e}(b.a);function ye(){return function(t){return t.lift(new me)}}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new we(t))},t}(),we=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function _e(t){return function(e){return 0===t?Object(Wt.b)():e.lift(new ge(t))}}var ge=function(){function t(t){if(this.total=t,this.total<0)throw new Pt.a}return t.prototype.call=function(t,e){return e.subscribe(new xe(t,this.total))},t}(),xe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(b.a);function Se(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(At.a)((function(e,n){return t(e,n,r)})):le.a,_e(1),n?ut(e):Rt((function(){return new kt.a})))}}function Oe(t){return function(e){return e.lift(new je(t))}}var je=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.value))},t}(),Ie=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.a(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(b.a);function Te(){return function(t){return t.lift(new Ee)}}var Ee=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ce(t))},t}(),Ce=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){this.destination.next(ft.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(ft.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(ft.a.createComplete()),t.complete()},e}(b.a);function Ne(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new Pe(t,e,n))}}var Pe=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new Ae(t,this.accumulator,this.seed,this.hasSeed))},t}(),Ae=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(b.a),ke=n(36);function Re(t,e){return arguments.length>=2?function(n){return Object(ke.a)(Ne(t,e),_e(1),ut(e))(n)}:function(e){return Object(ke.a)(Ne((function(e,n,r){return t(e,n,r+1)})),_e(1))(e)}}function Me(t){return Re("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Ve=n(62);function De(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Ve.a.apply(void 0,[e].concat(t)))}}var We=n(44);function Fe(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object($.a)((function(){return t}),e,n):("number"==typeof e&&(n=e),Object($.a)((function(){return t}),n))}function ze(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new Be(t,e,n))}}var Be=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new Ue(t,this.accumulator,this.seed,this.concurrent))},t}(),Ue=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var r=new M.a(this,e,n),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.a);function Le(t){return Re("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var Ye=n(57);function He(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new qe(r,e));var i=Object.create(n,Ye.b);return i.source=n,i.subjectFactory=r,i}}var qe=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),$e=n(59);function Ke(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),function(e){return e.lift(new Ge(t))}}var Ge=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new Je(t,this.nextSources))},t}(),Je=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.a(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new M.a(this,void 0,void 0),n=this.destination;n.add(e);var r=Object(o.a)(this,t,void 0,void 0,e);r!==e&&n.add(r)}else this.destination.complete()},e}(i.a);function Xe(){return function(t){return t.lift(new Qe)}}var Qe=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t))},t}(),Ze=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.a(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(b.a),tn=n(71);function en(t,e){return function(n){return[Object(At.a)(t,e)(n),Object(At.a)(Object(tn.a)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return Object(Xt.a)(rn(t,n))(e)}}function rn(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var on=n(6);function un(t){return t?He((function(){return new on.a}),t):He(new on.a)}var sn=n(58);function cn(t){return function(e){return He(new sn.a(t))(e)}}var an=n(29);function fn(){return function(t){return He(new an.a)(t)}}var ln=n(41);function hn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new ln.a(t,e,r);return function(t){return He((function(){return o}),i)(t)}}var pn=n(63);function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),e.lift.call(pn.a.apply(void 0,[e].concat(t)))}}function bn(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Wt.b)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new yn(t,this.count,this.source))},t}(),yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function mn(t){return function(e){return e.lift(new wn(t))}}var wn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new _n(t,this.notifier,e))},t}(),_n=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new on.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(i.a);function gn(t){return void 0===t&&(t=-1),function(e){return e.lift(new xn(t,e))}}var xn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Sn(t,this.count,this.source))},t}(),Sn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function On(t){return function(e){return e.lift(new jn(t,e))}}var jn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new In(t,this.notifier,this.source))},t}(),In=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{n=new on.a;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.a),Tn=n(40);function En(t){return function(e){return e.lift(new Cn(t))}}var Cn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new Nn(t),r=e.subscribe(n);return r.add(Object(o.a)(n,this.notifier)),r},t}(),Nn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.a(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.a);function Pn(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new An(t,e))}}var An=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new kn(t,this.period,this.scheduler))},t}(),kn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Rn,n,{subscriber:i,period:n})),i}return r.a(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(b.a);function Rn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Mn(t,e){return function(n){return n.lift(new Vn(t,e))}}var Vn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Dn(t,this.compareTo,this.comparator))},t}(),Dn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new Wn(e,i))),i}return r.a(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var r=t.shift(),i=e.shift(),o=!1;try{o=n?n(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(b.a),Wn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.a(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(b.a);function Fn(){return new on.a}function zn(){return function(t){return Object(Tn.a)()(He(Fn)(t))}}function Bn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift(function(t){var e,n,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,s=t.refCount,c=t.scheduler,a=0,f=!1,l=!1;return function(t){a++,e&&!f||(f=!1,e=new ln.a(i,u,c),n=t.subscribe({next:function(t){e.next(t)},error:function(t){f=!0,e.error(t)},complete:function(){l=!0,n=void 0,e.complete()}}));var r=e.subscribe(this);this.add((function(){a--,r.unsubscribe(),n&&!l&&s&&0===a&&(n.unsubscribe(),n=void 0,e=void 0)}))}}(r))}}function Un(t){return function(e){return e.lift(new Ln(t,e))}}var Ln=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Yn(t,this.predicate,this.source))},t}(),Yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new kt.a)},e}(b.a);function Hn(t){return function(e){return e.lift(new qn(t))}}var qn=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new $n(t,this.total))},t}(),$n=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(b.a);function Kn(t){return function(e){return e.lift(new Gn(t))}}var Gn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Pt.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new b.a(t)):e.subscribe(new Jn(t,this._skipCount))},t}(),Jn=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.a(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(b.a);function Xn(t){return function(e){return e.lift(new Qn(t))}}var Qn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Zn(t,this.notifier))},t}(),Zn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var i=new M.a(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=Object(o.a)(r,n,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.a(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.a);function tr(t){return function(e){return e.lift(new er(t))}}var er=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new nr(t,this.predicate))},t}(),nr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(b.a);function rr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(_.a)(n)?(t.pop(),function(e){return Object(Y.a)(t,e,n)}):function(e){return Object(Y.a)(t,e)}}var ir=n(50),or=n(31),ur=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=ir.a);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!Object(or.a)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.a),i}return r.a(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=ir.a),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(bt.a);function sr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new cr(t,e))}}var cr=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new ur(e,this.delay,this.scheduler).subscribe(t)},t}();function ar(t,e){return"function"==typeof e?function(n){return n.pipe(ar((function(n,r){return Object(U.a)(t(n,r)).pipe(Object(Xt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new fr(t))}}var fr=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new lr(t,this.project))},t}(),lr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=this.innerSubscription;r&&r.unsubscribe();var i=new M.a(this,e,n),u=this.destination;u.add(i),this.innerSubscription=Object(o.a)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e}(i.a);function hr(){return ar(le.a)}function pr(t,e){return e?ar((function(){return t}),e):ar((function(){return t}))}function dr(t){return function(e){return e.lift(new br(t))}}var br=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vr(t),r=Object(o.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),vr=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.a);function yr(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new mr(t,e))}}var mr=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new wr(t,this.predicate,this.inclusive))},t}(),wr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(b.a),_r=n(15),gr=n(25);function xr(t,e,n){return function(r){return r.lift(new Sr(t,e,n))}}var Sr=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Or(t,this.nextOrObserver,this.error,this.complete))},t}(),Or=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=_r.a,o._tapError=_r.a,o._tapComplete=_r.a,o._tapError=r||_r.a,o._tapComplete=i||_r.a,Object(gr.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||_r.a,o._tapError=n.error||_r.a,o._tapComplete=n.complete||_r.a),o}return r.a(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(b.a),jr={leading:!0,trailing:!1};function Ir(t,e){return void 0===e&&(e=jr),function(n){return n.lift(new Tr(t,e.leading,e.trailing))}}var Tr=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Er(t,this.durationSelector,this.leading,this.trailing))},t}(),Er=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,r,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.a);function Cr(t,e,n){return void 0===e&&(e=a.a),void 0===n&&(n=jr),function(r){return r.lift(new Nr(t,e,n.leading,n.trailing))}}var Nr=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new Pr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Pr=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.duration=n,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.a(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Ar,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(b.a);function Ar(t){t.subscriber.clearThrottle()}var kr=n(45);function Rr(t){return void 0===t&&(t=a.a),function(e){return Object(kr.a)((function(){return e.pipe(Ne((function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Xt.a)((function(t){var e=t.current,n=t.last,r=t.value;return new Mr(r,e-n)})))}))}}var Mr=function(){return function(t,e){this.value=t,this.interval=e}}(),Vr=n(60);function Dr(t,e,n){return void 0===n&&(n=a.a),function(r){var i=at(t),o=i?+t-n.now():Math.abs(t);return r.lift(new Wr(o,i,e,n))}}var Wr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Fr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Fr=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.absoluteTimeout=n,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.a(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.a),zr=n(42);function Br(t,e){return void 0===e&&(e=a.a),Dr(t,Object(zr.a)(new Vr.a),e)}function Ur(t){return void 0===t&&(t=a.a),Object(Xt.a)((function(e){return new Lr(e,t.now())}))}var Lr=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Yr(t,e,n){return 0===n?[e]:(t.push(e),t)}function Hr(){return Re(Yr,[])}function qr(t){return function(e){return e.lift(new $r(t))}}var $r=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Kr(t),r=e.subscribe(n);return r.closed||n.add(Object(o.a)(n,this.windowBoundaries)),r},t}(),Kr=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new on.a,e.next(n.window),n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new on.a;e.next(n)},e}(i.a);function Gr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new Jr(t,e))}}var Jr=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Xr(t,this.windowSize,this.startWindowEvery))},t}(),Xr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new on.a],i.count=0,e.next(i.windows[0]),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var s=this.count-r+1;if(s>=0&&s%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var c=new on.a;i.push(c),n.next(c)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(b.a);function Qr(t){var e=a.a,n=null,r=Number.POSITIVE_INFINITY;return Object(_.a)(arguments[3])&&(e=arguments[3]),Object(_.a)(arguments[2])?e=arguments[2]:Object(or.a)(arguments[2])&&(r=arguments[2]),Object(_.a)(arguments[1])?e=arguments[1]:Object(or.a)(arguments[1])&&(n=arguments[1]),function(i){return i.lift(new Zr(t,n,r,e))}}var Zr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ei(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.a(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(on.a),ei=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;u.destination=e,u.windowTimeSpan=n,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var s=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:s,context:null},a={windowTimeSpan:n,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,n,c)),u.add(o.schedule(ri,r,a))}else{var f={subscriber:u,window:s,windowTimeSpan:n};u.add(o.schedule(ni,n,f))}return u}return r.a(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(b.a);function ni(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function ri(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),u={action:this,subscription:null},s={subscriber:n,window:o,context:u};u.subscription=r.schedule(ii,e,s),this.add(u.subscription),this.schedule(t,i)}function ii(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function oi(t,e){return function(n){return n.lift(new ui(t,e))}}var ui=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new si(t,this.openings,this.closingSelector))},t}(),si=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,n,n)),i}return r.a(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var s=new on.a,c=new E.a,a={window:s,subscription:c};this.contexts.push(a);var f=Object(o.a)(this,u,a);f.closed?this.closeWindow(this.contexts.length-1):(f.context=a,c.add(f)),this.destination.next(s)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(i.a);function ci(t){return function(e){return e.lift(new ai(t))}}var ai=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new fi(t,this.closingSelector))},t}(),fi=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new on.a;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(i.a);function li(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var r=t;return e.lift(new hi(r,n))}}var hi=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new pi(t,this.observables,this.project))},t}(),pi=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.observables=n,i.project=r,i.toRespond=[];var u=n.length;i.values=new Array(u);for(var s=0;s<u;s++)i.toRespond.push(s);for(s=0;s<u;s++){var c=n[s];i.add(Object(o.a)(i,c,c,s))}return i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values[n]=e;var o=this.toRespond;if(o.length>0){var u=o.indexOf(n);-1!==u&&o.splice(u,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a),di=n(46);function bi(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(di.b.apply(void 0,[e].concat(t)))}}function vi(t){return function(e){return e.lift(new di.a(t))}}n.d(e,"audit",(function(){return u})),n.d(e,"auditTime",(function(){return l})),n.d(e,"buffer",(function(){return h})),n.d(e,"bufferCount",(function(){return v})),n.d(e,"bufferTime",(function(){return g})),n.d(e,"bufferToggle",(function(){return C})),n.d(e,"bufferWhen",(function(){return A})),n.d(e,"catchError",(function(){return V})),n.d(e,"combineAll",(function(){return z})),n.d(e,"combineLatest",(function(){return L})),n.d(e,"concat",(function(){return H})),n.d(e,"concatAll",(function(){return q.a})),n.d(e,"concatMap",(function(){return K})),n.d(e,"concatMapTo",(function(){return G})),n.d(e,"count",(function(){return J})),n.d(e,"debounce",(function(){return Z})),n.d(e,"debounceTime",(function(){return nt})),n.d(e,"defaultIfEmpty",(function(){return ut})),n.d(e,"delay",(function(){return lt})),n.d(e,"delayWhen",(function(){return vt})),n.d(e,"dematerialize",(function(){return gt})),n.d(e,"distinct",(function(){return Ot})),n.d(e,"distinctUntilChanged",(function(){return Tt})),n.d(e,"distinctUntilKeyChanged",(function(){return Nt})),n.d(e,"elementAt",(function(){return Ut})),n.d(e,"endWith",(function(){return Yt})),n.d(e,"every",(function(){return Ht})),n.d(e,"exhaust",(function(){return Kt})),n.d(e,"exhaustMap",(function(){return Qt})),n.d(e,"expand",(function(){return ee})),n.d(e,"filter",(function(){return At.a})),n.d(e,"finalize",(function(){return ie})),n.d(e,"find",(function(){return se})),n.d(e,"findIndex",(function(){return fe})),n.d(e,"first",(function(){return he})),n.d(e,"groupBy",(function(){return pe.b})),n.d(e,"ignoreElements",(function(){return de})),n.d(e,"isEmpty",(function(){return ye})),n.d(e,"last",(function(){return Se})),n.d(e,"map",(function(){return Xt.a})),n.d(e,"mapTo",(function(){return Oe})),n.d(e,"materialize",(function(){return Te})),n.d(e,"max",(function(){return Me})),n.d(e,"merge",(function(){return De})),n.d(e,"mergeAll",(function(){return We.a})),n.d(e,"mergeMap",(function(){return $.a})),n.d(e,"flatMap",(function(){return $.a})),n.d(e,"mergeMapTo",(function(){return Fe})),n.d(e,"mergeScan",(function(){return ze})),n.d(e,"min",(function(){return Le})),n.d(e,"multicast",(function(){return He})),n.d(e,"observeOn",(function(){return $e.b})),n.d(e,"onErrorResumeNext",(function(){return Ke})),n.d(e,"pairwise",(function(){return Xe})),n.d(e,"partition",(function(){return en})),n.d(e,"pluck",(function(){return nn})),n.d(e,"publish",(function(){return un})),n.d(e,"publishBehavior",(function(){return cn})),n.d(e,"publishLast",(function(){return fn})),n.d(e,"publishReplay",(function(){return hn})),n.d(e,"race",(function(){return dn})),n.d(e,"reduce",(function(){return Re})),n.d(e,"repeat",(function(){return bn})),n.d(e,"repeatWhen",(function(){return mn})),n.d(e,"retry",(function(){return gn})),n.d(e,"retryWhen",(function(){return On})),n.d(e,"refCount",(function(){return Tn.a})),n.d(e,"sample",(function(){return En})),n.d(e,"sampleTime",(function(){return Pn})),n.d(e,"scan",(function(){return Ne})),n.d(e,"sequenceEqual",(function(){return Mn})),n.d(e,"share",(function(){return zn})),n.d(e,"shareReplay",(function(){return Bn})),n.d(e,"single",(function(){return Un})),n.d(e,"skip",(function(){return Hn})),n.d(e,"skipLast",(function(){return Kn})),n.d(e,"skipUntil",(function(){return Xn})),n.d(e,"skipWhile",(function(){return tr})),n.d(e,"startWith",(function(){return rr})),n.d(e,"subscribeOn",(function(){return sr})),n.d(e,"switchAll",(function(){return hr})),n.d(e,"switchMap",(function(){return ar})),n.d(e,"switchMapTo",(function(){return pr})),n.d(e,"take",(function(){return Ft})),n.d(e,"takeLast",(function(){return _e})),n.d(e,"takeUntil",(function(){return dr})),n.d(e,"takeWhile",(function(){return yr})),n.d(e,"tap",(function(){return xr})),n.d(e,"throttle",(function(){return Ir})),n.d(e,"throttleTime",(function(){return Cr})),n.d(e,"throwIfEmpty",(function(){return Rt})),n.d(e,"timeInterval",(function(){return Rr})),n.d(e,"timeout",(function(){return Br})),n.d(e,"timeoutWith",(function(){return Dr})),n.d(e,"timestamp",(function(){return Ur})),n.d(e,"toArray",(function(){return Hr})),n.d(e,"window",(function(){return qr})),n.d(e,"windowCount",(function(){return Gr})),n.d(e,"windowTime",(function(){return Qr})),n.d(e,"windowToggle",(function(){return oi})),n.d(e,"windowWhen",(function(){return ci})),n.d(e,"withLatestFrom",(function(){return li})),n.d(e,"zip",(function(){return bi})),n.d(e,"zipAll",(function(){return vi}))},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(57),o=n(55),u=n(21),s=n(6),c=n(58),a=n(41),f=n(29),l=n(50),h=n(8),p=n(66),d=n(0),b=n(30),v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return d.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(b.a),y=n(28),m=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(y.a))(v),w=function(t){function e(e,n){void 0===e&&(e=_),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return d.a(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(y.a),_=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return d.a(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(b.a),g=n(54),x=n(5),S=n(1),O=n(18),j=n(36),I=n(15),T=n(19);function E(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var C=n(24),N=n(26),P=n(22),A=n(38),k=n(60),R=n(9),M=n(48),V=n(7),D=n(10);function W(t,e,n){if(e){if(!Object(D.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return W(t,n).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,u=this,s={context:u,subject:o,callbackFunc:t,scheduler:n};return new r.a((function(r){if(n){var i={args:e,subscriber:r,params:s};return n.schedule(F,0,i)}if(!o){o=new f.a;try{t.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(M.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function F(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,s=i.scheduler,c=i.subject;if(!c){c=i.subject=new f.a;try{o.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(s.schedule(z,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function z(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function B(t,e,n){if(e){if(!Object(D.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,n).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.a((function(r){var i=o.context,u=o.subject;if(n)return n.schedule(U,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new f.a;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?u.error(n):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){Object(M.a)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function U(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,u=n.args,s=n.scheduler,c=n.subject;if(!c){c=n.subject=new f.a;try{o.apply(i,u.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(s.schedule(Y,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(s.schedule(L,0,{value:i,subject:c}))}}]))}catch(t){this.add(s.schedule(Y,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function L(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Y(t){var e=t.err;t.subject.error(e)}var H=n(43),q=n(32),$=n(45),K=n(11),G=n(47),J=n(12);function X(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(V.a)(n))return Q(n,null);if(Object(G.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return Q(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(V.a)(t[0])?t[0]:t,null).pipe(Object(R.a)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,e){return new r.a((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,s=function(s){var c=Object(J.a)(t[s]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,u++),i[s]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(u===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},c=0;c<r;c++)s(c);else n.complete()}))}var Z=n(25);function tt(t,e,n,i){return Object(Z.a)(n)&&(i=n,n=void 0),i?tt(t,e,n).pipe(Object(R.a)((function(t){return Object(V.a)(t)?i.apply(void 0,t):i(t)}))):new r.a((function(r){!function t(e,n,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var s=e;e.addEventListener(n,r,o),u=function(){return s.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),u=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),u=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var f=0,l=e.length;f<l;f++)t(e[f],n,r,i,o)}i.add(u)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function et(t,e,n){return n?et(t,e).pipe(Object(R.a)((function(t){return Object(V.a)(t)?n.apply(void 0,t):n(t)}))):new r.a((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(Object(Z.a)(e))return function(){return e(i,r)}}))}function nt(t,e,n,i,o){var u,s;if(1==arguments.length){var c=t;s=c.initialState,e=c.condition,n=c.iterate,u=c.resultSelector||T.a,o=c.scheduler}else void 0===i||Object(D.a)(i)?(s=t,u=T.a,o=i):(s=t,u=i);return new r.a((function(t){var r=s;if(o)return o.schedule(rt,0,{subscriber:t,iterate:n,condition:e,resultSelector:u,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function rt(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function it(t,e,n){return void 0===e&&(e=K.a),void 0===n&&(n=K.a),Object($.a)((function(){return t()?e:n}))}var ot=n(31);function ut(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.a),new r.a((function(n){return n.add(e.schedule(st,t,{subscriber:n,counter:0,period:t})),n}))}function st(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var ct=n(62),at=new r.a(I.a);function ft(){return at}var lt=n(35);function ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return K.a;var n=t[0],i=t.slice(1);return 1===t.length&&Object(V.a)(n)?ht.apply(void 0,n):new r.a((function(t){var e=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(J.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function pt(t,e){return e?new r.a((function(n){var r=Object.keys(t),i=new x.a;return i.add(e.schedule(dt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i})):new r.a((function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()}))}function dt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var u=e[n];r.next([u,o[u]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var bt=n(71),vt=n(39),yt=n(17);function mt(t,e,n){return[Object(yt.a)(e,n)(new r.a(Object(vt.a)(t))),Object(yt.a)(Object(bt.a)(e,n))(new r.a(Object(vt.a)(t)))]}var wt=n(63);function _t(t,e,n){return void 0===t&&(t=0),new r.a((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(gt,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function gt(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var xt=n(42),St=n(64);function Ot(t,e){return new r.a((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Object(J.a)(i):K.a).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var jt=n(46),It=n(65),Tt=n(14);n.d(e,"Observable",(function(){return r.a})),n.d(e,"ConnectableObservable",(function(){return i.a})),n.d(e,"GroupedObservable",(function(){return o.a})),n.d(e,"observable",(function(){return u.a})),n.d(e,"Subject",(function(){return s.a})),n.d(e,"BehaviorSubject",(function(){return c.a})),n.d(e,"ReplaySubject",(function(){return a.a})),n.d(e,"AsyncSubject",(function(){return f.a})),n.d(e,"asapScheduler",(function(){return l.a})),n.d(e,"asyncScheduler",(function(){return h.a})),n.d(e,"queueScheduler",(function(){return p.a})),n.d(e,"animationFrameScheduler",(function(){return m})),n.d(e,"VirtualTimeScheduler",(function(){return w})),n.d(e,"VirtualAction",(function(){return _})),n.d(e,"Scheduler",(function(){return g.a})),n.d(e,"Subscription",(function(){return x.a})),n.d(e,"Subscriber",(function(){return S.a})),n.d(e,"Notification",(function(){return O.a})),n.d(e,"NotificationKind",(function(){return O.b})),n.d(e,"pipe",(function(){return j.a})),n.d(e,"noop",(function(){return I.a})),n.d(e,"identity",(function(){return T.a})),n.d(e,"isObservable",(function(){return E})),n.d(e,"ArgumentOutOfRangeError",(function(){return C.a})),n.d(e,"EmptyError",(function(){return N.a})),n.d(e,"ObjectUnsubscribedError",(function(){return P.a})),n.d(e,"UnsubscriptionError",(function(){return A.a})),n.d(e,"TimeoutError",(function(){return k.a})),n.d(e,"bindCallback",(function(){return W})),n.d(e,"bindNodeCallback",(function(){return B})),n.d(e,"combineLatest",(function(){return H.b})),n.d(e,"concat",(function(){return q.a})),n.d(e,"defer",(function(){return $.a})),n.d(e,"empty",(function(){return K.b})),n.d(e,"forkJoin",(function(){return X})),n.d(e,"from",(function(){return J.a})),n.d(e,"fromEvent",(function(){return tt})),n.d(e,"fromEventPattern",(function(){return et})),n.d(e,"generate",(function(){return nt})),n.d(e,"iif",(function(){return it})),n.d(e,"interval",(function(){return ut})),n.d(e,"merge",(function(){return ct.a})),n.d(e,"never",(function(){return ft})),n.d(e,"of",(function(){return lt.a})),n.d(e,"onErrorResumeNext",(function(){return ht})),n.d(e,"pairs",(function(){return pt})),n.d(e,"partition",(function(){return mt})),n.d(e,"race",(function(){return wt.a})),n.d(e,"range",(function(){return _t})),n.d(e,"throwError",(function(){return xt.a})),n.d(e,"timer",(function(){return St.a})),n.d(e,"using",(function(){return Ot})),n.d(e,"zip",(function(){return jt.b})),n.d(e,"scheduled",(function(){return It.a})),n.d(e,"EMPTY",(function(){return K.a})),n.d(e,"NEVER",(function(){return at})),n.d(e,"config",(function(){return Tt.a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},function(t,e,n){"use strict";n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return h}));var r=n(0),i=n(1),o=n(5),u=n(2),s=n(6);function c(t,e,n,r){return function(i){return i.lift(new a(t,e,n,r))}}var a=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),f=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.keySelector=n,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new s.a,n.set(e,i);var o=new h(e,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(e,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,n){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.a),l=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.a(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.a),h=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.a(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new p(n)),e.add(r.subscribe(t)),e},e}(u.a),p=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.a(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(112),u=n(34),s=n(72),c=function(t){function e(){var e=t.call(this)||this;return e.store=s.store,e.onInit&&setTimeout((function(){return e.onInit()}),1),e}return i(e,t),Object.defineProperty(e.prototype,"state",{get:function(){return this.store.currentState},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cursorPosition",{get:function(){return this.state.input.cursorPosition},enumerable:!0,configurable:!0}),e.prototype.printState=function(t,e,n,r,i){void 0===i&&(i="yellow");var o=this.store.currentState,s=JSON.stringify(r?r(o):o);this.fillText({x:t,y:e,text:s,size:n,name:u.config.fontName,color:i})},e.prototype.setFontSize=function(e,n){void 0===n&&(n=u.config.fontName),t.prototype.setFontSize.call(this,e,n)},e.prototype.drawCursor=function(t,e){void 0===t&&(t=this.cursorPosition?this.cursorPosition[0]:0),void 0===e&&(e=this.cursorPosition?this.cursorPosition[1]:0),this.loadFrame();var n=new Image;n.src=o.default,this.ctx.drawImage(n,t-4,e-2)},e.prototype.cursorInArea=function(t,e,n,r){var i,o;if(!(null===(o=null===(i=this.state)||void 0===i?void 0:i.input)||void 0===o?void 0:o.cursorPosition))return!1;var u=this.state.input.cursorPosition,s=u[0],c=u[1];return s>=t&&s<=n&&c>=e&&c<=r},e.prototype.keyIsPressed=function(t){var e,n,r;return null===(r=null===(n=null===(e=this.state)||void 0===e?void 0:e.input)||void 0===n?void 0:n.keysDown)||void 0===r?void 0:r.includes(t)},e}(n(81).CanvasAPI);e.Renderable=c},function(t,e,n){"use strict";n.d(e,"a",(function(){return a})),n.d(e,"b",(function(){return f}));var r=n(0),i=n(6),o=n(2),u=n(1),s=n(5),c=n(40),a=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.a(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new s.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=s.a.EMPTY)),t},e.prototype.refCount=function(){return Object(c.a)()(this)},e}(o.a),f=function(){var t=a.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.b);u.a},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),i=n(6),o=n(22),u=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r.a(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",(function(){return u})),n.d(e,"a",(function(){return c}));var r=n(0),i=n(1),o=n(18);function u(t,e){return void 0===e&&(e=0),function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.a(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(i.a),a=function(){return function(t,e){this.notification=t,this.destination=e}}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(44);function i(){return Object(r.a)(1)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(2),i=n(10),o=n(44),u=n(27);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,s=null,c=t[t.length-1];return Object(i.a)(c)?(s=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof c&&(n=t.pop()),null===s&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(n)(Object(u.a)(t,s))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(0),i=n(7),o=n(27),u=n(4),s=n(3);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new a)}var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new f(t))},t}(),f=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.a(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Object(s.a)(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(e)},e}(u.a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(2),i=n(8),o=n(31),u=n(10);function s(t,e,n){void 0===t&&(t=0);var s=-1;return Object(o.a)(e)?s=Number(e)<1?1:Number(e):Object(u.a)(e)&&(n=e),Object(u.a)(n)||(n=i.a),new r.a((function(e){var r=Object(o.a)(t)?t:+t-n.now();return n.schedule(c,r,{index:0,period:s,subscriber:e})}))}function c(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},function(t,e,n){"use strict";var r=n(2),i=n(5),o=n(21);var u=n(49),s=n(20);var c=n(70),a=n(69);function f(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,e){return new r.a((function(n){var r=new i.a;return r.add(e.schedule((function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Object(c.a)(t))return function(t,e){return new r.a((function(n){var r=new i.a;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Object(a.a)(t))return Object(u.a)(t,e);if(function(t){return t&&"function"==typeof t[s.a]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new r.a((function(n){var r,o=new i.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(e.schedule((function(){r=t[s.a](),o.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}n.d(e,"a",(function(){return f}))},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n(30).a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e}(n(28).a);n.d(e,"a",(function(){return u}));var u=new o(i)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return r.a(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(5).a)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,e,n){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(103);e.store=new r.Store(i.stateSubject,i.actionsObserver,i.reducerManager)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.worldInit=r.createAction("[Dungeon] World Init"),e.addRoom=r.createAction("[Dungeon] Add Room",r.props()),e.enterRoom=r.createAction("[Dungeon] Enter Room",r.props()),e.setActiveRoom=r.createAction("[Dungeon] Set Active Room",r.props())},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var n=t.call(this)||this;return n.setActiveScene=e,n}return i(e,t),e}(n(56).Renderable);e.Scene=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return t.call(this,{type:"init"})||this}return i(e,t),e.prototype.next=function(e){if("function"==typeof e)throw new TypeError("\n\t\t\t\tDispatch expected an object, instead it received a function.\n\t\t\t\tIf you're using the createAction function, make sure to invoke the function\n\t\t\t\tbefore dispatching the action. For example, someAction should be someAction().");if(void 0===e)throw new TypeError("Actions must be objects");if(void 0===e.type)throw new TypeError("Actions must have a type property");t.prototype.next.call(this,e)},e}(n(53).BehaviorSubject);e.ActionsSubject=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(52);e.ofType=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r.filter((function(e){return t.some((function(t){return"string"==typeof t?t===e.type:t.type===e.type}))}))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(52),o=n(34),u=n(76),s=n(72),c=n(79),a=n(78),f=function(){function t(){}return t.onInit=function(){s.store.addReducer(this.storeNodeName,a.userInputReducer),document.addEventListener("mousemove",(function(t){var e=(new Date).valueOf();(!r||e-r>o.config.cursorPollRate)&&(s.store.dispatch(c.mouseMove({event:t})),r=e)})),document.addEventListener("mousedown",(function(t){return s.store.dispatch(c.mouseDown({event:t}))})),document.addEventListener("mouseup",(function(t){return s.store.dispatch(c.mouseUp({event:t}))})),document.addEventListener("mouseover",(function(t){return s.store.dispatch(c.mouseOver({event:t}))})),document.addEventListener("mouseout",(function(t){return s.store.dispatch(c.mouseOut({event:t}))})),document.addEventListener("keydown",(function(t){return s.store.dispatch(c.keyDown({event:t}))})),document.addEventListener("keyup",(function(t){return s.store.dispatch(c.keyUp({event:t}))})),document.addEventListener("keypress",(function(t){return s.store.dispatch(c.keyPress({event:t}))}))},t.keyboardEvents$=function(){return s.store.actions$.pipe(u.ofType(c.keyDown,c.keyUp,c.keyPress))},t.mouseEvents$=function(){return s.store.actions$.pipe(u.ofType(c.mouseMove,c.mouseDown,c.mouseUp,c.mouseOver,c.mouseOut))},t.cursorPosition$=function(){return this.mouseEvents$().pipe(u.ofType(c.mouseMove),i.map((function(t){return t.event})),i.map((function(t){return[t.clientX,t.clientY]})))},t.storeNodeName="input",t}();e.InputHandler=f},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0});var o=n(34),u=n(16),s=n(79),c=o.config.keyBindings,a=function(t){return Object.keys(c).find((function(e){return c[e].includes(t.key)}))};e.createInitialState=function(){return{keysDown:[],mouseDown:!1,cursorPosition:null}},e.userInputReducer=u.createReducer(e.createInitialState(),u.on(s.mouseMove,(function(t,e){var n=e.event;return r(r({},t),{cursorPosition:[n.clientX,n.clientY]})})),u.on(s.mouseDown,(function(t){return r(r({},t),{mouseDown:!0})})),u.on(s.mouseUp,(function(t){return r(r({},t),{mouseDown:!1})})),u.on(s.keyDown,(function(t,e){var n=e.event,o=a(n);return o&&!t.keysDown.includes(o)?r(r({},t),{keysDown:i(t.keysDown,[o])}):t})),u.on(s.keyUp,(function(t,e){var n=e.event,i=a(n);return i&&t.keysDown.includes(i)?r(r({},t),{keysDown:t.keysDown.filter((function(t){return t!==i}))}):t})))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.mouseMove=r.createAction("[User Input] mousemove",r.props()),e.mouseDown=r.createAction("[User Input] mousedown",r.props()),e.mouseUp=r.createAction("[User Input] mouseup",r.props()),e.mouseOver=r.createAction("[User Input] mouseover",r.props()),e.mouseOut=r.createAction("[User Input] mouseout",r.props()),e.keyDown=r.createAction("[User Input] keydown",r.props()),e.keyUp=r.createAction("[User Input] keyup",r.props()),e.keyPress=r.createAction("[User Input] keypress",r.props())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.updateDimensions=r.createAction("[Main-Menu] Update Render Dimensions",r.props())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=new Image,i=function(){function t(){}return Object.defineProperty(t.prototype,"ctx",{get:function(){return t.ctx},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"canvas",{get:function(){return t.canvas},enumerable:!0,configurable:!0}),t.prototype.getClientBoundingRect=function(){return this.canvas.getBoundingClientRect()},t.prototype.getFontName=function(){return this.ctx.font.split(" ").pop()},t.prototype.clear=function(){var t=this.getClientBoundingRect(),e=t.width,n=t.height;this.fillRect({x:0,y:0,width:e,height:n,color:"black"})},t.prototype.saveFrame=function(){r.src=this.ctx.canvas.toDataURL()},t.prototype.loadFrame=function(){r.src&&this.ctx.drawImage(r,0,0)},t.prototype.setFontSize=function(t,e){var n=document.body.getBoundingClientRect(),r=n.width,i=n.height,o=Math.floor(t/((r+i)/4)*100);this.ctx.font=o+'px "'+e+'"'},t.prototype.doWithFont=function(t){var e=this,n=t.fn,r=t.align,i=t.baseline,o=t.color,u=t.alpha,s=t.size,c=t.name,a=this.ctx,f=a.font,l=a.textAlign,h=a.textBaseline;this.setFontSize(s,c),this.ctx.textAlign=r||l,this.ctx.textBaseline=i||h;var p=this.doWithColor({fn:function(){return n(e.ctx)},color:o,alpha:u});return this.ctx.font=f,this.ctx.textAlign=l,this.ctx.textBaseline=h,p},t.prototype.doWithColor=function(t){var e=t.fn,n=t.color,r=t.alpha,i=this.ctx,o=i.globalAlpha,u=i.fillStyle;this.ctx.fillStyle=n||u,this.ctx.globalAlpha=r||1;var s=e(this.ctx);return this.ctx.fillStyle=u,this.ctx.globalAlpha=o,s},t.prototype.fillRect=function(t){var e=this,n=t.x,r=t.y,i=t.width,o=t.height,u=t.color,s=t.alpha;this.doWithColor({fn:function(){return e.ctx.fillRect(n,r,i,o)},color:u,alpha:s})},t.prototype.fillText=function(t){var e=this,n=t.text,r=t.x,i=t.y,o=t.color,u=t.alpha,s=t.size,c=t.align,a=t.baseline,f=t.name;this.doWithFont({fn:function(){return e.ctx.fillText(n,r,i)},color:o,alpha:u,size:s,align:c,baseline:a,name:f})},t.canvas=document.createElement("canvas"),t.ctx=t.canvas.getContext("2d"),t}();e.CanvasAPI=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(115);e.selectDungeonState=r.createSelector(i.selectScenes,(function(t){return t.dungeon})),e.selectRooms=r.createSelector(e.selectDungeonState,(function(t){return t.rooms})),e.selectActiveRoom=r.createSelector(e.selectDungeonState,(function(t){var e=t.activeRoom;return console.log("active room:",e),e}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(84);var r=n(90),i=n(34),o=n(91);new r(i.config.fontName).load().then((function(){return new o.Game(document.body)}))},function(t,e,n){var r=n(85),i=n(86);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1},u=(r(i,o),i.locals?i.locals:{});t.exports=u},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),u=[];function s(t){for(var e=-1,n=0;n<u.length;n++)if(u[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],c=e.base?o[0]+e.base:o[0],a=n[c]||0,f="".concat(c," ").concat(a);n[c]=a+1;var l=s(f),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(u[l].references++,u[l].updater(h)):u.push({identifier:f,updater:v(h,e),references:1}),r.push(f)}return r}function a(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var u=o(t.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function h(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),u=t.childNodes;u[e]&&t.removeChild(u[e]),u.length?t.insertBefore(o,u[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,b=0;function v(t,e){var n,r,i;if(e.singleton){var o=b++;n=d||(d=a(e)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=a(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);u[i].references--}for(var o=c(t,e),a=0;a<n.length;a++){var f=s(n[a]);0===u[f].references&&(u[f].updater(),u.splice(f,1))}n=o}}}},function(t,e,n){var r=n(87),i=n(88),o=n(89);e=r(!1);var u=i(o);e.push([t.i,"@font-face{font-family:'Press Start 2P';src:url("+u+") format(\"truetype\");font-weight:500;font-style:normal}html,body,canvas{font-family:'Press Start 2P';display:block;margin:0;padding:0;width:100vw;height:100vh;cursor:none}\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(u=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([i]).join("\n")}var u,s,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default=n.p+"2c404fd06cd67770807d242b2d2e5a16.ttf"},function(t,e,n){!function(){function e(t,e){document.addEventListener?t.addEventListener("scroll",e,!1):t.attachEvent("scroll",e)}function n(t){this.a=document.createElement("div"),this.a.setAttribute("aria-hidden","true"),this.a.appendChild(document.createTextNode(t)),this.b=document.createElement("span"),this.c=document.createElement("span"),this.h=document.createElement("span"),this.f=document.createElement("span"),this.g=-1,this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;",this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;",this.b.appendChild(this.h),this.c.appendChild(this.f),this.a.appendChild(this.b),this.a.appendChild(this.c)}function r(t,e){t.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+e+";"}function i(t){var e=t.a.offsetWidth,n=e+100;return t.f.style.width=n+"px",t.c.scrollLeft=n,t.b.scrollLeft=t.b.scrollWidth+100,t.g!==e&&(t.g=e,!0)}function o(t,n){function r(){var t=o;i(t)&&t.a.parentNode&&n(t.g)}var o=t;e(t.b,r),e(t.c,r),i(t)}function u(t,e){var n=e||{};this.family=t,this.style=n.style||"normal",this.weight=n.weight||"normal",this.stretch=n.stretch||"normal"}var s=null,c=null,a=null,f=null;function l(){return null===f&&(f=!!document.fonts),f}function h(){if(null===a){var t=document.createElement("div");try{t.style.font="condensed 100px sans-serif"}catch(t){}a=""!==t.style.font}return a}function p(t,e){return[t.style,t.weight,h()?t.stretch:"","100px",e].join(" ")}u.prototype.load=function(t,e){var i=this,u=t||"BESbswy",a=0,f=e||3e3,h=(new Date).getTime();return new Promise((function(t,e){if(l()&&!function(){if(null===c)if(l()&&/Apple/.test(window.navigator.vendor)){var t=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);c=!!t&&603>parseInt(t[1],10)}else c=!1;return c}()){var d=new Promise((function(t,e){!function n(){(new Date).getTime()-h>=f?e(Error(f+"ms timeout exceeded")):document.fonts.load(p(i,'"'+i.family+'"'),u).then((function(e){1<=e.length?t():setTimeout(n,25)}),e)}()})),b=new Promise((function(t,e){a=setTimeout((function(){e(Error(f+"ms timeout exceeded"))}),f)}));Promise.race([b,d]).then((function(){clearTimeout(a),t(i)}),e)}else!function(t){document.body?t():document.addEventListener?document.addEventListener("DOMContentLoaded",(function e(){document.removeEventListener("DOMContentLoaded",e),t()})):document.attachEvent("onreadystatechange",(function e(){"interactive"!=document.readyState&&"complete"!=document.readyState||(document.detachEvent("onreadystatechange",e),t())}))}((function(){function c(){var e;(e=-1!=v&&-1!=y||-1!=v&&-1!=m||-1!=y&&-1!=m)&&((e=v!=y&&v!=m&&y!=m)||(null===s&&(e=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),s=!!e&&(536>parseInt(e[1],10)||536===parseInt(e[1],10)&&11>=parseInt(e[2],10))),e=s&&(v==w&&y==w&&m==w||v==_&&y==_&&m==_||v==g&&y==g&&m==g)),e=!e),e&&(x.parentNode&&x.parentNode.removeChild(x),clearTimeout(a),t(i))}var l=new n(u),d=new n(u),b=new n(u),v=-1,y=-1,m=-1,w=-1,_=-1,g=-1,x=document.createElement("div");x.dir="ltr",r(l,p(i,"sans-serif")),r(d,p(i,"serif")),r(b,p(i,"monospace")),x.appendChild(l.a),x.appendChild(d.a),x.appendChild(b.a),document.body.appendChild(x),w=l.a.offsetWidth,_=d.a.offsetWidth,g=b.a.offsetWidth,function t(){if((new Date).getTime()-h>=f)x.parentNode&&x.parentNode.removeChild(x),e(Error(f+"ms timeout exceeded"));else{var n=document.hidden;!0!==n&&void 0!==n||(v=l.a.offsetWidth,y=d.a.offsetWidth,m=b.a.offsetWidth,c()),a=setTimeout(t,50)}}(),o(l,(function(t){v=t,c()})),r(l,p(i,'"'+i.family+'",sans-serif')),o(d,(function(t){y=t,c()})),r(d,p(i,'"'+i.family+'",serif')),o(b,(function(t){m=t,c()})),r(b,p(i,'"'+i.family+'",monospace'))}))}))},t.exports=u}()},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(92),u=n(77),s=n(72),c=function(t){function e(e){var n=t.call(this)||this;return e.innerHTML="",e.appendChild(n.canvas),s.store.subscribe((function(){return n.render()})),u.InputHandler.onInit(),n.setActiveScene(new o.MainMenu((function(t){return n.setActiveScene(t)}))),n.onClientRectUpdate(),n}return i(e,t),e.prototype.setActiveScene=function(t){this._activeScene=t},e.prototype.onClientRectUpdate=function(){var t=this;this._resizeListener||(this._resizeListener=window.addEventListener("resize",(function(){return t.onClientRectUpdate()})));var e=this.canvas.getBoundingClientRect();this.canvas.setAttribute("width",String(e.width)),this.canvas.setAttribute("height",String(e.height)),this.clear(),this.render()},e.prototype.setScene=function(t){this._activeScene=t},e.prototype.render=function(){this._activeScene&&(this._activeScene.clear(),this._activeScene.render(),this._activeScene.drawCursor())},e}(n(81).CanvasAPI);e.Game=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(93))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o,u=n(34),s=n(94),c=n(95),a=n(108),f=n(80),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.defaultFontSize=u.config.fontScale,e.titleFontSize=3*e.defaultFontSize,e.hasActivatedSinceMouseDown=!1,e}return i(e,t),e.prototype.onInit=function(){var t=this;this.items=[{text:"New Game",onSelect:function(){t.setActiveScene(new a.Dungeon((function(e){return t.setActiveScene(e)})))},hitbox:void 0},{text:"Continue Game",onSelect:function(){},hitbox:void 0,disabled:!0},{text:"Import Save",onSelect:function(){},hitbox:void 0},{text:"Export Save",onSelect:function(){},hitbox:void 0},{text:"About",onSelect:function(){},hitbox:void 0}];var e=this.canvas.getBoundingClientRect(),n=e.width,r=e.height,i=this.getTitleDimensions(),o=i.width,u=i.height,s=u/2,c=o+2*s,l=u+(u+s)*(this.items.length+1),h=(n-c)/2,p=(r-l)/2;this.store.dispatch(f.updateDimensions({dimensions:{body:{width:c,height:l,margin:s,position:[h,p]},title:{height:u,width:o,position:[n/2,p+2*u]}}}))},e.prototype.onChanges=function(){if(this.items&&this.state){var t=c.selectKeysDown(this.state);if(t&&t.length){if(this.keyIsPressed("up")?this.activeItem=void 0!==this.activeItem?this.activeItem-1:0:this.keyIsPressed("down")&&(this.activeItem=void 0!==this.activeItem?this.activeItem+1:0),s.Nullish.isNotNullish(this.activeItem)){this.activeItem<0&&(this.activeItem=0),this.activeItem>this.items.length-1&&(this.activeItem=this.items.length-1);var e=this.items[this.activeItem];!e.disabled&&this.keyIsPressed("select")&&(o||(o=!0,e.onSelect()))}}else o=!1}},e.prototype.render=function(){var t=this.state.scenes["main-menu"].dimensions,e=t.body,n=e.height,r=e.width,i=e.position,o=e.margin,u=i[0],s=i[1],c=t.title.position,a=c[0],f=c[1],l=t.title.height;this.drawBackground(u,s,r,n),this.drawTitle(a,f),this.drawItems(u,s+2.5*l,r,l,l+o,o)},e.prototype.getTitleDimensions=function(){var t=this.ctx.font;this.setFontSize(this.titleFontSize);var e=this.ctx.measureText(u.config.title).width,n=(this.ctx.font.match(/\d+/)||[0])[0];return this.ctx.font=t,{height:Number(n),width:e}},e.prototype.drawBackground=function(t,e,n,r){var i=u.config.menuColor;this.fillRect({x:t,y:e,width:n,height:r,color:i}),this.cursorInArea(t,e,t+n,e+r)&&(this.activeItem=void 0)},e.prototype.drawTitle=function(t,e){this.fillText({x:t,y:e,text:u.config.title,size:this.titleFontSize,color:u.config.menuTextColor,align:"center",baseline:"bottom",name:u.config.fontName})},e.prototype.drawItems=function(t,e,n,r,i,o){var u,s=this;null===(u=this.items)||void 0===u||u.forEach((function(u,c){var a=c*i;s.drawMenuItem(u.text,t,e+a,n,r,c,o)}))},e.prototype.drawMenuItem=function(t,e,n,r,i,o,s){var c=this;if(void 0===s&&(s=0),this.items){var a=[e+s,n,e+r-s,n+i],f=this.items[o];f.hitbox&&JSON.stringify(f.hitbox)!==JSON.stringify(a)||(this.items[o].hitbox=a);var l=this.items[o].disabled;!l&&c.cursorInArea.apply(c,a)&&(this.activeItem=o,this.state.input.mouseDown&&(this.hasActivatedSinceMouseDown||(this.hasActivatedSinceMouseDown=!0,this.items[o].onSelect())));var h=this.activeItem===o,p=h?u.config.menuTextHoverColor:u.config.menuTextColor;this.drawMenuItemBackground(e,n,r,i,s,l?u.config.menuItemDisabledColor:u.config.menuItemColor),!l&&h&&this.drawMenuItemBackground(e,n,r,i,s,u.config.selectedItemColor,.4),this.drawMenuItemText(e,n,r,i,s,l?u.config.menuTextDisabledColor:p,t)}},e.prototype.drawMenuItemBackground=function(t,e,n,r,i,o,u){void 0===u&&(u=1),this.fillRect({x:t+i,y:e,width:n-2*i,height:r,color:o,alpha:u})},e.prototype.drawMenuItemText=function(t,e,n,r,i,o,s){this.fillText({color:o,text:s,x:t+(n+i)/2,y:e+r/2,size:this.defaultFontSize,baseline:"middle",align:"center",name:u.config.fontName})},e}(n(74).Scene);e.MainMenu=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.isDefined=function(t){return void 0!==t},t.isNotNull=function(t){return null!==t},t.isNotNullish=function(e){return t.isDefined(e)&&t.isNotNull(e)},t}();e.Nullish=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(77);e.selectUserInputState=r.createFeatureSelector(i.InputHandler.storeNodeName),e.selectCursorPosition=r.createSelector(e.selectUserInputState,(function(t){return t.cursorPosition})),e.selectKeysDown=r.createSelector(e.selectUserInputState,(function(t){return t.keysDown}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arraysAreNotAllowedMsg="arrays are not allowed in action creators",e.typePropertyIsNotAllowedMsg="type property is not allowed in action creators"},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function i(t,e){return Object.defineProperty(e,"type",{value:t,writable:!1})}Object.defineProperty(e,"__esModule",{value:!0}),e.createAction=function(t,e){if("function"==typeof e)return i(t,(function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return r(r({},e.apply(void 0,n)),{type:t})}));switch(e?e._as:"empty"){case"empty":return i(t,(function(){return{type:t}}));case"props":return i(t,(function(e){return r(r({},e),{type:t})}));default:throw new Error("Unexpected config.")}},e.props=function(){return{_as:"props",_p:void 0}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(53),u=n(52),s=function(t){function e(e,n,r){var i=t.call(this)||this;return i.stateSubject=e,i.actionsObserver=n,i.reducerManager=r,i.actions$=i.actionsObserver.asObservable(),i.source=e.asObservable(),i.actionsObserver.asObservable().pipe(u.withLatestFrom(i.stateSubject.asObservable(),i.reducerManager.asObservable(),(function(t,e,n){return n(e,t)})),u.distinctUntilChanged()).subscribe((function(t){return i.stateSubject.next(t)})),i}return i(e,t),Object.defineProperty(e.prototype,"currentState",{get:function(){return this.stateSubject.getValue()},enumerable:!0,configurable:!0}),e.prototype.selectSync=function(t){return t(this.currentState)},e.prototype.selectByPath=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this.pipe(u.pluck.apply(void 0,t),u.distinctUntilChanged())},e.prototype.selectByFunction=function(t){return this.pipe(u.map((function(e){return t(e)})))},e.prototype.lift=function(t){var n=new e(this.stateSubject,this.actionsObserver,this.reducerManager);return n.operator=t,n},e.prototype.dispatch=function(t){this.actionsObserver.next(t)},e.prototype.next=function(t){this.actionsObserver.next(t)},e.prototype.error=function(t){this.actionsObserver.error(t)},e.prototype.complete=function(){this.actionsObserver.complete()},e.prototype.addReducer=function(t,e){this.reducerManager.addReducer(t,e)},e.prototype.addReducerMap=function(t){this.reducerManager.addFeature(t)},e}(o.Observable);e.Store=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var u=n(53),s=n(75),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(u.Observable);e.ReducerObservable=c;var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(s.ActionsSubject);function f(){return function(t,e){void 0===e&&(e={});var n=Object.keys(t);return function(r,i){var u=o(o({},e),r);return n.reduce((function(e,n){var r;return o(o({},e),((r={})[n]=t[n](e[n],i),r))}),u)}}}e.ReducerManagerDispatcher=a,e.makeDefaultReducerFactory=f;var l=function(t){function e(e,n,r){void 0===r&&(r=f());var i=t.call(this,r(e,n))||this;return i.reducers=e,i.initialState=n,i.reducerFactory=r,i}return i(e,t),e.prototype.addFeature=function(t){this.addFeatures([t])},e.prototype.addFeatures=function(t){var e=this,n=t.reduce((function(t,n){var r=n.reducers,i=n.initialState,o=n.key,u=e.reducerFactory(r,i);return t[o]=u,t}),{});this.addReducers(n)},e.prototype.addReducer=function(t,e){var n;this.addReducers(((n={})[t]=e,n))},e.prototype.addReducers=function(t){this.updateReducers(t)},e.prototype.updateReducers=function(t){this.reducers=o(o({},this.reducers),t),this.next(this.reducerFactory(this.reducers,this.initialState))},e}(u.BehaviorSubject);e.ReducerManager=l},function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};function i(t,e){return t===e}function o(t,e,n){for(var r=0;r<t.length;r++)if(!n(t[r],e[r]))return!0;return!1}function u(t,e,n){void 0===e&&(e=i),void 0===n&&(n=i);var r,u=null,s=null;return{memoized:function(){if(void 0!==r)return r.result;if(!u)return s=t.apply(null,arguments),u=arguments,s;if(!o(arguments,u,e))return s;var i=t.apply(null,arguments);return u=arguments,n(s,i)?s:(s=i,i)},reset:function(){u=null,s=null},setResult:function(t){void 0===t&&(t=void 0),r={result:t}},clearResult:function(){r=void 0}}}function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a(u).apply(void 0,t)}function c(t,e,n,i){if(void 0===n){var o=e.map((function(e){return e(t)}));return i.memoized.apply(null,o)}var u=e.map((function(e){return e(t,n)}));return i.memoized.apply(null,r(u,[n]))}function a(t,e){return void 0===e&&(e={stateFn:c}),function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o=n;if(Array.isArray(o[0])){var s=o[0],c=o.slice(1);o=r(s,c)}var a=o.slice(0,o.length-1),f=o[o.length-1],l=a.filter((function(t){return t.release&&"function"==typeof t.release})),h=t((function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return f.apply(null,t)})),p=u((function(t,n){return e.stateFn.apply(null,[t,a,n,h])}));function d(){p.reset(),h.reset(),l.forEach((function(t){return t.release()}))}return Object.assign(p.memoized,{release:d,projector:h.memoized,setResult:p.setResult,clearResult:p.clearResult})}}Object.defineProperty(e,"__esModule",{value:!0}),e.isEqualCheck=i,e.resultMemoize=function(t,e){return u(t,i,e)},e.defaultMemoize=u,e.createSelector=s,e.defaultStateFn=c,e.createSelectorFactory=a,e.createFeatureSelector=function(t){return s((function(e){var n=e[t];return t in e||console.warn('store: The feature name "'+t+"\" does not exist in the state, therefore createFeatureSelector cannot access it.  Be sure it is imported in a loaded module using StoreModule.forRoot('"+t+"', ...) or StoreModule.forFeature('"+t+"', ...).  If the default state is intended to be undefined, as is the case with router state, this development-only warning message can be ignored."),n}),(function(t){return t}))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(n(53).BehaviorSubject);e.StateSubject=o},function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.on=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.pop(),i=t.reduce((function(t,e){return r(t,[e.type])}),[]);return{reducer:n,types:i}},e.createReducer=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=new Map,i=function(t){for(var e=function(e){if(r.has(e)){var n=r.get(e);r.set(e,(function(e,r){return t.reducer(n(e,r),r)}))}else r.set(e,t.reducer)},n=0,i=t.types;n<i.length;n++){e(i[n])}},o=0,u=e;o<u.length;o++){var s=u[o];i(s)}return function(e,n){void 0===e&&(e=t);var i=r.get(n.type);return i?i(e,n):e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(53),i=n(16),o=n(78),u=n(104),s={input:o.createInitialState(),scenes:u.createInitialState()},c={input:o.userInputReducer,scenes:u.reducer};e.stateSubject=new r.BehaviorSubject(s),e.actionsObserver=new i.ActionsSubject,e.reducerManager=new i.ReducerManager(c,s)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n(105),o=n(106),u={"main-menu":i.mainMenuReducer,dungeon:o.dungeonReducer};e.createInitialState=function(){return{"main-menu":i.createInitialState(),dungeon:o.createInitialState()}},e.reducer=r.makeDefaultReducerFactory()(u,e.createInitialState())},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),o=n(80);e.createInitialState=function(){return{dimensions:{body:{height:0,width:0,margin:0,position:[0,0]},title:{height:0,width:0,position:[0,0]}}}},e.mainMenuReducer=i.createReducer(e.createInitialState(),i.on(o.updateDimensions,(function(t,e){var n=e.dimensions;return r(r({},t),{dimensions:n})})))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),o=n(73),u=n(107),s=new u.EntityStateAdapter;e.createInitialState=function(){return{rooms:new u.EntityState,activeRoom:null}},e.dungeonReducer=i.createReducer(e.createInitialState(),i.on(o.addRoom,(function(t,e){var n=e.room;return r(r({},t),{rooms:s.upsertOne(n,t.rooms)})})),i.on(o.setActiveRoom,(function(t,e){var n=e.roomID;return r(r({},t),{activeRoom:t.rooms.entities[n]||null})})))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){void 0===t&&(t={}),this.entities=t}return Object.defineProperty(t.prototype,"ids",{get:function(){return this._ids||(this._ids=Reflect.ownKeys(this.entities)),this._ids},enumerable:!0,configurable:!0}),t}();e.EntityState=i;var o=function(){function t(){}return t.prototype.append=function(t,e){var n;return r(r({},e),((n={})[t.id]=t,n))},t.prototype.upsertOne=function(t,e){var n=this.append(t,e.entities);return new i(n)},t}();e.EntityStateAdapter=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(109))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(110),u=n(74),s=n(116),c=n(82),a=n(73),f=n(16),l=n(52),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.world=new o.World((function(t){return e.setActiveScene(t)})),e.player=new s.Player,e.onSetActiveRoom$=e.store.actions$.pipe(f.ofType(a.setActiveRoom),l.map((function(t){var n=t.roomID;return e.store.selectSync(c.selectRooms).entities[n]}))),e}return i(e,t),e.prototype.onInit=function(){var t=this;this.onSetActiveRoom$.subscribe((function(e){e&&(t.previousActiveRoom&&t.previousActiveRoom.removeActor(t.player),e.addActor(t.player),t.previousActiveRoom=e)}))},e.prototype.render=function(){this.world.render()},e}(u.Scene);e.Dungeon=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(52),u=n(16),s=n(111),c=n(74),a=n(82),f=n(73),l=function(t){function e(){var n=null!==t&&t.apply(this,arguments)||this;return n.onEnterRoom$=n.store.actions$.pipe(u.ofType(f.enterRoom),o.tap((function(t){var e=t.x,r=t.y;return n.generateRoom(e,r)})),o.map((function(t){var r=t.x,i=t.y,u=e.coordinatesToID(r,i);n.store.selectByFunction(a.selectRooms).pipe(o.first((function(t){return!!t.entities[u]})),o.take(1)).subscribe((function(){n.store.dispatch(f.setActiveRoom({roomID:u}))}))}))),n}return i(e,t),e.coordinatesToID=function(t,e){return t+":"+e},e.coordinatesFromID=function(t){return t.split(":").map((function(t){return Number(t)})).slice(0,2)},Object.defineProperty(e.prototype,"rooms",{get:function(){return a.selectRooms(this.state)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentRoom",{get:function(){return a.selectActiveRoom(this.state)},enumerable:!0,configurable:!0}),e.prototype.onInit=function(){this.onEnterRoom$.subscribe((function(){return console.log("Entered A Room")})),this.store.dispatch(f.enterRoom({x:0,y:0}))},e.prototype.render=function(){this.currentRoom&&this.currentRoom.render()},e.prototype.generateRoom=function(t,n){this.store.dispatch(f.addRoom({room:new s.Room(e.coordinatesToID(t,n)),coordinates:[t,n]}))},e}(c.Scene);e.World=l},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,s=o.length;u<s;u++,i++)r[i]=o[u];return r};Object.defineProperty(e,"__esModule",{value:!0});var u=n(34),s=n(56),c=n(113),a=function(t){function e(e,n){void 0===n&&(n=[!1,!1,!1,!1]);var r=t.call(this)||this;return r.id=e,r.requiredDoors=n,r.actors=[],r}return i(e,t),Object.defineProperty(e.prototype,"tileList",{get:function(){var t;return(null===(t=this.tiles)||void 0===t?void 0:t.reduce((function(t,e){return o(t,e)}),[]))||[]},enumerable:!0,configurable:!0}),e.prototype.onInit=function(){this.generate()},e.prototype.render=function(){this.tileList.forEach((function(t){t.render()})),this.actors.forEach((function(t){t.render()}))},e.prototype.addActor=function(t){this.actors.includes(t)||this.actors.push(t)},e.prototype.removeActor=function(t){this.actors=this.actors.filter((function(e){return e!==t}))},e.prototype.generate=function(){this.requiredDoors,this.tiles=[[]];for(var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height,r=Math.min(Math.floor(e/u.config.roomSize[0]),Math.floor(n/u.config.roomSize[1])),i=[e/2,n/2],o=i[1],s=i[0]-u.config.roomSize[0]*r/2,a=o-u.config.roomSize[1]*r/2,f=u.config.roomSize,l=f[0],h=f[1],p=0;p<l;p++){this.tiles[p]=[];for(var d=0;d<h;d++){var b=d%(h-1)==0,v=0===d,y=d===h-1,m=p%(l-1)==0,w=0===p,_=p===l-1,g=c.Tile.type.Floor;w&&(g=c.Tile.type.W_Wall),_&&(g=c.Tile.type.E_Wall),b&&(v&&(m||(g=c.Tile.type.Wall_4)),y&&(m?w?g=c.Tile.type.SW_Corner:_&&(g=c.Tile.type.SE_Corner):g=c.Tile.type.Wall_1)),this.tiles[p][d]=new c.Tile([Math.floor(s+p*r),Math.floor(a+d*r)],g)}}},e}(s.Renderable);e.Room=a},function(t,e,n){"use strict";n.r(e),e.default=n.p+"76a0d81952d0c2fe44203690b89bae7c.png"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(114),u=n(34),s=function(t){function e(e,n){var r=t.call(this)||this;return r.location=e,r.type=n,r.needsToRender=!0,r}var n,r;return i(e,t),e.prototype.render=function(){this.drawTile()},Object.defineProperty(e.prototype,"renderSize",{get:function(){var t=this.ctx.canvas.getBoundingClientRect(),e=t.width,n=t.height;return Math.min(Math.floor(e/u.config.roomSize[0]),Math.floor(n/u.config.roomSize[1]))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureCoords",{get:function(){var t=[this.type%4,Math.floor(this.type/4)],e=t[1],n=[t[0]*u.config.tileSize,e*u.config.tileSize],r=n[0],i=n[1],o=u.config.tileSize,s=u.config.tileSize,c=this.location;return{sourceX:r,sourceY:i,sourceWidth:o,sourceHeight:s,drawX:c[0],drawY:c[1],drawWidth:this.renderSize,drawHeight:this.renderSize}},enumerable:!0,configurable:!0}),e.prototype.drawTile=function(){var t=this.textureCoords,n=t.sourceX,r=t.sourceY,i=t.sourceWidth,o=t.sourceHeight,u=t.drawX,s=t.drawY,c=t.drawWidth,a=t.drawHeight;this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(e.textures,n,r,i,o,u,s,c,a)},e.textures=((n=new Image).src=o.default,n),e.type=(function(t){t[t.Wall_1=0]="Wall_1",t[t.Wall_2=1]="Wall_2",t[t.Wall_3=2]="Wall_3",t[t.Wall_4=3]="Wall_4",t[t.Wall_5=4]="Wall_5",t[t.Wall_6=5]="Wall_6",t[t.Wall_7=6]="Wall_7",t[t.Door_SW=7]="Door_SW",t[t.Door_SE=8]="Door_SE",t[t.Inner_Corners=9]="Inner_Corners",t[t.W_Wall=10]="W_Wall",t[t.E_Wall=11]="E_Wall",t[t.Inner_Walls=12]="Inner_Walls",t[t.SW_Corner=13]="SW_Corner",t[t.SE_Corner=14]="SE_Corner",t[t.Floor=15]="Floor"}(r||(r={})),r),e}(n(56).Renderable);e.Tile=s},function(t,e,n){"use strict";n.r(e),e.default=n.p+"d995d8c0bcabd98f49a3ee123baff9c8.png"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16);e.selectScenes=r.createFeatureSelector("scenes")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(117))},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return t.call(this)||this}return i(e,t),e.prototype.render=function(){},e}(n(118).Actor);e.Player=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(56),u=n(34),s=function(t){function e(){var e=t.call(this)||this;return e.locationInRoom=[0,0],e}return i(e,t),Object.defineProperty(e.prototype,"drawCoordinates",{get:function(){var t=this.locationInRoom.map((function(t){return t*u.config.tileSize}));return[t[0],t[1]]},enumerable:!0,configurable:!0}),e}(o.Renderable);e.Actor=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC90b1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PdXRlclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvSW5uZXJTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0FzeW5jU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZWZDb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2NhblJlcG9ydEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvSW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc2FwQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc2FwU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9hdWRpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYXVkaXRUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlckNvdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NhdGNoRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlZmF1bHRJZkVtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kZW1hdGVyaWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbENoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aHJvd0lmRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2VsZW1lbnRBdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZW5kV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2V4cGFuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9pc0VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zY2FuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21heC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29uRXJyb3JSZXN1bWVOZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wYWlyd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcGFydGl0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wbHVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcmFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2luZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwV2hpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL1N1YnNjcmliZU9uT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZUludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZXN0YW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd0NvdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpdGhMYXRlc3RGcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9vcGVyYXRvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL1ZpcnR1YWxUaW1lU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvYmluZENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvaWlmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3VzaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9yZW5kZXJhYmxlLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvVGltZW91dEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9RdWV1ZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvUXVldWVTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3F1ZXVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3RTdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9ub3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc2NlbmVzL2R1bmdlb24vc3RvcmUvYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zY2VuZXMvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9hY3Rpb25zX3N1YmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9vZlR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvaW5wdXQtaGFuZGxlci9pbnB1dC1oYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL2lucHV0LWhhbmRsZXIvcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9pbnB1dC1oYW5kbGVyL2FjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc2NlbmVzL21haW4tbWVudS9zdG9yZS9hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvY2FudmFzLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL3NjZW5lcy9kdW5nZW9uL3N0b3JlL3NlbGVjdG9ycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9pbmRleC5zY3NzPzdhYjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9jc3MvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9QcmVzc1N0YXJ0MlAtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvbnRmYWNlb2JzZXJ2ZXIvZm9udGZhY2VvYnNlcnZlci5zdGFuZGFsb25lLmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL2dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc2NlbmVzL21haW4tbWVudS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zY2VuZXMvbWFpbi1tZW51L21haW4tbWVudS5zY2VuZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL251bGxpc2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvaW5wdXQtaGFuZGxlci9zZWxlY3RvcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9tb2RlbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9hY3Rpb25fY3JlYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0b3JlL3N0b3JlLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RvcmUvcmVkdWNlcl9tYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RvcmUvc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdG9yZS9zdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0b3JlL3JlZHVjZXJfY3JlYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zdG9yZS9kZXBzLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL3NjZW5lcy9zdG9yZS9yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL3NjZW5lcy9tYWluLW1lbnUvc3RvcmUvcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zY2VuZXMvZHVuZ2Vvbi9zdG9yZS9yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvZW50aXR5LXN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL3NjZW5lcy9kdW5nZW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL3NjZW5lcy9kdW5nZW9uL2R1bmdlb24uc2NlbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc2NlbmVzL2R1bmdlb24vd29ybGQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvc2NlbmVzL2R1bmdlb24vcm9vbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2ltZy9wb2ludGVyLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zY2VuZXMvZHVuZ2Vvbi90aWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvaW1nL3RpbGVzLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9zY2VuZXMvc3RvcmUvc2VsZWN0b3JzLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL2FjdG9ycy9wbGF5ZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvYWN0b3JzL3BsYXllci9wbGF5ZXIuYWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvYWN0b3IudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIlN1YnNjcmliZXIiLCJfc3VwZXIiLCJkZXN0aW5hdGlvbk9yTmV4dCIsImVycm9yIiwiY29tcGxldGUiLCJfdGhpcyIsInN5bmNFcnJvclZhbHVlIiwic3luY0Vycm9yVGhyb3duIiwic3luY0Vycm9yVGhyb3dhYmxlIiwiaXNTdG9wcGVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZGVzdGluYXRpb24iLCJhZGQiLCJTYWZlU3Vic2NyaWJlciIsIm5leHQiLCJzdWJzY3JpYmVyIiwiX25leHQiLCJlcnIiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJ1bnN1YnNjcmliZSIsImNsb3NlZCIsIl91bnN1YnNjcmliZUFuZFJlY3ljbGUiLCJfcGFyZW50T3JQYXJlbnRzIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHQiLCJfY29udGV4dCIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJfX3RyeU9yU2V0RXJyb3IiLCJfX3RyeU9yVW5zdWIiLCJ3cmFwcGVkQ29tcGxldGUiLCJmbiIsInBhcmVudCIsIkVycm9yIiwiX3Vuc3Vic2NyaWJlIiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJvYnNlcnZhYmxlIiwic291cmNlIiwic2luayIsIm5leHRPck9ic2VydmVyIiwicnhTdWJzY3JpYmVyIiwidG9TdWJzY3JpYmVyIiwiY29uZmlnIiwiX3RyeVN1YnNjcmliZSIsImNhblJlcG9ydEVycm9yIiwiY29uc29sZSIsIndhcm4iLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJzdWJzY3JpcHRpb24iLCJwaXBlIiwib3BlcmF0aW9ucyIsIl9pIiwidG9Qcm9taXNlIiwieCIsIlByb21pc2UiLCJzdWJzY3JpYmVUb1Jlc3VsdCIsIm91dGVyU3Vic2NyaWJlciIsInJlc3VsdCIsIm91dGVyVmFsdWUiLCJvdXRlckluZGV4IiwiaW5uZXJTdWJzY3JpYmVyIiwiT3V0ZXJTdWJzY3JpYmVyIiwiYXBwbHkiLCJub3RpZnlOZXh0IiwiaW5uZXJWYWx1ZSIsImlubmVySW5kZXgiLCJpbm5lclN1YiIsIm5vdGlmeUVycm9yIiwibm90aWZ5Q29tcGxldGUiLCJTdWJzY3JpcHRpb24iLCJfc3Vic2NyaXB0aW9ucyIsImVtcHR5IiwiZXJyb3JzIiwicmVtb3ZlIiwiaW5kZXgiLCJlIiwiZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzIiwibGVuIiwic3ViIiwiY29uY2F0IiwicHVzaCIsInRlYXJkb3duIiwiRU1QVFkiLCJ0bXAiLCJpbmRleE9mIiwic3Vic2NyaXB0aW9ucyIsInN1YnNjcmlwdGlvbkluZGV4Iiwic3BsaWNlIiwicmVkdWNlIiwiZXJycyIsIlN1YmplY3RTdWJzY3JpYmVyIiwiU3ViamVjdCIsIm9ic2VydmVycyIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJzdWJqZWN0IiwiQW5vbnltb3VzU3ViamVjdCIsImNvcHkiLCJzbGljZSIsImFzT2JzZXJ2YWJsZSIsImlzQXJyYXkiLCJhc3luYyIsIm1hcCIsInByb2plY3QiLCJ0aGlzQXJnIiwiVHlwZUVycm9yIiwiTWFwT3BlcmF0b3IiLCJNYXBTdWJzY3JpYmVyIiwiY291bnQiLCJpc1NjaGVkdWxlciIsInNjaGVkdWxlIiwic2NoZWR1bGVyIiwiZW1wdHlTY2hlZHVsZWQiLCJmcm9tIiwiaW5wdXQiLCJJbm5lclN1YnNjcmliZXIiLCJfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MiLCJ1bmRlZmluZWQiLCJzdGFjayIsIm5vb3AiLCJmaWx0ZXIiLCJwcmVkaWNhdGUiLCJGaWx0ZXJPcGVyYXRvciIsIkZpbHRlclN1YnNjcmliZXIiLCJOb3RpZmljYXRpb25LaW5kIiwiTm90aWZpY2F0aW9uIiwia2luZCIsImhhc1ZhbHVlIiwib2JzZXJ2ZSIsIm9ic2VydmVyIiwiZG8iLCJhY2NlcHQiLCJ0b09ic2VydmFibGUiLCJjcmVhdGVOZXh0IiwidW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb24iLCJjcmVhdGVFcnJvciIsImNyZWF0ZUNvbXBsZXRlIiwiY29tcGxldGVOb3RpZmljYXRpb24iLCJpZGVudGl0eSIsImdldFN5bWJvbEl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCIsIm1lc3NhZ2UiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiYSIsImlpIiwiTWVyZ2VNYXBPcGVyYXRvciIsIk1lcmdlTWFwU3Vic2NyaWJlciIsImhhc0NvbXBsZXRlZCIsImJ1ZmZlciIsImFjdGl2ZSIsIl90cnlOZXh0IiwiX2lubmVyU3ViIiwiaXNoIiwiaW5uZXJTdWJzY3JpcHRpb24iLCJzaGlmdCIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsIiwiaXNGdW5jdGlvbiIsIkVtcHR5RXJyb3IiLCJFbXB0eUVycm9ySW1wbCIsImZyb21BcnJheSIsIkFzeW5jU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwibm93IiwiZGVsZWdhdGUiLCJhY3Rpb25zIiwic2NoZWR1bGVkIiwid29yayIsImRlbGF5Iiwic3RhdGUiLCJmbHVzaCIsImFjdGlvbiIsImV4ZWN1dGUiLCJBc3luY1N1YmplY3QiLCJoYXNOZXh0IiwiQWN0aW9uIiwiQXN5bmNBY3Rpb24iLCJwZW5kaW5nIiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiX2V4ZWN1dGUiLCJlcnJvcmVkIiwiZXJyb3JWYWx1ZSIsImlzTnVtZXJpYyIsInZhbCIsInBhcnNlRmxvYXQiLCJvYnNlcnZhYmxlcyIsImhvc3RSZXBvcnRFcnJvciIsInNldFRpbWVvdXQiLCJhc3NpZ24iLCJ0aXRsZSIsImZvbnROYW1lIiwiZm9udFNjYWxlIiwic2VsZWN0ZWRJdGVtQ29sb3IiLCJtZW51Q29sb3IiLCJtZW51SXRlbUNvbG9yIiwibWVudVRleHRDb2xvciIsIm1lbnVUZXh0SG92ZXJDb2xvciIsIm1lbnVJdGVtRGlzYWJsZWRDb2xvciIsIm1lbnVUZXh0RGlzYWJsZWRDb2xvciIsImtleUJpbmRpbmdzIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0Iiwic2VsZWN0IiwiYmFjayIsImN1cnNvclBvbGxSYXRlIiwicm9vbVNpemUiLCJ0aWxlU2l6ZSIsIm9mIiwiYXJncyIsInBvcCIsImZucyIsInBpcGVGcm9tQXJyYXkiLCJwcmV2IiwiTWF0aCIsInJhbmRvbSIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCIsInRvU3RyaW5nIiwiam9pbiIsInN1YnNjcmliZVRvIiwib2JqIiwib2JzIiwiaXNBcnJheUxpa2UiLCJzdWJzY3JpYmVUb0FycmF5IiwiaXNQcm9taXNlIiwicHJvbWlzZSIsInRoZW4iLCJpdGVyYWJsZSIsIml0ZW0iLCJkb25lIiwicmV0dXJuIiwiaXNPYmplY3QiLCJyZWZDb3VudCIsIlJlZkNvdW50T3BlcmF0b3IiLCJjb25uZWN0YWJsZSIsIl9yZWZDb3VudCIsInJlZkNvdW50ZXIiLCJSZWZDb3VudFN1YnNjcmliZXIiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsInNoYXJlZENvbm5lY3Rpb24iLCJfY29ubmVjdGlvbiIsIlJlcGxheVN1YmplY3QiLCJidWZmZXJTaXplIiwid2luZG93VGltZSIsIl9ldmVudHMiLCJfaW5maW5pdGVUaW1lV2luZG93IiwiX2J1ZmZlclNpemUiLCJfd2luZG93VGltZSIsIm5leHRJbmZpbml0ZVRpbWVXaW5kb3ciLCJuZXh0VGltZVdpbmRvdyIsIlJlcGxheUV2ZW50IiwiX2dldE5vdyIsIl90cmltQnVmZmVyVGhlbkdldEV2ZW50cyIsImV2ZW50c0NvdW50Iiwic3BsaWNlQ291bnQiLCJ0aW1lIiwibWF4IiwidGhyb3dFcnJvciIsImRpc3BhdGNoIiwiX2EiLCJOT05FIiwiY29tYmluZUxhdGVzdCIsIkNvbWJpbmVMYXRlc3RPcGVyYXRvciIsIkNvbWJpbmVMYXRlc3RTdWJzY3JpYmVyIiwidmFsdWVzIiwidG9SZXNwb25kIiwidW51c2VkIiwib2xkVmFsIiwiX3RyeVJlc3VsdFNlbGVjdG9yIiwibWVyZ2VBbGwiLCJkZWZlciIsIm9ic2VydmFibGVGYWN0b3J5IiwiemlwIiwiWmlwT3BlcmF0b3IiLCJaaXBTdWJzY3JpYmVyIiwiaXRlcmF0b3JzIiwiU3RhdGljQXJyYXlJdGVyYXRvciIsIlN0YXRpY0l0ZXJhdG9yIiwiWmlwQnVmZmVySXRlcmF0b3IiLCJzdGlsbFVuc3Vic2NyaWJlZCIsIm5vdGlmeUluYWN0aXZlIiwiY2hlY2tJdGVyYXRvcnMiLCJzaG91bGRDb21wbGV0ZSIsIl90cnlyZXN1bHRTZWxlY3RvciIsIm5leHRSZXN1bHQiLCJhcnJheSIsImlzQ29tcGxldGUiLCJjbG9zZWRfMSIsInNjaGVkdWxlQXJyYXkiLCJuZXh0SGFuZGxlIiwiUkVTT0xWRUQiLCJhY3RpdmVIYW5kbGVzIiwiZmluZEFuZENsZWFySGFuZGxlIiwiaGFuZGxlIiwiSW1tZWRpYXRlIiwiY2IiLCJBc2FwQWN0aW9uIiwiQXNhcFNjaGVkdWxlciIsImFzYXAiLCJhdWRpdCIsImR1cmF0aW9uU2VsZWN0b3IiLCJBdWRpdE9wZXJhdG9yIiwiQXVkaXRTdWJzY3JpYmVyIiwidGhyb3R0bGVkIiwiZHVyYXRpb24iLCJjbGVhclRocm90dGxlIiwiYXVkaXRUaW1lIiwidGltZXIiLCJjbG9zaW5nTm90aWZpZXIiLCJCdWZmZXJPcGVyYXRvciIsIkJ1ZmZlclN1YnNjcmliZXIiLCJidWZmZXJDb3VudCIsInN0YXJ0QnVmZmVyRXZlcnkiLCJCdWZmZXJDb3VudE9wZXJhdG9yIiwic3Vic2NyaWJlckNsYXNzIiwiQnVmZmVyQ291bnRTdWJzY3JpYmVyIiwiQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciIsImJ1ZmZlcnMiLCJidWZmZXJUaW1lIiwiYnVmZmVyVGltZVNwYW4iLCJidWZmZXJDcmVhdGlvbkludGVydmFsIiwibWF4QnVmZmVyU2l6ZSIsIkJ1ZmZlclRpbWVPcGVyYXRvciIsIkNvbnRleHQiLCJCdWZmZXJUaW1lU3Vic2NyaWJlciIsImNvbnRleHRzIiwib3BlbkNvbnRleHQiLCJ0aW1lc3Bhbk9ubHkiLCJ0aW1lU3Bhbk9ubHlTdGF0ZSIsImNsb3NlQWN0aW9uIiwiZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHkiLCJjbG9zZVN0YXRlIiwiY3JlYXRpb25TdGF0ZSIsImRpc3BhdGNoQnVmZmVyQ2xvc2UiLCJkaXNwYXRjaEJ1ZmZlckNyZWF0aW9uIiwiZmlsbGVkQnVmZmVyQ29udGV4dCIsImNvbnRleHRfMSIsIm9uQnVmZmVyRnVsbCIsImNvbnRleHRfMiIsImNsb3NlQ29udGV4dCIsInByZXZDb250ZXh0IiwiYXJnIiwiYnVmZmVyVG9nZ2xlIiwib3BlbmluZ3MiLCJjbG9zaW5nU2VsZWN0b3IiLCJCdWZmZXJUb2dnbGVPcGVyYXRvciIsIkJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIiLCJjbG9zZUJ1ZmZlciIsIm9wZW5CdWZmZXIiLCJ0cnlTdWJzY3JpYmUiLCJidWZmZXJXaGVuIiwiQnVmZmVyV2hlbk9wZXJhdG9yIiwiQnVmZmVyV2hlblN1YnNjcmliZXIiLCJzdWJzY3JpYmluZyIsImNsb3NpbmdTdWJzY3JpcHRpb24iLCJjYXRjaEVycm9yIiwic2VsZWN0b3IiLCJDYXRjaE9wZXJhdG9yIiwiY2F1Z2h0IiwiQ2F0Y2hTdWJzY3JpYmVyIiwiZXJyMiIsImNvbWJpbmVBbGwiLCJjb25jYXRNYXAiLCJjb25jYXRNYXBUbyIsImlubmVyT2JzZXJ2YWJsZSIsIkNvdW50T3BlcmF0b3IiLCJDb3VudFN1YnNjcmliZXIiLCJfdHJ5UHJlZGljYXRlIiwiZGVib3VuY2UiLCJEZWJvdW5jZU9wZXJhdG9yIiwiRGVib3VuY2VTdWJzY3JpYmVyIiwiZHVyYXRpb25TdWJzY3JpcHRpb24iLCJlbWl0VmFsdWUiLCJkZWJvdW5jZVRpbWUiLCJkdWVUaW1lIiwiRGVib3VuY2VUaW1lT3BlcmF0b3IiLCJEZWJvdW5jZVRpbWVTdWJzY3JpYmVyIiwiZGVib3VuY2VkU3Vic2NyaXB0aW9uIiwibGFzdFZhbHVlIiwiY2xlYXJEZWJvdW5jZSIsImRpc3BhdGNoTmV4dCIsImRlYm91bmNlZE5leHQiLCJkZWZhdWx0SWZFbXB0eSIsImRlZmF1bHRWYWx1ZSIsIkRlZmF1bHRJZkVtcHR5T3BlcmF0b3IiLCJEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIiLCJpc0VtcHR5IiwiaXNEYXRlIiwiRGF0ZSIsImlzTmFOIiwiZGVsYXlGb3IiLCJhYnMiLCJEZWxheU9wZXJhdG9yIiwiRGVsYXlTdWJzY3JpYmVyIiwicXVldWUiLCJub3RpZmljYXRpb24iLCJkZWxheV8xIiwiX3NjaGVkdWxlIiwic2NoZWR1bGVOb3RpZmljYXRpb24iLCJEZWxheU1lc3NhZ2UiLCJkZWxheVdoZW4iLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsIkRlbGF5V2hlbk9wZXJhdG9yIiwiRGVsYXlXaGVuU3Vic2NyaWJlciIsImNvbXBsZXRlZCIsImRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwidHJ5Q29tcGxldGUiLCJkZWxheU5vdGlmaWVyIiwidHJ5RGVsYXkiLCJzdWJzY3JpcHRpb25JZHgiLCJub3RpZmllclN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSIsIlN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlciIsInNvdXJjZVN1YnNjcmliZWQiLCJzdWJzY3JpYmVUb1NvdXJjZSIsImRlbWF0ZXJpYWxpemUiLCJEZU1hdGVyaWFsaXplT3BlcmF0b3IiLCJEZU1hdGVyaWFsaXplU3Vic2NyaWJlciIsImRpc3RpbmN0Iiwia2V5U2VsZWN0b3IiLCJmbHVzaGVzIiwiRGlzdGluY3RPcGVyYXRvciIsIkRpc3RpbmN0U3Vic2NyaWJlciIsIlNldCIsImNsZWFyIiwiX3VzZUtleVNlbGVjdG9yIiwiX2ZpbmFsaXplTmV4dCIsImhhcyIsImRpc3RpbmN0VW50aWxDaGFuZ2VkIiwiY29tcGFyZSIsIkRpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IiLCJEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIiLCJoYXNLZXkiLCJ5IiwiZGlzdGluY3RVbnRpbEtleUNoYW5nZWQiLCJ0aHJvd0lmRW1wdHkiLCJlcnJvckZhY3RvcnkiLCJkZWZhdWx0RXJyb3JGYWN0b3J5IiwiVGhyb3dJZkVtcHR5T3BlcmF0b3IiLCJUaHJvd0lmRW1wdHlTdWJzY3JpYmVyIiwidGFrZSIsIlRha2VPcGVyYXRvciIsInRvdGFsIiwiVGFrZVN1YnNjcmliZXIiLCJlbGVtZW50QXQiLCJoYXNEZWZhdWx0VmFsdWUiLCJ2IiwiZW5kV2l0aCIsImV2ZXJ5IiwiRXZlcnlPcGVyYXRvciIsIkV2ZXJ5U3Vic2NyaWJlciIsImV2ZXJ5VmFsdWVNYXRjaCIsImV4aGF1c3QiLCJTd2l0Y2hGaXJzdE9wZXJhdG9yIiwiU3dpdGNoRmlyc3RTdWJzY3JpYmVyIiwiaGFzU3Vic2NyaXB0aW9uIiwiZXhoYXVzdE1hcCIsIkV4aGF1c3RNYXBPcGVyYXRvciIsIkV4aGF1c3RNYXBTdWJzY3JpYmVyIiwidHJ5TmV4dCIsImV4cGFuZCIsIkV4cGFuZE9wZXJhdG9yIiwiRXhwYW5kU3Vic2NyaWJlciIsInN1YnNjcmliZVRvUHJvamVjdGlvbiIsImZpbmFsaXplIiwiY2FsbGJhY2siLCJGaW5hbGx5T3BlcmF0b3IiLCJGaW5hbGx5U3Vic2NyaWJlciIsImZpbmQiLCJGaW5kVmFsdWVPcGVyYXRvciIsInlpZWxkSW5kZXgiLCJGaW5kVmFsdWVTdWJzY3JpYmVyIiwiZmluZEluZGV4IiwiZmlyc3QiLCJpZ25vcmVFbGVtZW50cyIsIklnbm9yZUVsZW1lbnRzT3BlcmF0b3IiLCJJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIiLCJJc0VtcHR5T3BlcmF0b3IiLCJJc0VtcHR5U3Vic2NyaWJlciIsInRha2VMYXN0IiwiVGFrZUxhc3RPcGVyYXRvciIsIlRha2VMYXN0U3Vic2NyaWJlciIsInJpbmciLCJpZHgiLCJsYXN0IiwibWFwVG8iLCJNYXBUb09wZXJhdG9yIiwiTWFwVG9TdWJzY3JpYmVyIiwibWF0ZXJpYWxpemUiLCJNYXRlcmlhbGl6ZU9wZXJhdG9yIiwiTWF0ZXJpYWxpemVTdWJzY3JpYmVyIiwic2NhbiIsImFjY3VtdWxhdG9yIiwic2VlZCIsImhhc1NlZWQiLCJTY2FuT3BlcmF0b3IiLCJTY2FuU3Vic2NyaWJlciIsIl9zZWVkIiwic2V0IiwiY29uZmlndXJhYmxlIiwiYWNjIiwiY29tcGFyZXIiLCJtZXJnZSIsIm1lcmdlTWFwVG8iLCJtZXJnZVNjYW4iLCJNZXJnZVNjYW5PcGVyYXRvciIsIk1lcmdlU2NhblN1YnNjcmliZXIiLCJtdWx0aWNhc3QiLCJzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSIsInN1YmplY3RGYWN0b3J5IiwiTXVsdGljYXN0T3BlcmF0b3IiLCJvbkVycm9yUmVzdW1lTmV4dCIsIm5leHRTb3VyY2VzIiwiT25FcnJvclJlc3VtZU5leHRPcGVyYXRvciIsIk9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlciIsInN1YnNjcmliZVRvTmV4dFNvdXJjZSIsInBhaXJ3aXNlIiwiUGFpcndpc2VPcGVyYXRvciIsIlBhaXJ3aXNlU3Vic2NyaWJlciIsImhhc1ByZXYiLCJwYWlyIiwicGFydGl0aW9uIiwibm90IiwicGx1Y2siLCJwcm9wZXJ0aWVzIiwicGx1Y2tlciIsInByb3BzIiwiY3VycmVudFByb3AiLCJwdWJsaXNoIiwicHVibGlzaEJlaGF2aW9yIiwiQmVoYXZpb3JTdWJqZWN0IiwicHVibGlzaExhc3QiLCJwdWJsaXNoUmVwbGF5Iiwic2VsZWN0b3JPclNjaGVkdWxlciIsInJhY2UiLCJyZXBlYXQiLCJSZXBlYXRPcGVyYXRvciIsIlJlcGVhdFN1YnNjcmliZXIiLCJyZXBlYXRXaGVuIiwibm90aWZpZXIiLCJSZXBlYXRXaGVuT3BlcmF0b3IiLCJSZXBlYXRXaGVuU3Vic2NyaWJlciIsInNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8iLCJyZXRyaWVzIiwic3Vic2NyaWJlVG9SZXRyaWVzIiwicmV0cmllc1N1YnNjcmlwdGlvbiIsIm5vdGlmaWNhdGlvbnMiLCJyZXRyeSIsIlJldHJ5T3BlcmF0b3IiLCJSZXRyeVN1YnNjcmliZXIiLCJyZXRyeVdoZW4iLCJSZXRyeVdoZW5PcGVyYXRvciIsIlJldHJ5V2hlblN1YnNjcmliZXIiLCJzYW1wbGUiLCJTYW1wbGVPcGVyYXRvciIsInNhbXBsZVN1YnNjcmliZXIiLCJTYW1wbGVTdWJzY3JpYmVyIiwic2FtcGxlVGltZSIsInBlcmlvZCIsIlNhbXBsZVRpbWVPcGVyYXRvciIsIlNhbXBsZVRpbWVTdWJzY3JpYmVyIiwiZGlzcGF0Y2hOb3RpZmljYXRpb24iLCJzZXF1ZW5jZUVxdWFsIiwiY29tcGFyZVRvIiwiY29tcGFyYXRvciIsIlNlcXVlbmNlRXF1YWxPcGVyYXRvciIsIlNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyIiwiX2IiLCJfb25lQ29tcGxldGUiLCJlbWl0IiwiY2hlY2tWYWx1ZXMiLCJhcmVFcXVhbCIsIm5leHRCIiwiY29tcGxldGVCIiwiU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIiLCJzaGFyZVN1YmplY3RGYWN0b3J5Iiwic2hhcmUiLCJzaGFyZVJlcGxheSIsImNvbmZpZ09yQnVmZmVyU2l6ZSIsIl9jIiwidXNlUmVmQ291bnQiLCJzaGFyZVJlcGxheU9wZXJhdG9yIiwic2luZ2xlIiwiU2luZ2xlT3BlcmF0b3IiLCJTaW5nbGVTdWJzY3JpYmVyIiwic2VlblZhbHVlIiwiYXBwbHlTaW5nbGVWYWx1ZSIsInNpbmdsZVZhbHVlIiwic2tpcCIsIlNraXBPcGVyYXRvciIsIlNraXBTdWJzY3JpYmVyIiwic2tpcExhc3QiLCJTa2lwTGFzdE9wZXJhdG9yIiwiX3NraXBDb3VudCIsIlNraXBMYXN0U3Vic2NyaWJlciIsIl9jb3VudCIsIl9yaW5nIiwic2tpcENvdW50IiwiY3VycmVudEluZGV4Iiwib2xkVmFsdWUiLCJza2lwVW50aWwiLCJTa2lwVW50aWxPcGVyYXRvciIsIlNraXBVbnRpbFN1YnNjcmliZXIiLCJza2lwV2hpbGUiLCJTa2lwV2hpbGVPcGVyYXRvciIsIlNraXBXaGlsZVN1YnNjcmliZXIiLCJza2lwcGluZyIsInRyeUNhbGxQcmVkaWNhdGUiLCJCb29sZWFuIiwic3RhcnRXaXRoIiwiU3Vic2NyaWJlT25PYnNlcnZhYmxlIiwiZGVsYXlUaW1lIiwic3Vic2NyaWJlT24iLCJTdWJzY3JpYmVPbk9wZXJhdG9yIiwic3dpdGNoTWFwIiwiU3dpdGNoTWFwT3BlcmF0b3IiLCJTd2l0Y2hNYXBTdWJzY3JpYmVyIiwic3dpdGNoQWxsIiwic3dpdGNoTWFwVG8iLCJ0YWtlVW50aWwiLCJUYWtlVW50aWxPcGVyYXRvciIsInRha2VVbnRpbFN1YnNjcmliZXIiLCJUYWtlVW50aWxTdWJzY3JpYmVyIiwidGFrZVdoaWxlIiwiaW5jbHVzaXZlIiwiVGFrZVdoaWxlT3BlcmF0b3IiLCJUYWtlV2hpbGVTdWJzY3JpYmVyIiwibmV4dE9yQ29tcGxldGUiLCJwcmVkaWNhdGVSZXN1bHQiLCJ0YXAiLCJEb09wZXJhdG9yIiwiVGFwU3Vic2NyaWJlciIsIl90YXBOZXh0IiwiX3RhcEVycm9yIiwiX3RhcENvbXBsZXRlIiwiZGVmYXVsdFRocm90dGxlQ29uZmlnIiwibGVhZGluZyIsInRyYWlsaW5nIiwidGhyb3R0bGUiLCJUaHJvdHRsZU9wZXJhdG9yIiwiVGhyb3R0bGVTdWJzY3JpYmVyIiwiX2xlYWRpbmciLCJfdHJhaWxpbmciLCJfaGFzVmFsdWUiLCJfc2VuZFZhbHVlIiwiX3Rocm90dGxlZCIsInNlbmQiLCJ0cnlEdXJhdGlvblNlbGVjdG9yIiwidGhyb3R0bGluZ0RvbmUiLCJ0aHJvdHRsZVRpbWUiLCJUaHJvdHRsZVRpbWVPcGVyYXRvciIsIlRocm90dGxlVGltZVN1YnNjcmliZXIiLCJfaGFzVHJhaWxpbmdWYWx1ZSIsIl90cmFpbGluZ1ZhbHVlIiwidGltZUludGVydmFsIiwiY3VycmVudCIsIlRpbWVJbnRlcnZhbCIsImludGVydmFsIiwidGltZW91dFdpdGgiLCJkdWUiLCJ3aXRoT2JzZXJ2YWJsZSIsImFic29sdXRlVGltZW91dCIsIndhaXRGb3IiLCJUaW1lb3V0V2l0aE9wZXJhdG9yIiwiVGltZW91dFdpdGhTdWJzY3JpYmVyIiwic2NoZWR1bGVUaW1lb3V0IiwiZGlzcGF0Y2hUaW1lb3V0IiwidGltZW91dCIsIlRpbWVvdXRFcnJvciIsInRpbWVzdGFtcCIsIlRpbWVzdGFtcCIsInRvQXJyYXlSZWR1Y2VyIiwiYXJyIiwidG9BcnJheSIsIndpbmRvd0JvdW5kYXJpZXMiLCJXaW5kb3dPcGVyYXRvciIsIndpbmRvd1N1YnNjcmliZXIiLCJzb3VyY2VTdWJzY3JpcHRpb24iLCJXaW5kb3dTdWJzY3JpYmVyIiwid2luZG93Iiwib3BlbldpbmRvdyIsInByZXZXaW5kb3ciLCJuZXdXaW5kb3ciLCJ3aW5kb3dDb3VudCIsIndpbmRvd1NpemUiLCJzdGFydFdpbmRvd0V2ZXJ5IiwiV2luZG93Q291bnRPcGVyYXRvciIsIldpbmRvd0NvdW50U3Vic2NyaWJlciIsIndpbmRvd3MiLCJ3aW5kb3dfMSIsIndpbmRvd1RpbWVTcGFuIiwid2luZG93Q3JlYXRpb25JbnRlcnZhbCIsIm1heFdpbmRvd1NpemUiLCJXaW5kb3dUaW1lT3BlcmF0b3IiLCJDb3VudGVkU3ViamVjdCIsIl9udW1iZXJPZk5leHRlZFZhbHVlcyIsIldpbmRvd1RpbWVTdWJzY3JpYmVyIiwiZGlzcGF0Y2hXaW5kb3dDbG9zZSIsImRpc3BhdGNoV2luZG93Q3JlYXRpb24iLCJkaXNwYXRjaFdpbmRvd1RpbWVTcGFuT25seSIsIm51bWJlck9mTmV4dGVkVmFsdWVzIiwiY2xvc2VXaW5kb3ciLCJ3aW5kb3dfMiIsInRpbWVTcGFuU3RhdGUiLCJ3aW5kb3dUb2dnbGUiLCJXaW5kb3dUb2dnbGVPcGVyYXRvciIsIldpbmRvd1RvZ2dsZVN1YnNjcmliZXIiLCJvcGVuU3Vic2NyaXB0aW9uIiwiY29udGV4dF8zIiwiY29udGV4dF80IiwiaW5uZXIiLCJ3aW5kb3dXaGVuIiwidW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uIiwiY2xvc2luZ05vdGlmaWNhdGlvbiIsIndpdGhMYXRlc3RGcm9tIiwiV2l0aExhdGVzdEZyb21PcGVyYXRvciIsIldpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciIsImZvdW5kIiwiX3RyeVByb2plY3QiLCJ6aXBBbGwiLCJBbmltYXRpb25GcmFtZUFjdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlciIsIlZpcnR1YWxUaW1lU2NoZWR1bGVyIiwibWF4RnJhbWVzIiwiZnJhbWUiLCJmcmFtZVRpbWVGYWN0b3IiLCJWaXJ0dWFsQWN0aW9uIiwic29ydCIsInNvcnRBY3Rpb25zIiwiaXNPYnNlcnZhYmxlIiwiYmluZENhbGxiYWNrIiwiY2FsbGJhY2tGdW5jIiwicGFyYW1zIiwiaW5uZXJBcmdzIiwiYmluZE5vZGVDYWxsYmFjayIsImZvcmtKb2luIiwic291cmNlcyIsImZpcnN0XzEiLCJmb3JrSm9pbkludGVybmFsIiwiZ2V0UHJvdG90eXBlT2YiLCJrZXlzIiwicmVzdWx0U2VsZWN0b3JfMSIsImVtaXR0ZWQiLCJfbG9vcF8xIiwiZnJvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwib3B0aW9ucyIsInNldHVwU3Vic2NyaXB0aW9uIiwic291cmNlT2JqIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNFdmVudFRhcmdldCIsInNvdXJjZV8xIiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic291cmNlXzIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIiLCJzb3VyY2VfMyIsImZyb21FdmVudFBhdHRlcm4iLCJhZGRIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsInJldFZhbHVlIiwiZ2VuZXJhdGUiLCJpbml0aWFsU3RhdGVPck9wdGlvbnMiLCJjb25kaXRpb24iLCJpdGVyYXRlIiwicmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUiLCJpbml0aWFsU3RhdGUiLCJjb25kaXRpb25SZXN1bHQiLCJuZWVkSXRlcmF0ZSIsImlpZiIsInRydWVSZXN1bHQiLCJmYWxzZVJlc3VsdCIsImNvdW50ZXIiLCJORVZFUiIsIm5ldmVyIiwicmVtYWluZGVyIiwic3ViTmV4dCIsInBhaXJzIiwicmFuZ2UiLCJzdGFydCIsInVzaW5nIiwicmVzb3VyY2VGYWN0b3J5IiwicmVzb3VyY2UiLCJTY2hlZHVsZXIiLCJncm91cEJ5IiwiZWxlbWVudFNlbGVjdG9yIiwic3ViamVjdFNlbGVjdG9yIiwiR3JvdXBCeU9wZXJhdG9yIiwiR3JvdXBCeVN1YnNjcmliZXIiLCJncm91cHMiLCJhdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlIiwiX2dyb3VwIiwiTWFwIiwiZWxlbWVudCIsImdyb3VwIiwiZ3JvdXBlZE9ic2VydmFibGUiLCJHcm91cGVkT2JzZXJ2YWJsZSIsIkdyb3VwRHVyYXRpb25TdWJzY3JpYmVyIiwicmVtb3ZlR3JvdXAiLCJkZWxldGUiLCJncm91cFN1YmplY3QiLCJyZWZDb3VudFN1YnNjcmlwdGlvbiIsIklubmVyUmVmQ291bnRTdWJzY3JpcHRpb24iLCJzdG9yZSIsIm9uSW5pdCIsImN1cnJlbnRTdGF0ZSIsImN1cnNvclBvc2l0aW9uIiwicHJpbnRTdGF0ZSIsInNpemUiLCJjb2xvciIsInRleHQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlsbFRleHQiLCJzZXRGb250U2l6ZSIsImZvbnQiLCJkcmF3Q3Vyc29yIiwibG9hZEZyYW1lIiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsImN0eCIsImRyYXdJbWFnZSIsImN1cnNvckluQXJlYSIsIngxIiwieTEiLCJ4MiIsInkyIiwibXgiLCJteSIsImtleUlzUHJlc3NlZCIsImtleXNEb3duIiwiaW5jbHVkZXMiLCJDYW52YXNBUEkiLCJSZW5kZXJhYmxlIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlIiwiX2lzQ29tcGxldGUiLCJnZXRTdWJqZWN0IiwiX3N1YmplY3QiLCJDb25uZWN0YWJsZVN1YnNjcmliZXIiLCJjb25uZWN0YWJsZU9ic2VydmFibGVEZXNjcmlwdG9yIiwiY29ubmVjdGFibGVQcm90byIsIndyaXRhYmxlIiwiX3ZhbHVlIiwiZ2V0VmFsdWUiLCJvYnNlcnZlT24iLCJPYnNlcnZlT25PcGVyYXRvciIsIk9ic2VydmVPblN1YnNjcmliZXIiLCJzY2hlZHVsZU1lc3NhZ2UiLCJPYnNlcnZlT25NZXNzYWdlIiwiVGltZW91dEVycm9ySW1wbCIsImNvbmNhdEFsbCIsIlJhY2VPcGVyYXRvciIsIlJhY2VTdWJzY3JpYmVyIiwiaGFzRmlyc3QiLCJwZXJpb2RPclNjaGVkdWxlciIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZVByb21pc2UiLCJpc0l0ZXJhYmxlIiwic2NoZWR1bGVJdGVyYWJsZSIsIlF1ZXVlQWN0aW9uIiwiUXVldWVTY2hlZHVsZXIiLCJTdWJqZWN0U3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlckluZGV4IiwicHJlZCIsIm5vdFByZWQiLCJTdG9yZSIsInN0YXRlU3ViamVjdCIsImFjdGlvbnNPYnNlcnZlciIsInJlZHVjZXJNYW5hZ2VyIiwid29ybGRJbml0IiwiY3JlYXRlQWN0aW9uIiwiYWRkUm9vbSIsImVudGVyUm9vbSIsInNldEFjdGl2ZVJvb20iLCJzZXRBY3RpdmVTY2VuZSIsIlNjZW5lIiwidHlwZSIsIkFjdGlvbnNTdWJqZWN0IiwiYWxsb3dlZFR5cGVzIiwic29tZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJsYXN0Q3Vyc29yVXBkYXRlIiwiYWRkUmVkdWNlciIsInN0b3JlTm9kZU5hbWUiLCJ1c2VySW5wdXRSZWR1Y2VyIiwiZG9jdW1lbnQiLCJldmVudCIsInZhbHVlT2YiLCJmcm9tQWN0aW9ucyIsIm1vdXNlTW92ZSIsIm1vdXNlRG93biIsIm1vdXNlVXAiLCJtb3VzZU92ZXIiLCJtb3VzZU91dCIsImtleURvd24iLCJrZXlVcCIsImtleVByZXNzIiwia2V5Ym9hcmRFdmVudHMkIiwiYWN0aW9ucyQiLCJvZlR5cGUiLCJtb3VzZUV2ZW50cyQiLCJjdXJzb3JQb3NpdGlvbiQiLCJjbGllbnRYIiwiY2xpZW50WSIsIklucHV0SGFuZGxlciIsImV2ZW50S2V5SW5LZXliaW5kcyIsImdhbWVLZXkiLCJjcmVhdGVJbml0aWFsU3RhdGUiLCJjcmVhdGVSZWR1Y2VyIiwibWF0Y2hlZEtleSIsInVwZGF0ZURpbWVuc2lvbnMiLCJmcmFtZUNhY2hlIiwiY2FudmFzIiwiZ2V0Q2xpZW50Qm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Rm9udE5hbWUiLCJzcGxpdCIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbFJlY3QiLCJzYXZlRnJhbWUiLCJ0b0RhdGFVUkwiLCJyZWxhdGl2ZVNpemUiLCJmbG9vciIsImRvV2l0aEZvbnQiLCJhbGlnbiIsImJhc2VsaW5lIiwiYWxwaGEiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJkb1dpdGhDb2xvciIsImdsb2JhbEFscGhhIiwiZmlsbFN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJzZWxlY3REdW5nZW9uU3RhdGUiLCJjcmVhdGVTZWxlY3RvciIsInNlbGVjdFNjZW5lcyIsImR1bmdlb24iLCJzZWxlY3RSb29tcyIsInJvb21zIiwic2VsZWN0QWN0aXZlUm9vbSIsImFjdGl2ZVJvb20iLCJsb2ciLCJGb250RmFjZU9ic2VydmVyIiwibG9hZCIsIkdhbWUiLCJib2R5IiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJleHBvcnRlZCIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImF0dHJpYnV0ZXMiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsImRhdGEiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsInVybCIsInRlc3QiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJhdHRhY2hFdmVudCIsImgiLCJmIiwiZyIsInUiLCJ6Iiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJBIiwiayIsIkIiLCJmYW1pbHkiLCJ3ZWlnaHQiLCJzdHJldGNoIiwiQyIsIkQiLCJFIiwiRiIsIkoiLCJmb250cyIsIksiLCJMIiwiSCIsImdldFRpbWUiLCJuYXZpZ2F0b3IiLCJ2ZW5kb3IiLCJleGVjIiwidXNlckFnZW50IiwicGFyc2VJbnQiLCJHIiwiTSIsIk4iLCJjbGVhclRpbWVvdXQiLCJyZWFkeVN0YXRlIiwiZGV0YWNoRXZlbnQiLCJ3IiwicSIsImRpciIsIkkiLCJoaWRkZW4iLCJob3N0RWxlbWVudCIsImlubmVySFRNTCIsInJlbmRlciIsIk1haW5NZW51Iiwic2NlbmUiLCJvbkNsaWVudFJlY3RVcGRhdGUiLCJfYWN0aXZlU2NlbmUiLCJfcmVzaXplTGlzdGVuZXIiLCJyZWN0IiwiU3RyaW5nIiwic2V0U2NlbmUiLCJoYXNBY3RpdmF0ZWRTaW5jZUtleURvd24iLCJkZWZhdWx0Rm9udFNpemUiLCJ0aXRsZUZvbnRTaXplIiwiaGFzQWN0aXZhdGVkU2luY2VNb3VzZURvd24iLCJpdGVtcyIsIm9uU2VsZWN0IiwiRHVuZ2VvbiIsImhpdGJveCIsImRpc2FibGVkIiwibWFyZ2luIiwidGl0bGVIZWlnaHQiLCJ0aXRsZVdpZHRoIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkaW1lbnNpb25zIiwicG9zaXRpb24iLCJvbkNoYW5nZXMiLCJzZWxlY3RLZXlzRG93biIsImFjdGl2ZUl0ZW0iLCJOdWxsaXNoIiwiaXNOb3ROdWxsaXNoIiwidGl0bGVYIiwidGl0bGVZIiwiZHJhd0JhY2tncm91bmQiLCJkcmF3VGl0bGUiLCJkcmF3SXRlbXMiLCJnZXRUaXRsZURpbWVuc2lvbnMiLCJmb250U2l6ZSIsIm1hdGNoIiwiaXRlbUhlaWdodCIsIm1lbnVJdGVtIiwidGhpc0l0ZW1Ub3BPZmZzZXQiLCJkcmF3TWVudUl0ZW0iLCJ0aGlzSXRlbSIsImlzRGlzYWJsZWQiLCJpc0FjdGl2ZUl0ZW0iLCJ0ZXh0Q29sb3IiLCJkcmF3TWVudUl0ZW1CYWNrZ3JvdW5kIiwiZHJhd01lbnVJdGVtVGV4dCIsImlzRGVmaW5lZCIsImlzTm90TnVsbCIsInNlbGVjdFVzZXJJbnB1dFN0YXRlIiwiY3JlYXRlRmVhdHVyZVNlbGVjdG9yIiwic2VsZWN0Q3Vyc29yUG9zaXRpb24iLCJhcnJheXNBcmVOb3RBbGxvd2VkTXNnIiwidHlwZVByb3BlcnR5SXNOb3RBbGxvd2VkTXNnIiwiZGVmaW5lVHlwZSIsImNyZWF0b3IiLCJfYXMiLCJfcCIsInJlZHVjZXIiLCJzZWxlY3RTeW5jIiwic2VsZWN0QnlQYXRoIiwicGF0aFNlZ21lbnRzIiwic2VsZWN0QnlGdW5jdGlvbiIsImFkZFJlZHVjZXJNYXAiLCJmZWF0dXJlIiwiYWRkRmVhdHVyZSIsIlJlZHVjZXJPYnNlcnZhYmxlIiwibWFrZURlZmF1bHRSZWR1Y2VyRmFjdG9yeSIsInJlZHVjZXJNYXAiLCJjb21iaW5lZFN0YXRlIiwiUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyIiwicmVkdWNlcnMiLCJyZWR1Y2VyRmFjdG9yeSIsImFkZEZlYXR1cmVzIiwiZmVhdHVyZXMiLCJhZGRSZWR1Y2VycyIsInVwZGF0ZVJlZHVjZXJzIiwibmV3UmVkdWNlcnMiLCJSZWR1Y2VyTWFuYWdlciIsImlzRXF1YWxDaGVjayIsImlzQXJndW1lbnRzQ2hhbmdlZCIsImxhc3RBcmd1bWVudHMiLCJkZWZhdWx0TWVtb2l6ZSIsInByb2plY3Rpb25GbiIsImlzQXJndW1lbnRzRXF1YWwiLCJpc1Jlc3VsdEVxdWFsIiwib3ZlcnJpZGVSZXN1bHQiLCJsYXN0UmVzdWx0IiwibWVtb2l6ZWQiLCJuZXdSZXN1bHQiLCJyZXNldCIsInNldFJlc3VsdCIsImNsZWFyUmVzdWx0IiwiY3JlYXRlU2VsZWN0b3JGYWN0b3J5IiwiZGVmYXVsdFN0YXRlRm4iLCJzZWxlY3RvcnMiLCJtZW1vaXplZFByb2plY3RvciIsIm1lbW9pemUiLCJzdGF0ZUZuIiwidGFpbCIsInByb2plY3RvciIsIm1lbW9pemVkU2VsZWN0b3JzIiwicmVsZWFzZSIsIm1lbW9pemVkU3RhdGUiLCJmZWF0dXJlTmFtZSIsImZlYXR1cmVTdGF0ZSIsIlN0YXRlU3ViamVjdCIsInR5cGVzIiwib25zIiwic2NlbmVzIiwibWFpbk1lbnVSZWR1Y2VyIiwiZHVuZ2VvblJlZHVjZXIiLCJyb29tQWRhcHRlciIsIkVudGl0eVN0YXRlQWRhcHRlciIsIkVudGl0eVN0YXRlIiwicm9vbSIsInVwc2VydE9uZSIsInJvb21JRCIsImVudGl0aWVzIiwiX2lkcyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiYXBwZW5kIiwiZW50aXR5Iiwid29ybGQiLCJXb3JsZCIsInBsYXllciIsIlBsYXllciIsIm9uU2V0QWN0aXZlUm9vbSQiLCJwcmV2aW91c0FjdGl2ZVJvb20iLCJyZW1vdmVBY3RvciIsImFkZEFjdG9yIiwib25FbnRlclJvb20kIiwiZ2VuZXJhdGVSb29tIiwiY29vcmRpbmF0ZXNUb0lEIiwiY29vcmRpbmF0ZXNGcm9tSUQiLCJjb29yZCIsImN1cnJlbnRSb29tIiwiUm9vbSIsImNvb3JkaW5hdGVzIiwicmVxdWlyZWREb29ycyIsImFjdG9ycyIsInRpbGVzIiwicm93IiwidGlsZUxpc3QiLCJ0aWxlIiwiYWN0b3IiLCJhY3RvclRvQWRkIiwiYWN0b3JUb1JlbW92ZSIsInJlbmRlclNpemUiLCJtaW4iLCJyb29tTGVmdEVkZ2UiLCJyb29tVG9wRWRnZSIsImNvbHVtbnMiLCJyb3dzIiwiY29sdW1uIiwiaXNOb3J0aE9yU291dGhXYWxsIiwiaXNOb3J0aFdhbGwiLCJpc1NvdXRoV2FsbCIsImlzRWFzdE9yV2VzdFdhbGwiLCJpc1dlc3RXYWxsIiwiaXNFYXN0V2FsbCIsIlRpbGUiLCJGbG9vciIsIldfV2FsbCIsIkVfV2FsbCIsIldhbGxfNCIsIlNXX0Nvcm5lciIsIlNFX0Nvcm5lciIsIldhbGxfMSIsImxvY2F0aW9uIiwibmVlZHNUb1JlbmRlciIsImltZyIsIlRpbGVUeXBlcyIsImRyYXdUaWxlIiwidGV4dHVyZVkiLCJzb3VyY2VYIiwic291cmNlWSIsInNvdXJjZVdpZHRoIiwic291cmNlSGVpZ2h0IiwiZHJhd1giLCJkcmF3WSIsImRyYXdXaWR0aCIsImRyYXdIZWlnaHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ0ZXh0dXJlcyIsIkFjdG9yIiwibG9jYXRpb25JblJvb20iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9C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Q0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLElBaEdjLEVBQUFFLFdBQ1RiLEVBQU0sSUFBSS9hLE9BQ1pDLElBQU0sVUFDSDhhLEdBRVEsRUFBQXBYLE1BQ2YsU0FBS3FYLEdBQ0osdUJBQ0EsdUJBQ0EsdUJBQ0EsdUJBRUEsdUJBQ0EsdUJBQ0EsdUJBQ0EseUJBRUEseUJBQ0EscUNBQ0Esd0JBQ0Esd0JBRUEsa0NBQ0EsOEJBQ0EsOEJBQ0Esc0JBbkJELENBQUtBLE1BQVMsS0FxQlBBLEdBd0VULEVBcEdBLENBRkEsTUFFMEJqYSxZQUFiLEVBQUFzWixRLDZCQ0piLE9BQWUsY0FBMEIsd0MsOEVDQXpDLFlBR2EsRUFBQTdTLGFBQWUsRUFBQTZMLHNCQUFtQyxXLDBJQ0gvRCxVLDhaQ0FBLElBRUEsY0FDQyxhLE9BQ0MsY0FBTyxLQUlULE9BTjRCLE9BS3BCLFlBQUFuRCxPQUFQLGFBQ0QsRUFOQSxDQUZBLE9BRTRCMkwsT0FBZixFQUFBM0QsVSw4WkNGYixZQUNBLFFBRUEsY0FVQyxtQkFDQyxjQUFPLEssT0FWRCxFQUFBNEQsZUFBbUMsQ0FBQyxFQUFHLEcsRUFjL0MsT0Fmb0MsT0FHbkMsc0JBQVcsOEJBQWUsQyxJQUExQixXQUNPLHlFQUdOLE1BQU8sQ0FIQSxLQUFHLE8sZ0NBV1osRUFmQSxDQUFvQyxFQUFBL2EsWUFBZCxFQUFBOGEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgzKTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfaXNGdW5jdGlvbixfT2JzZXJ2ZXIsX1N1YnNjcmlwdGlvbixfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlcixfY29uZmlnLF91dGlsX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVtcHR5IGFzIGVtcHR5T2JzZXJ2ZXIgfSBmcm9tICcuL09ic2VydmVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9ob3N0UmVwb3J0RXJyb3InO1xudmFyIFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVmFsdWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGVtcHR5T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbk9yTmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGVtcHR5T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uT3JOZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb25Pck5leHQgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBkZXN0aW5hdGlvbk9yTmV4dC5zeW5jRXJyb3JUaHJvd2FibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uT3JOZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25Pck5leHQuYWRkKF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTYWZlU3Vic2NyaWJlcihfdGhpcywgZGVzdGluYXRpb25Pck5leHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTYWZlU3Vic2NyaWJlcihfdGhpcywgZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZVtyeFN1YnNjcmliZXJTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBzdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRPclBhcmVudHMgPSB0aGlzLl9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgU2FmZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIoX3BhcmVudFN1YnNjcmliZXIsIG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBfcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdmFyIG5leHQ7XG4gICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXM7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dDtcbiAgICAgICAgICAgIGVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3I7XG4gICAgICAgICAgICBjb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlO1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyT3JOZXh0ICE9PSBlbXB0eU9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQudW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZChjb250ZXh0LnVuc3Vic2NyaWJlLmJpbmQoY29udGV4dCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LnVuc3Vic2NyaWJlID0gX3RoaXMudW5zdWJzY3JpYmUuYmluZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG5leHQ7XG4gICAgICAgIF90aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkICYmIHRoaXMuX25leHQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9uZXh0LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fbmV4dCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICB2YXIgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyA9IGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jb21wbGV0ZS5jYWxsKF90aGlzLl9jb250ZXh0KTsgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIHx8ICFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIod3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yVW5zdWIgPSBmdW5jdGlvbiAoZm4sIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JTZXRFcnJvciA9IGZ1bmN0aW9uIChwYXJlbnQsIGZuLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBjYWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgX3BhcmVudFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX3RvU3Vic2NyaWJlcixfc3ltYm9sX29ic2VydmFibGUsX3V0aWxfcGlwZSxfY29uZmlnIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNhblJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IHRvU3Vic2NyaWJlciB9IGZyb20gJy4vdXRpbC90b1N1YnNjcmliZXInO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbnZhciBPYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgdmFyIHNpbmsgPSB0b1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgc2luay5hZGQob3BlcmF0b3IuY2FsbChzaW5rLCB0aGlzLnNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2luay5hZGQodGhpcy5zb3VyY2UgfHwgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmICFzaW5rLnN5bmNFcnJvclRocm93YWJsZSkgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShzaW5rKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5U3Vic2NyaWJlKHNpbmspKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHNpbmsuc3luY0Vycm9yVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW5rO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yKHNpbmspKSB7XG4gICAgICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZWplY3QsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiB2YWx1ZSA9IHg7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICBpZiAoIXByb21pc2VDdG9yKSB7XG4gICAgICAgIHByb21pc2VDdG9yID0gY29uZmlnLlByb21pc2UgfHwgUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFByb21pc2UgaW1wbCBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZUN0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3Vic2NyaWJlcixfc3ltYm9sX3J4U3Vic2NyaWJlcixfT2JzZXJ2ZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4uL09ic2VydmVyJztcbmV4cG9ydCBmdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIGlmIChuZXh0T3JPYnNlcnZlcikge1xuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlclN5bWJvbF0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZXh0T3JPYnNlcnZlciAmJiAhZXJyb3IgJiYgIWNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihlbXB0eU9ic2VydmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9TdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfSW5uZXJTdWJzY3JpYmVyLF9zdWJzY3JpYmVUbyxfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG8gfSBmcm9tICcuL3N1YnNjcmliZVRvJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVUb1Jlc3VsdChvdXRlclN1YnNjcmliZXIsIHJlc3VsdCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgaWYgKGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIob3V0ZXJTdWJzY3JpYmVyLCBvdXRlclZhbHVlLCBvdXRlckluZGV4KTtcbiAgICB9XG4gICAgaWYgKGlubmVyU3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWJzY3JpYmUoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmliZVRvKHJlc3VsdCkoaW5uZXJTdWJzY3JpYmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUmVzdWx0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG52YXIgT3V0ZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE91dGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT3V0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPdXRlclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU91dGVyU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNBcnJheSxfdXRpbF9pc09iamVjdCxfdXRpbF9pc0Z1bmN0aW9uLF91dGlsX1Vuc3Vic2NyaXB0aW9uRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi91dGlsL2lzT2JqZWN0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xudmFyIFN1YnNjcmlwdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24odW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50T3JQYXJlbnRzID0gX2EuX3BhcmVudE9yUGFyZW50cywgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IF9wYXJlbnRPclBhcmVudHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudE9yUGFyZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3Vuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGUuZXJyb3JzKSA6IFtlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheShfc3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qoc3ViKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGUuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGVhcmRvd247XG4gICAgICAgIGlmICghdGVhcmRvd24pIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdGVhcmRvd24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRlYXJkb3duKTtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiA9PT0gdGhpcyB8fCBzdWJzY3JpcHRpb24uY2xvc2VkIHx8IHR5cGVvZiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEoc3Vic2NyaXB0aW9uIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fc3Vic2NyaXB0aW9ucyA9IFt0bXBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCB0ZWFyZG93biAnICsgdGVhcmRvd24gKyAnIGFkZGVkIHRvIFN1YnNjcmlwdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX3BhcmVudE9yUGFyZW50cyA9IHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzID0gW19wYXJlbnRPclBhcmVudHMsIHRoaXNdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMuaW5kZXhPZih0aGlzKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIF9wYXJlbnRPclBhcmVudHMucHVzaCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtzdWJzY3JpcHRpb25dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSW5kZXggPSBzdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnNwbGljZShzdWJzY3JpcHRpb25JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoZW1wdHkpIHtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0obmV3IFN1YnNjcmlwdGlvbigpKSk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmZ1bmN0aW9uIGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnJvcnMpIHtcbiAgICByZXR1cm4gZXJyb3JzLnJlZHVjZShmdW5jdGlvbiAoZXJycywgZXJyKSB7IHJldHVybiBlcnJzLmNvbmNhdCgoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikgPyBlcnIuZXJyb3JzIDogZXJyKTsgfSwgW10pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT2JzZXJ2YWJsZSxfU3Vic2NyaWJlcixfU3Vic2NyaXB0aW9uLF91dGlsX09iamVjdFVuc3Vic2NyaWJlZEVycm9yLF9TdWJqZWN0U3Vic2NyaXB0aW9uLF9pbnRlcm5hbF9zeW1ib2xfcnhTdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgU3ViamVjdFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3ViamVjdFN1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlcic7XG52YXIgU3ViamVjdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3ViamVjdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTdWJqZWN0U3Vic2NyaWJlciB9O1xudmFyIFN1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGVbcnhTdWJzY3JpYmVyU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJqZWN0U3Vic2NyaWJlcih0aGlzKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29weVtpXS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICAgIHRoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29weVtpXS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFN1YmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3Q7XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IFN1YmplY3QgfTtcbnZhciBBbm9ueW1vdXNTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5uZXh0KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0FzeW5jQWN0aW9uLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmMgPSAvKkBfX1BVUkVfXyovIG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtYXBPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb24uIEFyZSB5b3UgbG9va2luZyBmb3IgYG1hcFRvKClgPycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNYXBPcGVyYXRvciB9O1xudmFyIE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZyB8fCBfdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gLypAX19QVVJFX18qLyBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8sX3NjaGVkdWxlZF9zY2hlZHVsZWQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG8gfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvJztcbmltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xudmFyIElubmVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhJbm5lclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLm91dGVyVmFsdWUgPSBvdXRlclZhbHVlO1xuICAgICAgICBfdGhpcy5vdXRlckluZGV4ID0gb3V0ZXJJbmRleDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5TmV4dCh0aGlzLm91dGVyVmFsdWUsIHZhbHVlLCB0aGlzLm91dGVySW5kZXgsIHRoaXMuaW5kZXgrKywgdGhpcyk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlFcnJvcihlcnJvciwgdGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlDb21wbGV0ZSh0aGlzKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIElubmVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbm5lclN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gZmFsc2U7XG5leHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgc2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLndhcm4oJ0RFUFJFQ0FURUQhIFJ4SlMgd2FzIHNldCB0byB1c2UgZGVwcmVjYXRlZCBzeW5jaHJvbm91cyBlcnJvciBoYW5kbGluZyBiZWhhdmlvciBieSBjb2RlIGF0OiBcXG4nICsgZXJyb3Iuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncykge1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLmxvZygnUnhKUzogQmFjayB0byBhIGJldHRlciBlcnJvciBiZWhhdmlvci4gVGhhbmsgeW91LiA8MycpO1xuICAgICAgICB9XG4gICAgICAgIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcoKSB7XG4gICAgICAgIHJldHVybiBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3M7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXBcbiIsImV4cG9ydCAqIGZyb20gJy4vbW9kZWxzJ1xuZXhwb3J0ICogZnJvbSAnLi9hY3Rpb25fY3JlYXRvcidcbmV4cG9ydCAqIGZyb20gJy4vc3RvcmUnXG5leHBvcnQgKiBmcm9tICcuL2FjdGlvbnNfc3ViamVjdCdcbmV4cG9ydCAqIGZyb20gJy4vcmVkdWNlcl9tYW5hZ2VyJ1xuZXhwb3J0ICogZnJvbSAnLi9zZWxlY3RvcidcbmV4cG9ydCAqIGZyb20gJy4vc3RhdGUnXG5leHBvcnQgKiBmcm9tICcuL3JlZHVjZXJfY3JlYXRvcidcbmV4cG9ydCAqIGZyb20gJy4vb2ZUeXBlJ1xuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaWx0ZXJPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxudmFyIEZpbHRlck9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmlsdGVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaWx0ZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJPcGVyYXRvcjtcbn0oKSk7XG52YXIgRmlsdGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaWx0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbHRlclN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpbHRlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZS5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX2VtcHR5LF9vYnNlcnZhYmxlX29mLF9vYnNlcnZhYmxlX3Rocm93RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL29ic2VydmFibGUvZW1wdHknO1xuaW1wb3J0IHsgb2YgfSBmcm9tICcuL29ic2VydmFibGUvb2YnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4vb2JzZXJ2YWJsZS90aHJvd0Vycm9yJztcbmV4cG9ydCB2YXIgTm90aWZpY2F0aW9uS2luZDtcbi8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChOb3RpZmljYXRpb25LaW5kKSB7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIk5FWFRcIl0gPSBcIk5cIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiRVJST1JcIl0gPSBcIkVcIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiQ09NUExFVEVcIl0gPSBcIkNcIjtcbn0pKE5vdGlmaWNhdGlvbktpbmQgfHwgKE5vdGlmaWNhdGlvbktpbmQgPSB7fSkpO1xudmFyIE5vdGlmaWNhdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0ga2luZCA9PT0gJ04nO1xuICAgIH1cbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IgJiYgb2JzZXJ2ZXIuZXJyb3IodGhpcy5lcnJvcik7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY29tcGxldGUgJiYgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIGtpbmQgPSB0aGlzLmtpbmQ7XG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQgJiYgbmV4dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvciAmJiBlcnJvcih0aGlzLmVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZSAmJiBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciAmJiB0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIubmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2ZShuZXh0T3JPYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS50b09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBvZih0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIG5vdGlmaWNhdGlvbiBraW5kIHZhbHVlJyk7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvbi51bmRlZmluZWRWYWx1ZU5vdGlmaWNhdGlvbjtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycik7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb247XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdDJyk7XG4gICAgTm90aWZpY2F0aW9uLnVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbignTicsIHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBOb3RpZmljYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gLypAX19QVVJFX18qLyBnZXRTeW1ib2xJdGVyYXRvcigpO1xuZXhwb3J0IHZhciAkJGl0ZXJhdG9yID0gaXRlcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF9tYXAsX29ic2VydmFibGVfZnJvbSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0sIGNvbmN1cnJlbnQpKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgTWVyZ2VNYXBPcGVyYXRvcihwcm9qZWN0LCBjb25jdXJyZW50KSk7IH07XG59XG52YXIgTWVyZ2VNYXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgIH1cbiAgICBNZXJnZU1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1lcmdlTWFwU3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcm9qZWN0LCB0aGlzLmNvbmN1cnJlbnQpKTtcbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE1lcmdlTWFwT3BlcmF0b3IgfTtcbnZhciBNZXJnZU1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWVyZ2VNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgY29uY3VycmVudCkge1xuICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChpc2gsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgaXNoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KGJ1ZmZlci5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VNYXBTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE1lcmdlTWFwU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ2FyZ3VtZW50IG91dCBvZiByYW5nZSc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdBcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBFbXB0eUVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbXB0eUVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ25vIGVsZW1lbnRzIGluIHNlcXVlbmNlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ0VtcHR5RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgRW1wdHlFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIEVtcHR5RXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydCB2YXIgRW1wdHlFcnJvciA9IEVtcHR5RXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1wdHlFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG9BcnJheSxfc2NoZWR1bGVkX3NjaGVkdWxlQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9BcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvQXJyYXkoaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcbnZhciBBc3luY1NjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5vdyA9IFNjaGVkdWxlci5ub3c7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IF90aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLm5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAmJiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAhPT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLnNjaGVkdWxlKHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbnZhciBBc3luY1N1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFzTmV4dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQXN5bmNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1N1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FjdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xudmFyIEFzeW5jQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9ICEhZSAmJiBlIHx8IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgdmFyIGluZGV4ID0gYWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgICAgICB0aGlzLndvcmsgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pc0FycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuL2lzQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWwpIHtcbiAgICByZXR1cm4gIWlzQXJyYXkodmFsKSAmJiAodmFsIC0gcGFyc2VGbG9hdCh2YWwpICsgMSkgPj0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTnVtZXJpYy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29mLF9vcGVyYXRvcnNfY29uY2F0QWxsIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG9mIH0gZnJvbSAnLi9vZic7XG5pbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbCgpKG9mLmFwcGx5KHZvaWQgMCwgb2JzZXJ2YWJsZXMpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iLCJjb25zdCBkZWZhdWx0cyA9IHtcblx0dGl0bGU6ICdEYWVkYWx1cycsXG5cdGZvbnROYW1lOiAnUHJlc3MgU3RhcnQgMlAnLFxuXHRmb250U2NhbGU6IDEwMCxcblx0c2VsZWN0ZWRJdGVtQ29sb3I6ICcjNTAxNTAwJyxcblx0bWVudUNvbG9yOiAnIzU1NScsXG5cdG1lbnVJdGVtQ29sb3I6ICcjNDQ0Jyxcblx0bWVudVRleHRDb2xvcjogJyNiYmInLFxuXHRtZW51VGV4dEhvdmVyQ29sb3I6ICcjZWVlJyxcblx0bWVudUl0ZW1EaXNhYmxlZENvbG9yOiAnIzY2NicsXG5cdG1lbnVUZXh0RGlzYWJsZWRDb2xvcjogJyM0NDQnLFxuXHRrZXlCaW5kaW5nczoge1xuXHRcdHVwOiBbJ0Fycm93VXAnLCAndycsICdXJ10sXG5cdFx0ZG93bjogWydBcnJvd0Rvd24nLCAncycsICdTJ10sXG5cdFx0bGVmdDogWydBcnJvd0xlZnQnLCAnYScsICdBJ10sXG5cdFx0cmlnaHQ6IFsnQXJyb3dSaWdodCcsICdkJywgJ0QnXSxcblx0XHRzZWxlY3Q6IFsnRW50ZXInLCAnICddLFxuXHRcdGJhY2s6IFsnRXNjYXBlJywgJ0JhY2tzcGFjZSddXG5cdH0sXG5cdGN1cnNvclBvbGxSYXRlOiAxMCxcblx0cm9vbVNpemU6IFsxNiwgMTZdIGFzIFtudW1iZXIsIG51bWJlcl0sXG5cdHRpbGVTaXplOiAxNlxufVxuXG5jb25zdCB1c2VyUHJlZmVyZW5jZXMgPSB7fVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHVzZXJQcmVmZXJlbmNlcylcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNTY2hlZHVsZXIsX2Zyb21BcnJheSxfc2NoZWR1bGVkX3NjaGVkdWxlQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoYXJncywgc2NoZWR1bGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXkoYXJncyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9ub29wIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKCFmbnMpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgICAgICA6ICdAQHJ4U3Vic2NyaWJlcl8nICsgLypAX19QVVJFX18qLyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydCB2YXIgJCRyeFN1YnNjcmliZXIgPSByeFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yeFN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvckltcGwgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9ycyA/XG4gICAgICAgICAgICBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKSA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgVW5zdWJzY3JpcHRpb25FcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N1YnNjcmliZVRvQXJyYXksX3N1YnNjcmliZVRvUHJvbWlzZSxfc3Vic2NyaWJlVG9JdGVyYWJsZSxfc3Vic2NyaWJlVG9PYnNlcnZhYmxlLF9pc0FycmF5TGlrZSxfaXNQcm9taXNlLF9pc09iamVjdCxfc3ltYm9sX2l0ZXJhdG9yLF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBzdWJzY3JpYmVUb0FycmF5IH0gZnJvbSAnLi9zdWJzY3JpYmVUb0FycmF5JztcbmltcG9ydCB7IHN1YnNjcmliZVRvUHJvbWlzZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9Qcm9taXNlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvSXRlcmFibGUgfSBmcm9tICcuL3N1YnNjcmliZVRvSXRlcmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9PYnNlcnZhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4vaXNQcm9taXNlJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi9pc09iamVjdCc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG8gPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgaWYgKCEhcmVzdWx0ICYmIHR5cGVvZiByZXN1bHRbU3ltYm9sX29ic2VydmFibGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb09ic2VydmFibGUocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheUxpa2UocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9BcnJheShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9Qcm9taXNlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCEhcmVzdWx0ICYmIHR5cGVvZiByZXN1bHRbU3ltYm9sX2l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9JdGVyYWJsZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXNPYmplY3QocmVzdWx0KSA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIHJlc3VsdCArIFwiJ1wiO1xuICAgICAgICB2YXIgbXNnID0gXCJZb3UgcHJvdmlkZWQgXCIgKyB2YWx1ZSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC5cIlxuICAgICAgICAgICAgKyAnIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBBcnJheSwgb3IgSXRlcmFibGUuJztcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUby5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIHN1YnNjcmliZVRvT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnMuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL2hvc3RSZXBvcnRFcnJvcic7XG5leHBvcnQgdmFyIHN1YnNjcmliZVRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgaG9zdFJlcG9ydEVycm9yKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb1Byb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfaXRlcmF0b3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9JdGVyYWJsZSA9IGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKGl0ZW0uZG9uZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9JdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiByZWZDb3VudCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVmQ291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlZkNvdW50T3BlcmF0b3Ioc291cmNlKSk7XG4gICAgfTtcbn1cbnZhciBSZWZDb3VudE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50T3BlcmF0b3IoY29ubmVjdGFibGUpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgIH1cbiAgICBSZWZDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQrKztcbiAgICAgICAgdmFyIHJlZkNvdW50ZXIgPSBuZXcgUmVmQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGNvbm5lY3RhYmxlKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUocmVmQ291bnRlcik7XG4gICAgICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJlZkNvdW50ZXIuY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIFJlZkNvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWZDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgaWYgKCFjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gbnVsbDtcbiAgICAgICAgdmFyIHJlZkNvdW50ID0gY29ubmVjdGFibGUuX3JlZkNvdW50O1xuICAgICAgICBpZiAocmVmQ291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQgPSByZWZDb3VudCAtIDE7XG4gICAgICAgIGlmIChyZWZDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIHZhciBzaGFyZWRDb25uZWN0aW9uID0gY29ubmVjdGFibGUuX2Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubmVjdGlvbiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgc2hhcmVkQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX3NjaGVkdWxlcl9xdWV1ZSxfU3Vic2NyaXB0aW9uLF9vcGVyYXRvcnNfb2JzZXJ2ZU9uLF91dGlsX09iamVjdFVuc3Vic2NyaWJlZEVycm9yLF9TdWJqZWN0U3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IHF1ZXVlIH0gZnJvbSAnLi9zY2hlZHVsZXIvcXVldWUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JzZXJ2ZU9uU3Vic2NyaWJlciB9IGZyb20gJy4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJqZWN0U3Vic2NyaXB0aW9uJztcbnZhciBSZXBsYXlTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlcGxheVN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlclNpemUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgYnVmZmVyU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93VGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyA9IFtdO1xuICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gYnVmZmVyU2l6ZSA8IDEgPyAxIDogYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuX3dpbmRvd1RpbWUgPSB3aW5kb3dUaW1lIDwgMSA/IDEgOiB3aW5kb3dUaW1lO1xuICAgICAgICBpZiAod2luZG93VGltZSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XG4gICAgICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLm5leHQgPSBfdGhpcy5uZXh0SW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMubmV4dCA9IF90aGlzLm5leHRUaW1lV2luZG93O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUubmV4dEluZmluaXRlVGltZVdpbmRvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2V2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgICAgX2V2ZW50cy5wdXNoKHZhbHVlKTtcbiAgICAgICAgaWYgKF9ldmVudHMubGVuZ3RoID4gdGhpcy5fYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgX2V2ZW50cy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLm5leHRUaW1lV2luZG93ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKG5ldyBSZXBsYXlFdmVudCh0aGlzLl9nZXROb3coKSwgdmFsdWUpKTtcbiAgICAgICAgdGhpcy5fdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfaW5maW5pdGVUaW1lV2luZG93ID0gdGhpcy5faW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB2YXIgX2V2ZW50cyA9IF9pbmZpbml0ZVRpbWVXaW5kb3cgPyB0aGlzLl9ldmVudHMgOiB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cygpO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBsZW4gPSBfZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCB8fCB0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlciA9IG5ldyBPYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHNjaGVkdWxlcikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW5maW5pdGVUaW1lV2luZG93KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChfZXZlbnRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KF9ldmVudHNbaV0udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9nZXROb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zY2hlZHVsZXIgfHwgcXVldWUpLm5vdygpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm93ID0gdGhpcy5fZ2V0Tm93KCk7XG4gICAgICAgIHZhciBfYnVmZmVyU2l6ZSA9IHRoaXMuX2J1ZmZlclNpemU7XG4gICAgICAgIHZhciBfd2luZG93VGltZSA9IHRoaXMuX3dpbmRvd1RpbWU7XG4gICAgICAgIHZhciBfZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgICB2YXIgZXZlbnRzQ291bnQgPSBfZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIHNwbGljZUNvdW50ID0gMDtcbiAgICAgICAgd2hpbGUgKHNwbGljZUNvdW50IDwgZXZlbnRzQ291bnQpIHtcbiAgICAgICAgICAgIGlmICgobm93IC0gX2V2ZW50c1tzcGxpY2VDb3VudF0udGltZSkgPCBfd2luZG93VGltZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3BsaWNlQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRzQ291bnQgPiBfYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgc3BsaWNlQ291bnQgPSBNYXRoLm1heChzcGxpY2VDb3VudCwgZXZlbnRzQ291bnQgLSBfYnVmZmVyU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwbGljZUNvdW50ID4gMCkge1xuICAgICAgICAgICAgX2V2ZW50cy5zcGxpY2UoMCwgc3BsaWNlQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfZXZlbnRzO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGxheVN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IFJlcGxheVN1YmplY3QgfTtcbnZhciBSZXBsYXlFdmVudCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBsYXlFdmVudCh0aW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBSZXBsYXlFdmVudDtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXBsYXlTdWJqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dFcnJvcihlcnJvciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwgeyBlcnJvcjogZXJyb3IsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIgfSk7IH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKF9hKSB7XG4gICAgdmFyIGVycm9yID0gX2EuZXJyb3IsIHN1YnNjcmliZXIgPSBfYS5zdWJzY3JpYmVyO1xuICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfaXNTY2hlZHVsZXIsX3V0aWxfaXNBcnJheSxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9mcm9tQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xudmFyIE5PTkUgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IG51bGw7XG4gICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgaWYgKGlzU2NoZWR1bGVyKG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHNjaGVkdWxlcikubGlmdChuZXcgQ29tYmluZUxhdGVzdE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSk7XG59XG52YXIgQ29tYmluZUxhdGVzdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbWJpbmVMYXRlc3RPcGVyYXRvcihyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIENvbWJpbmVMYXRlc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBDb21iaW5lTGF0ZXN0T3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgQ29tYmluZUxhdGVzdE9wZXJhdG9yIH07XG52YXIgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ29tYmluZUxhdGVzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBbXTtcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKE5PTkUpO1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGxlbjtcbiAgICAgICAgICAgIHRoaXMudG9SZXNwb25kID0gbGVuO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZXNbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAodW51c2VkKSB7XG4gICAgICAgIGlmICgodGhpcy5hY3RpdmUgLT0gMSkgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuICAgICAgICB2YXIgb2xkVmFsID0gdmFsdWVzW291dGVySW5kZXhdO1xuICAgICAgICB2YXIgdG9SZXNwb25kID0gIXRoaXMudG9SZXNwb25kXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogb2xkVmFsID09PSBOT05FID8gLS10aGlzLnRvUmVzcG9uZCA6IHRoaXMudG9SZXNwb25kO1xuICAgICAgICB2YWx1ZXNbb3V0ZXJJbmRleF0gPSBpbm5lclZhbHVlO1xuICAgICAgICBpZiAodG9SZXNwb25kID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVJlc3VsdFNlbGVjdG9yKHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWVzLnNsaWNlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVJlc3VsdFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3Rvci5hcHBseSh0aGlzLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlTWFwLF91dGlsX2lkZW50aXR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX2Zyb20sX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZlcihvYnNlcnZhYmxlRmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5wdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbnB1dCA9IG9ic2VydmFibGVGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc291cmNlID0gaW5wdXQgPyBmcm9tKGlucHV0KSA6IGVtcHR5KCk7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9mcm9tQXJyYXksX3V0aWxfaXNBcnJheSxfU3Vic2NyaWJlcixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF8uLl9pbnRlcm5hbF9zeW1ib2xfaXRlcmF0b3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IGZ1bmN0aW9uIHppcCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5KG9ic2VydmFibGVzLCB1bmRlZmluZWQpLmxpZnQobmV3IFppcE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSk7XG59XG52YXIgWmlwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWmlwT3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICBaaXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFppcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5yZXN1bHRTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFppcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IFppcE9wZXJhdG9yIH07XG52YXIgWmlwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhaaXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFppcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHJlc3VsdFNlbGVjdG9yLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pdGVyYXRvcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMucmVzdWx0U2VsZWN0b3IgPSAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSA/IHJlc3VsdFNlbGVjdG9yIDogbnVsbDtcbiAgICAgICAgX3RoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpdGVyYXRvcnMucHVzaChuZXcgU3RhdGljQXJyYXlJdGVyYXRvcih2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZVtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpdGVyYXRvcnMucHVzaChuZXcgU3RhdGljSXRlcmF0b3IodmFsdWVbU3ltYm9sX2l0ZXJhdG9yXSgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRvcnMucHVzaChuZXcgWmlwQnVmZmVySXRlcmF0b3IodGhpcy5kZXN0aW5hdGlvbiwgdGhpcywgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG4gICAgICAgIHZhciBsZW4gPSBpdGVyYXRvcnMubGVuZ3RoO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGxlbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JzW2ldO1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLnN0aWxsVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaXRlcmF0b3Iuc3Vic2NyaWJlKGl0ZXJhdG9yLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlJbmFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLmNoZWNrSXRlcmF0b3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG4gICAgICAgIHZhciBsZW4gPSBpdGVyYXRvcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLmhhc1ZhbHVlID09PSAnZnVuY3Rpb24nICYmICFpdGVyYXRvci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzaG91bGRDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmhhc0NvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5fdHJ5cmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRDb21wbGV0ZSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeXJlc3VsdFNlbGVjdG9yID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0U2VsZWN0b3IuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIFppcFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFppcFN1YnNjcmliZXIgfTtcbnZhciBTdGF0aWNJdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0aWNJdGVyYXRvcihpdGVyYXRvcikge1xuICAgICAgICB0aGlzLml0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0YXRpY0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5uZXh0UmVzdWx0O1xuICAgICAgICB0aGlzLm5leHRSZXN1bHQgPSB0aGlzLml0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFN0YXRpY0l0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0UmVzdWx0ID0gdGhpcy5uZXh0UmVzdWx0O1xuICAgICAgICByZXR1cm4gbmV4dFJlc3VsdCAmJiBuZXh0UmVzdWx0LmRvbmU7XG4gICAgfTtcbiAgICByZXR1cm4gU3RhdGljSXRlcmF0b3I7XG59KCkpO1xudmFyIFN0YXRpY0FycmF5SXRlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGljQXJyYXlJdGVyYXRvcihhcnJheSkge1xuICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2xfaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIHJldHVybiBpIDwgdGhpcy5sZW5ndGggPyB7IHZhbHVlOiBhcnJheVtpXSwgZG9uZTogZmFsc2UgfSA6IHsgdmFsdWU6IG51bGwsIGRvbmU6IHRydWUgfTtcbiAgICB9O1xuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlLmhhc1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGggPiB0aGlzLmluZGV4O1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUuaGFzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGggPT09IHRoaXMuaW5kZXg7XG4gICAgfTtcbiAgICByZXR1cm4gU3RhdGljQXJyYXlJdGVyYXRvcjtcbn0oKSk7XG52YXIgWmlwQnVmZmVySXRlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoWmlwQnVmZmVySXRlcmF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWmlwQnVmZmVySXRlcmF0b3IoZGVzdGluYXRpb24sIHBhcmVudCwgb2JzZXJ2YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgX3RoaXMuc3RpbGxVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2xfaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwICYmIHRoaXMuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG51bGwsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBidWZmZXIuc2hpZnQoKSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLmhhc1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID4gMDtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDAgJiYgdGhpcy5pc0NvbXBsZXRlO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUluYWN0aXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2goaW5uZXJWYWx1ZSk7XG4gICAgICAgIHRoaXMucGFyZW50LmNoZWNrSXRlcmF0b3JzKCk7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgdGhpcy5vYnNlcnZhYmxlLCB0aGlzLCBpbmRleCk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwQnVmZmVySXRlcmF0b3I7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuUmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWIuYWRkKHRoaXMuc2NoZWR1bGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgbmV4dEhhbmRsZSA9IDE7XG52YXIgUkVTT0xWRUQgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7IHJldHVybiAvKkBfX1BVUkVfXyovIFByb21pc2UucmVzb2x2ZSgpOyB9KSgpO1xudmFyIGFjdGl2ZUhhbmRsZXMgPSB7fTtcbmZ1bmN0aW9uIGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpIHtcbiAgICBpZiAoaGFuZGxlIGluIGFjdGl2ZUhhbmRsZXMpIHtcbiAgICAgICAgZGVsZXRlIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCB2YXIgSW1tZWRpYXRlID0ge1xuICAgIHNldEltbWVkaWF0ZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBoYW5kbGUgPSBuZXh0SGFuZGxlKys7XG4gICAgICAgIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXSA9IHRydWU7XG4gICAgICAgIFJFU09MVkVELnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZSkgJiYgY2IoKTsgfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgfSxcbiAgICBjbGVhckltbWVkaWF0ZTogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKTtcbiAgICB9LFxufTtcbmV4cG9ydCB2YXIgVGVzdFRvb2xzID0ge1xuICAgIHBlbmRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFjdGl2ZUhhbmRsZXMpLmxlbmd0aDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1tZWRpYXRlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9JbW1lZGlhdGUsX0FzeW5jQWN0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbW1lZGlhdGUgfSBmcm9tICcuLi91dGlsL0ltbWVkaWF0ZSc7XG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xudmFyIEFzYXBBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXNhcEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2FwQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLnNjaGVkdWxlZCA9IEltbWVkaWF0ZS5zZXRJbW1lZGlhdGUoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCBudWxsKSkpO1xuICAgIH07XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkgfHwgKGRlbGF5ID09PSBudWxsICYmIHRoaXMuZGVsYXkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlci5hY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgSW1tZWRpYXRlLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBBc2FwQWN0aW9uO1xufShBc3luY0FjdGlvbikpO1xuZXhwb3J0IHsgQXNhcEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcEFjdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FzeW5jU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xudmFyIEFzYXBTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXNhcFNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2FwU2NoZWR1bGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFzYXBTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIGNvdW50ID0gYWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbiB8fCBhY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgrK2luZGV4IDwgY291bnQgJiYgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgY291bnQgJiYgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXNhcFNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFzYXBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzYXBTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9Bc2FwQWN0aW9uLF9Bc2FwU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFzYXBBY3Rpb24gfSBmcm9tICcuL0FzYXBBY3Rpb24nO1xuaW1wb3J0IHsgQXNhcFNjaGVkdWxlciB9IGZyb20gJy4vQXNhcFNjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzYXAgPSAvKkBfX1BVUkVfXyovIG5ldyBBc2FwU2NoZWR1bGVyKEFzYXBBY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNhcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2NvbmZpZyxfdXRpbF9ob3N0UmVwb3J0RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2hvc3RSZXBvcnRFcnJvcic7XG5leHBvcnQgdmFyIGVtcHR5ID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGF1ZGl0KGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYXVkaXRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgQXVkaXRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdWRpdE9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgQXVkaXRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEF1ZGl0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdE9wZXJhdG9yO1xufSgpKTtcbnZhciBBdWRpdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXVkaXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGl0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvblNlbGVjdG9yID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB2YWx1ZSA9IF9hLnZhbHVlLCBoYXNWYWx1ZSA9IF9hLmhhc1ZhbHVlLCB0aHJvdHRsZWQgPSBfYS50aHJvdHRsZWQ7XG4gICAgICAgIGlmICh0aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgfTtcbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyVGhyb3R0bGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2hlZHVsZXJfYXN5bmMsX2F1ZGl0LF9vYnNlcnZhYmxlX3RpbWVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGF1ZGl0IH0gZnJvbSAnLi9hdWRpdCc7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gJy4uL29ic2VydmFibGUvdGltZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGF1ZGl0VGltZShkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gYXVkaXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXIoZHVyYXRpb24sIHNjaGVkdWxlcik7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXRUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXIoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlck9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgQnVmZmVyT3BlcmF0b3IoY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJPcGVyYXRvcihjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5jbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nTm90aWZpZXI7XG4gICAgfVxuICAgIEJ1ZmZlck9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlck9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJDb3VudChidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0QnVmZmVyRXZlcnkgPT09IHZvaWQgMCkge1xuICAgICAgICBzdGFydEJ1ZmZlckV2ZXJ5ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlckNvdW50T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJDb3VudE9wZXJhdG9yKGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpKTtcbiAgICB9O1xufVxudmFyIEJ1ZmZlckNvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRPcGVyYXRvcihidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnk7XG4gICAgICAgIGlmICghc3RhcnRCdWZmZXJFdmVyeSB8fCBidWZmZXJTaXplID09PSBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJDbGFzcyA9IEJ1ZmZlckNvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlckNsYXNzID0gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBCdWZmZXJDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgdGhpcy5zdWJzY3JpYmVyQ2xhc3Moc3Vic2NyaWJlciwgdGhpcy5idWZmZXJTaXplLCB0aGlzLnN0YXJ0QnVmZmVyRXZlcnkpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJDb3VudFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckNvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyU2l6ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09IHRoaXMuYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG52YXIgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcbiAgICAgICAgX3RoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYnVmZmVyU2l6ZSA9IF9hLmJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkgPSBfYS5zdGFydEJ1ZmZlckV2ZXJ5LCBidWZmZXJzID0gX2EuYnVmZmVycywgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICBpZiAoY291bnQgJSBzdGFydEJ1ZmZlckV2ZXJ5ID09PSAwKSB7XG4gICAgICAgICAgICBidWZmZXJzLnB1c2goW10pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSBidWZmZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGJ1ZmZlcnMgPSBfYS5idWZmZXJzLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuICAgICAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVycy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyQ291bnQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9zY2hlZHVsZXJfYXN5bmMsX1N1YnNjcmliZXIsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVGltZShidWZmZXJUaW1lU3Bhbikge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBzY2hlZHVsZXIgPSBhc3luYztcbiAgICBpZiAoaXNTY2hlZHVsZXIoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgbGVuZ3RoLS07XG4gICAgfVxuICAgIHZhciBidWZmZXJDcmVhdGlvbkludGVydmFsID0gbnVsbDtcbiAgICBpZiAobGVuZ3RoID49IDIpIHtcbiAgICAgICAgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgdmFyIG1heEJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGxlbmd0aCA+PSAzKSB7XG4gICAgICAgIG1heEJ1ZmZlclNpemUgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBidWZmZXJUaW1lT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJUaW1lT3BlcmF0b3IoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIG1heEJ1ZmZlclNpemUsIHNjaGVkdWxlcikpO1xuICAgIH07XG59XG52YXIgQnVmZmVyVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgbWF4QnVmZmVyU2l6ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyVGltZVNwYW4gPSBidWZmZXJUaW1lU3BhbjtcbiAgICAgICAgdGhpcy5idWZmZXJDcmVhdGlvbkludGVydmFsID0gYnVmZmVyQ3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgdGhpcy5tYXhCdWZmZXJTaXplID0gbWF4QnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIEJ1ZmZlclRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEJ1ZmZlclRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYnVmZmVyVGltZVNwYW4sIHRoaXMuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgdGhpcy5tYXhCdWZmZXJTaXplLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgQ29udGV4dCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gQ29udGV4dDtcbn0oKSk7XG52YXIgQnVmZmVyVGltZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGJ1ZmZlclRpbWVTcGFuLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBtYXhCdWZmZXJTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlclRpbWVTcGFuID0gYnVmZmVyVGltZVNwYW47XG4gICAgICAgIF90aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuICAgICAgICBfdGhpcy5tYXhCdWZmZXJTaXplID0gbWF4QnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzLm9wZW5Db250ZXh0KCk7XG4gICAgICAgIF90aGlzLnRpbWVzcGFuT25seSA9IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPT0gbnVsbCB8fCBidWZmZXJDcmVhdGlvbkludGVydmFsIDwgMDtcbiAgICAgICAgaWYgKF90aGlzLnRpbWVzcGFuT25seSkge1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgY29udGV4dDogY29udGV4dCwgYnVmZmVyVGltZVNwYW46IGJ1ZmZlclRpbWVTcGFuIH07XG4gICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC5jbG9zZUFjdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VTdGF0ZSA9IHsgc3Vic2NyaWJlcjogX3RoaXMsIGNvbnRleHQ6IGNvbnRleHQgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw6IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IF90aGlzLCBzY2hlZHVsZXI6IHNjaGVkdWxlciB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDbG9zZSwgYnVmZmVyVGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDcmVhdGlvbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgY3JlYXRpb25TdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgIHZhciBmaWxsZWRCdWZmZXJDb250ZXh0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xID0gY29udGV4dHNbaV07XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gY29udGV4dF8xLmJ1ZmZlcjtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09IHRoaXMubWF4QnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIGZpbGxlZEJ1ZmZlckNvbnRleHQgPSBjb250ZXh0XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGxlZEJ1ZmZlckNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMub25CdWZmZXJGdWxsKGZpbGxlZEJ1ZmZlckNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGNvbnRleHRzID0gX2EuY29udGV4dHMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChjb250ZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8yID0gY29udGV4dHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoY29udGV4dF8yLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9uQnVmZmVyRnVsbCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2xvc2VDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICB2YXIgY2xvc2VBY3Rpb24gPSBjb250ZXh0LmNsb3NlQWN0aW9uO1xuICAgICAgICBjbG9zZUFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnJlbW92ZShjbG9zZUFjdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQgJiYgdGhpcy50aW1lc3Bhbk9ubHkpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzLm9wZW5Db250ZXh0KCk7XG4gICAgICAgICAgICB2YXIgYnVmZmVyVGltZVNwYW4gPSB0aGlzLmJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCBjb250ZXh0OiBjb250ZXh0LCBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4gfTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgpO1xuICAgICAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChjb250ZXh0LmJ1ZmZlcik7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBzcGxpY2VJbmRleCA9IGNvbnRleHRzID8gY29udGV4dHMuaW5kZXhPZihjb250ZXh0KSA6IC0xO1xuICAgICAgICBpZiAoc3BsaWNlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29udGV4dHMuc3BsaWNlKGNvbnRleHRzLmluZGV4T2YoY29udGV4dCksIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyVGltZVNwYW5Pbmx5KHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHN0YXRlLmNvbnRleHQ7XG4gICAgaWYgKHByZXZDb250ZXh0KSB7XG4gICAgICAgIHN1YnNjcmliZXIuY2xvc2VDb250ZXh0KHByZXZDb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBzdGF0ZS5jb250ZXh0ID0gc3Vic2NyaWJlci5vcGVuQ29udGV4dCgpO1xuICAgICAgICBzdGF0ZS5jb250ZXh0LmNsb3NlQWN0aW9uID0gdGhpcy5zY2hlZHVsZShzdGF0ZSwgc3RhdGUuYnVmZmVyVGltZVNwYW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIGJ1ZmZlclRpbWVTcGFuID0gc3RhdGUuYnVmZmVyVGltZVNwYW4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG4gICAgdmFyIGNvbnRleHQgPSBzdWJzY3JpYmVyLm9wZW5Db250ZXh0KCk7XG4gICAgdmFyIGFjdGlvbiA9IHRoaXM7XG4gICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChjb250ZXh0LmNsb3NlQWN0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyQ2xvc2UsIGJ1ZmZlclRpbWVTcGFuLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvbnRleHQ6IGNvbnRleHQgfSkpO1xuICAgICAgICBhY3Rpb24uc2NoZWR1bGUoc3RhdGUsIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ2xvc2UoYXJnKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlciwgY29udGV4dCA9IGFyZy5jb250ZXh0O1xuICAgIHN1YnNjcmliZXIuY2xvc2VDb250ZXh0KGNvbnRleHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfT3V0ZXJTdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyVG9nZ2xlT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJUb2dnbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICBfdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIG9wZW5pbmdzKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29udGV4dHNbaV0uYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHdoaWxlIChjb250ZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xID0gY29udGV4dHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnRleHRfMS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGNvbnRleHRfMS5idWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgY29udGV4dF8xLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzIgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGNvbnRleHRfMi5idWZmZXIpO1xuICAgICAgICAgICAgY29udGV4dF8yLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgY29udGV4dF8yLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBjb250ZXh0XzIuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgb3V0ZXJWYWx1ZSA/IHRoaXMuY2xvc2VCdWZmZXIob3V0ZXJWYWx1ZSkgOiB0aGlzLm9wZW5CdWZmZXIoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmNsb3NlQnVmZmVyKGlubmVyU3ViLmNvbnRleHQpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbkJ1ZmZlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdTZWxlY3RvciA9IHRoaXMuY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdTZWxlY3Rvci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZShjbG9zaW5nTm90aWZpZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlQnVmZmVyID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzICYmIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBjb250ZXh0LmJ1ZmZlciwgc3Vic2NyaXB0aW9uID0gY29udGV4dC5zdWJzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIGNvbnRleHRzLnNwbGljZShjb250ZXh0cy5pbmRleE9mKGNvbnRleHQpLCAxKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKGNsb3NpbmdOb3RpZmllcikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0geyBidWZmZXI6IGJ1ZmZlciwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfTtcbiAgICAgICAgY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24sX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcldoZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJXaGVuT3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJXaGVuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyV2hlbk9wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgQnVmZmVyV2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyV2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJXaGVuT3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlcldoZW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlcldoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlcldoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMub3BlbkJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoY2xvc2luZ1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2luZ1N1YnNjcmlwdGlvbiA9IGNsb3NpbmdTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuYWRkKGNsb3NpbmdTdWJzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi5hZGQoc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBjYXRjaEVycm9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNhdGNoRXJyb3JPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICB2YXIgb3BlcmF0b3IgPSBuZXcgQ2F0Y2hPcGVyYXRvcihzZWxlY3Rvcik7XG4gICAgICAgIHZhciBjYXVnaHQgPSBzb3VyY2UubGlmdChvcGVyYXRvcik7XG4gICAgICAgIHJldHVybiAob3BlcmF0b3IuY2F1Z2h0ID0gY2F1Z2h0KTtcbiAgICB9O1xufVxudmFyIENhdGNoT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2F0Y2hPcGVyYXRvcihzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfVxuICAgIENhdGNoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDYXRjaFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5zZWxlY3RvciwgdGhpcy5jYXVnaHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBDYXRjaE9wZXJhdG9yO1xufSgpKTtcbnZhciBDYXRjaFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ2F0Y2hTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENhdGNoU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgc2VsZWN0b3IsIGNhdWdodCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY2F1Z2h0ID0gY2F1Z2h0O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENhdGNoU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0b3IoZXJyLCB0aGlzLmNhdWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyMikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnIyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDYXRjaFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2hFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfY29tYmluZUxhdGVzdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVBbGwocHJvamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgQ29tYmluZUxhdGVzdE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVBbGwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2lzQXJyYXksX29ic2VydmFibGVfY29tYmluZUxhdGVzdCxfb2JzZXJ2YWJsZV9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgQ29tYmluZUxhdGVzdE9wZXJhdG9yIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xudmFyIG5vbmUgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBwcm9qZWN0ID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb2plY3QgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdC5jYWxsKGZyb20oW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSksIG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfY29uY2F0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmNhdCBhcyBjb25jYXRTdGF0aWMgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdC5jYWxsKGNvbmNhdFN0YXRpYy5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlTWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCAxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2NvbmNhdE1hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25jYXRNYXAgfSBmcm9tICcuL2NvbmNhdE1hcCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0TWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBjb25jYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3Rvcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXBUby5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjb3VudChwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IENvdW50T3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UpKTsgfTtcbn1cbnZhciBDb3VudE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvdW50T3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIENvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlQcmVkaWNhdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlKHZhbHVlLCB0aGlzLmluZGV4KyssIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuY291bnQpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVib3VuY2VPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSk7IH07XG59XG52YXIgRGVib3VuY2VPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlYm91bmNlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWJvdW5jZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVib3VuY2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlYm91bmNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyeU5leHQodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBkdXJhdGlvbik7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLmVtaXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfc2NoZWR1bGVyX2FzeW5jIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2VUaW1lKGR1ZVRpbWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWJvdW5jZVRpbWVPcGVyYXRvcihkdWVUaW1lLCBzY2hlZHVsZXIpKTsgfTtcbn1cbnZhciBEZWJvdW5jZVRpbWVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVPcGVyYXRvcihkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5kdWVUaW1lID0gZHVlVGltZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIERlYm91bmNlVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVib3VuY2VUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1ZVRpbWUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VUaW1lT3BlcmF0b3I7XG59KCkpO1xudmFyIERlYm91bmNlVGltZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVib3VuY2VUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIF90aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG4gICAgICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkZCh0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdWVUaW1lLCB0aGlzKSk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkTmV4dCgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5kZWJvdW5jZWROZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBsYXN0VmFsdWUgPSB0aGlzLmxhc3RWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChsYXN0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhckRlYm91bmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChkZWJvdW5jZWRTdWJzY3JpcHRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGRlYm91bmNlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBkZWJvdW5jZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChzdWJzY3JpYmVyKSB7XG4gICAgc3Vic2NyaWJlci5kZWJvdW5jZWROZXh0KCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVmYXVsdElmRW1wdHlPcGVyYXRvcihkZWZhdWx0VmFsdWUpKTsgfTtcbn1cbnZhciBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5T3BlcmF0b3IoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVmYXVsdFZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICBfdGhpcy5pc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdElmRW1wdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4oK3ZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3NjaGVkdWxlcl9hc3luYyxfdXRpbF9pc0RhdGUsX1N1YnNjcmliZXIsX05vdGlmaWNhdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNEYXRlIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGUnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheShkZWxheSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICB2YXIgYWJzb2x1dGVEZWxheSA9IGlzRGF0ZShkZWxheSk7XG4gICAgdmFyIGRlbGF5Rm9yID0gYWJzb2x1dGVEZWxheSA/ICgrZGVsYXkgLSBzY2hlZHVsZXIubm93KCkpIDogTWF0aC5hYnMoZGVsYXkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVsYXlPcGVyYXRvcihkZWxheUZvciwgc2NoZWR1bGVyKSk7IH07XG59XG52YXIgRGVsYXlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheU9wZXJhdG9yKGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlbGF5LCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5T3BlcmF0b3I7XG59KCkpO1xudmFyIERlbGF5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWxheVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVsYXlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWxheSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLnF1ZXVlID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5lcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVsYXlTdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zb3VyY2U7XG4gICAgICAgIHZhciBxdWV1ZSA9IHNvdXJjZS5xdWV1ZTtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gc3RhdGUuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwICYmIChxdWV1ZVswXS50aW1lIC0gc2NoZWR1bGVyLm5vdygpKSA8PSAwKSB7XG4gICAgICAgICAgICBxdWV1ZS5zaGlmdCgpLm5vdGlmaWNhdGlvbi5vYnNlcnZlKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGRlbGF5XzEgPSBNYXRoLm1heCgwLCBxdWV1ZVswXS50aW1lIC0gc2NoZWR1bGVyLm5vdygpKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIGRlbGF5XzEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgc291cmNlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9zY2hlZHVsZSA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKERlbGF5U3Vic2NyaWJlci5kaXNwYXRjaCwgdGhpcy5kZWxheSwge1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLCBkZXN0aW5hdGlvbjogdGhpcy5kZXN0aW5hdGlvbiwgc2NoZWR1bGVyOiBzY2hlZHVsZXJcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgRGVsYXlNZXNzYWdlKHNjaGVkdWxlci5ub3coKSArIHRoaXMuZGVsYXksIG5vdGlmaWNhdGlvbik7XG4gICAgICAgIHRoaXMucXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGUoc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0KHZhbHVlKSk7XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5lcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSgpKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xudmFyIERlbGF5TWVzc2FnZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheU1lc3NhZ2UodGltZSwgbm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gRGVsYXlNZXNzYWdlO1xufSgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfT2JzZXJ2YWJsZSxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgIGlmIChzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUoc291cmNlLCBzdWJzY3JpcHRpb25EZWxheSlcbiAgICAgICAgICAgICAgICAubGlmdChuZXcgRGVsYXlXaGVuT3BlcmF0b3IoZGVsYXlEdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVsYXlXaGVuT3BlcmF0b3IoZGVsYXlEdXJhdGlvblNlbGVjdG9yKSk7IH07XG59XG52YXIgRGVsYXlXaGVuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlXaGVuT3BlcmF0b3IoZGVsYXlEdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuZGVsYXlEdXJhdGlvblNlbGVjdG9yID0gZGVsYXlEdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBEZWxheVdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlbGF5V2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWxheVdoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVsYXlXaGVuU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWxheVdoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlbGF5V2hlblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGRlbGF5RHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVsYXlEdXJhdGlvblNlbGVjdG9yID0gZGVsYXlEdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KG91dGVyVmFsdWUpO1xuICAgICAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihpbm5lclN1Yik7XG4gICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihpbm5lclN1Yik7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlOb3RpZmllciA9IHRoaXMuZGVsYXlEdXJhdGlvblNlbGVjdG9yKHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAoZGVsYXlOb3RpZmllcikge1xuICAgICAgICAgICAgICAgIHRoaXMudHJ5RGVsYXkoZGVsYXlOb3RpZmllciwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUucmVtb3ZlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbklkeCA9IHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLm91dGVyVmFsdWU7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS50cnlEZWxheSA9IGZ1bmN0aW9uIChkZWxheU5vdGlmaWVyLCB2YWx1ZSkge1xuICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBkZWxheU5vdGlmaWVyLCB2YWx1ZSk7XG4gICAgICAgIGlmIChub3RpZmllclN1YnNjcmlwdGlvbiAmJiAhbm90aWZpZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMucHVzaChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnRyeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQgJiYgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlbGF5V2hlblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xudmFyIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlKHNvdXJjZSwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25EZWxheSA9IHN1YnNjcmlwdGlvbkRlbGF5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uRGVsYXkuc3Vic2NyaWJlKG5ldyBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGU7XG59KE9ic2VydmFibGUpKTtcbnZhciBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihwYXJlbnQsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc291cmNlU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodW51c2VkKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Tb3VyY2UoKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMucGFyZW50LmVycm9yKGVycik7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc291cmNlU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnN1YnNjcmliZSh0aGlzLnBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5V2hlbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZW1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkZW1hdGVyaWFsaXplT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG4gICAgfTtcbn1cbnZhciBEZU1hdGVyaWFsaXplT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBEZU1hdGVyaWFsaXplT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVNYXRlcmlhbGl6ZU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZU1hdGVyaWFsaXplU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZU1hdGVyaWFsaXplU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgfVxuICAgIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YWx1ZS5vYnNlcnZlKHRoaXMuZGVzdGluYXRpb24pO1xuICAgIH07XG4gICAgcmV0dXJuIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZW1hdGVyaWFsaXplLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdChrZXlTZWxlY3RvciwgZmx1c2hlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGlzdGluY3RPcGVyYXRvcihrZXlTZWxlY3RvciwgZmx1c2hlcykpOyB9O1xufVxudmFyIERpc3RpbmN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RPcGVyYXRvcihrZXlTZWxlY3RvciwgZmx1c2hlcykge1xuICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZmx1c2hlcyA9IGZsdXNoZXM7XG4gICAgfVxuICAgIERpc3RpbmN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEaXN0aW5jdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5rZXlTZWxlY3RvciwgdGhpcy5mbHVzaGVzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGlzdGluY3RPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGlzdGluY3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERpc3RpbmN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmIChmbHVzaGVzKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIGZsdXNoZXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnZhbHVlcy5jbGVhcigpO1xuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5rZXlTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5fdXNlS2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZmluYWxpemVOZXh0KHZhbHVlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUuX3VzZUtleVNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBrZXkgPSB0aGlzLmtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplTmV4dChrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIERpc3RpbmN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2ZpbmFsaXplTmV4dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgaWYgKCF2YWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHZhbHVlcy5hZGQoa2V5KTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgRGlzdGluY3RTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3RvcikpOyB9O1xufVxudmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgfVxuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb21wYXJlLCB0aGlzLmtleVNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbXBhcmUsIGtleVNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5oYXNLZXkgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBfdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4ID09PSB5O1xuICAgIH07XG4gICAgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGtleVNlbGVjdG9yID0gdGhpcy5rZXlTZWxlY3RvcjtcbiAgICAgICAgICAgIGtleSA9IGtleVNlbGVjdG9yID8ga2V5U2VsZWN0b3IodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0tleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZSA9IHRoaXMuY29tcGFyZTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlKHRoaXMua2V5LCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhc0tleSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbENoYW5nZWQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9kaXN0aW5jdFVudGlsQ2hhbmdlZCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJy4vZGlzdGluY3RVbnRpbENoYW5nZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKGtleSwgY29tcGFyZSkge1xuICAgIHJldHVybiBkaXN0aW5jdFVudGlsQ2hhbmdlZChmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gY29tcGFyZSA/IGNvbXBhcmUoeFtrZXldLCB5W2tleV0pIDogeFtrZXldID09PSB5W2tleV07IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbEtleUNoYW5nZWQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX0VtcHR5RXJyb3IsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEVtcHR5RXJyb3IgfSBmcm9tICcuLi91dGlsL0VtcHR5RXJyb3InO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93SWZFbXB0eShlcnJvckZhY3RvcnkpIHtcbiAgICBpZiAoZXJyb3JGYWN0b3J5ID09PSB2b2lkIDApIHtcbiAgICAgICAgZXJyb3JGYWN0b3J5ID0gZGVmYXVsdEVycm9yRmFjdG9yeTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUaHJvd0lmRW1wdHlPcGVyYXRvcihlcnJvckZhY3RvcnkpKTtcbiAgICB9O1xufVxudmFyIFRocm93SWZFbXB0eU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm93SWZFbXB0eU9wZXJhdG9yKGVycm9yRmFjdG9yeSkge1xuICAgICAgICB0aGlzLmVycm9yRmFjdG9yeSA9IGVycm9yRmFjdG9yeTtcbiAgICB9XG4gICAgVGhyb3dJZkVtcHR5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZXJyb3JGYWN0b3J5KSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3dJZkVtcHR5T3BlcmF0b3I7XG59KCkpO1xudmFyIFRocm93SWZFbXB0eVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGhyb3dJZkVtcHR5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBlcnJvckZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVycm9yRmFjdG9yeSA9IGVycm9yRmFjdG9yeTtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaHJvd0lmRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFRocm93SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlcnIgPSB0aGlzLmVycm9yRmFjdG9yeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRocm93SWZFbXB0eVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBFbXB0eUVycm9yKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0lmRW1wdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF91dGlsX0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLF9vYnNlcnZhYmxlX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvciB9IGZyb20gJy4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiB0YWtlKGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGFrZU9wZXJhdG9yKGNvdW50KSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIFRha2VPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlT3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBpZiAodGhpcy50b3RhbCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUYWtlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUYWtlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnRvdGFsKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZU9wZXJhdG9yO1xufSgpKTtcbnZhciBUYWtlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYWtlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbDtcbiAgICAgICAgdmFyIGNvdW50ID0gKyt0aGlzLmNvdW50O1xuICAgICAgICBpZiAoY291bnQgPD0gdG90YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IHRvdGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRha2VTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcixfZmlsdGVyLF90aHJvd0lmRW1wdHksX2RlZmF1bHRJZkVtcHR5LF90YWtlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlcic7XG5pbXBvcnQgeyB0aHJvd0lmRW1wdHkgfSBmcm9tICcuL3Rocm93SWZFbXB0eSc7XG5pbXBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4vZGVmYXVsdElmRW1wdHknO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJy4vdGFrZSc7XG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudEF0KGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UucGlwZShmaWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGkgPT09IGluZGV4OyB9KSwgdGFrZSgxKSwgaGFzRGVmYXVsdFZhbHVlXG4gICAgICAgICAgICA/IGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgIDogdGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcigpOyB9KSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZW1lbnRBdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfY29uY2F0LF9vYnNlcnZhYmxlX29mIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmltcG9ydCB7IG9mIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9vZic7XG5leHBvcnQgZnVuY3Rpb24gZW5kV2l0aCgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcnJheVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0KHNvdXJjZSwgb2YuYXBwbHkodm9pZCAwLCBhcnJheSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5kV2l0aC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBldmVyeShwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEV2ZXJ5T3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnLCBzb3VyY2UpKTsgfTtcbn1cbnZhciBFdmVyeU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZXJ5T3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBFdmVyeU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEV2ZXJ5U3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMudGhpc0FyZywgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVyeU9wZXJhdG9yO1xufSgpKTtcbnZhciBFdmVyeVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRXZlcnlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV2ZXJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZyB8fCBfdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZXJ5VmFsdWVNYXRjaCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoZXZlcnlWYWx1ZU1hdGNoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZS5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuaW5kZXgrKywgdGhpcy5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZXJ5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlcnkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGV4aGF1c3QoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTd2l0Y2hGaXJzdE9wZXJhdG9yKCkpOyB9O1xufVxudmFyIFN3aXRjaEZpcnN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dpdGNoRmlyc3RPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgU3dpdGNoRmlyc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN3aXRjaEZpcnN0U3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoRmlyc3RPcGVyYXRvcjtcbn0oKSk7XG52YXIgU3dpdGNoRmlyc3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN3aXRjaEZpcnN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTd2l0Y2hGaXJzdFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNTdWJzY3JpcHRpb24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTd2l0Y2hGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuaGFzU3Vic2NyaXB0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN3aXRjaEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoRmlyc3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX0lubmVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfbWFwLF9vYnNlcnZhYmxlX2Zyb20gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGV4aGF1c3RNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKGV4aGF1c3RNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb20ocHJvamVjdChhLCBpKSkucGlwZShtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKTsgfSkpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEV4aGF1c3RNYXBPcGVyYXRvcihwcm9qZWN0KSk7XG4gICAgfTtcbn1cbnZhciBFeGhhdXN0TWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXhoYXVzdE1hcE9wZXJhdG9yKHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB9XG4gICAgRXhoYXVzdE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRXhoYXVzdE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXhoYXVzdE1hcE9wZXJhdG9yO1xufSgpKTtcbnZhciBFeGhhdXN0TWFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFeGhhdXN0TWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFeGhhdXN0TWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRyeU5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYXNTdWJzY3JpcHRpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5oYXNTdWJzY3JpcHRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFeGhhdXN0TWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0TWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBleHBhbmQocHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25jdXJyZW50ID0gKGNvbmN1cnJlbnQgfHwgMCkgPCAxID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogY29uY3VycmVudDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikpOyB9O1xufVxudmFyIEV4cGFuZE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRXhwYW5kT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBFeHBhbmRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy5jb25jdXJyZW50LCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEV4cGFuZE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IEV4cGFuZE9wZXJhdG9yIH07XG52YXIgRXhwYW5kU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFeHBhbmRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV4cGFuZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChjb25jdXJyZW50IDwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XG4gICAgICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV4cGFuZFN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXIsIHJlc3VsdCA9IGFyZy5yZXN1bHQsIHZhbHVlID0gYXJnLnZhbHVlLCBpbmRleCA9IGFyZy5pbmRleDtcbiAgICAgICAgc3Vic2NyaWJlci5zdWJzY3JpYmVUb1Byb2plY3Rpb24ocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0O1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvUHJvamVjdGlvbihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIHJlc3VsdDogcmVzdWx0LCB2YWx1ZTogdmFsdWUsIGluZGV4OiBpbmRleCB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMSA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzEuYWRkKHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKEV4cGFuZFN1YnNjcmliZXIuZGlzcGF0Y2gsIDAsIHN0YXRlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1Byb2plY3Rpb24gPSBmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdmFsdWUsIGluZGV4KSk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkICYmIHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KGJ1ZmZlci5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV4cGFuZFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgRXhwYW5kU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwYW5kLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaW5hbGx5T3BlcmF0b3IoY2FsbGJhY2spKTsgfTtcbn1cbnZhciBGaW5hbGx5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmluYWxseU9wZXJhdG9yKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgRmluYWxseU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRmluYWxseVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jYWxsYmFjaykpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbmFsbHlPcGVyYXRvcjtcbn0oKSk7XG52YXIgRmluYWxseVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmluYWxseVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmluYWxseVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hZGQobmV3IFN1YnNjcmlwdGlvbihjYWxsYmFjaykpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBGaW5hbGx5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluYWxpemUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaW5kVmFsdWVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSwgZmFsc2UsIHRoaXNBcmcpKTsgfTtcbn1cbnZhciBGaW5kVmFsdWVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaW5kVmFsdWVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSwgeWllbGRJbmRleCwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMueWllbGRJbmRleCA9IHlpZWxkSW5kZXg7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgfVxuICAgIEZpbmRWYWx1ZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEZpbmRWYWx1ZVN1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnNvdXJjZSwgdGhpcy55aWVsZEluZGV4LCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBGaW5kVmFsdWVPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBGaW5kVmFsdWVPcGVyYXRvciB9O1xudmFyIEZpbmRWYWx1ZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmluZFZhbHVlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaW5kVmFsdWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHNvdXJjZSwgeWllbGRJbmRleCwgdGhpc0FyZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnlpZWxkSW5kZXggPSB5aWVsZEluZGV4O1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpbmRWYWx1ZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBGaW5kVmFsdWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcmVkaWNhdGUgPSBfYS5wcmVkaWNhdGUsIHRoaXNBcmcgPSBfYS50aGlzQXJnO1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJlZGljYXRlLmNhbGwodGhpc0FyZyB8fCB0aGlzLCB2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKHRoaXMueWllbGRJbmRleCA/IGluZGV4IDogdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmluZFZhbHVlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKHRoaXMueWllbGRJbmRleCA/IC0xIDogdW5kZWZpbmVkKTtcbiAgICB9O1xuICAgIHJldHVybiBGaW5kVmFsdWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBGaW5kVmFsdWVTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5kLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb3BlcmF0b3JzX2ZpbmQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgRmluZFZhbHVlT3BlcmF0b3IgfSBmcm9tICcuLi9vcGVyYXRvcnMvZmluZCc7XG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRmluZFZhbHVlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UsIHRydWUsIHRoaXNBcmcpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmRJbmRleC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfRW1wdHlFcnJvcixfZmlsdGVyLF90YWtlLF9kZWZhdWx0SWZFbXB0eSxfdGhyb3dJZkVtcHR5LF91dGlsX2lkZW50aXR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEVtcHR5RXJyb3IgfSBmcm9tICcuLi91dGlsL0VtcHR5RXJyb3InO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJy4vdGFrZSc7XG5pbXBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4vZGVmYXVsdElmRW1wdHknO1xuaW1wb3J0IHsgdGhyb3dJZkVtcHR5IH0gZnJvbSAnLi90aHJvd0lmRW1wdHknO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBmaXJzdChwcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKHByZWRpY2F0ZSA/IGZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gcHJlZGljYXRlKHYsIGksIHNvdXJjZSk7IH0pIDogaWRlbnRpdHksIHRha2UoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVtcHR5RXJyb3IoKTsgfSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmlyc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gaWdub3JlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBJZ25vcmVFbGVtZW50c09wZXJhdG9yKCkpO1xuICAgIH07XG59XG52YXIgSWdub3JlRWxlbWVudHNPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJZ25vcmVFbGVtZW50c09wZXJhdG9yKCkge1xuICAgIH1cbiAgICBJZ25vcmVFbGVtZW50c09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBJZ25vcmVFbGVtZW50c09wZXJhdG9yO1xufSgpKTtcbnZhciBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHVudXNlZCkge1xuICAgIH07XG4gICAgcmV0dXJuIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWdub3JlRWxlbWVudHMuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IElzRW1wdHlPcGVyYXRvcigpKTsgfTtcbn1cbnZhciBJc0VtcHR5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSXNFbXB0eU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBJc0VtcHR5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgSXNFbXB0eVN1YnNjcmliZXIob2JzZXJ2ZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBJc0VtcHR5T3BlcmF0b3I7XG59KCkpO1xudmFyIElzRW1wdHlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElzRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElzRW1wdHlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICB9XG4gICAgSXNFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlzRW1wdHkpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChpc0VtcHR5KTtcbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIElzRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKGZhbHNlKTtcbiAgICB9O1xuICAgIElzRW1wdHlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gSXNFbXB0eVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRW1wdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF91dGlsX0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLF9vYnNlcnZhYmxlX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvciB9IGZyb20gJy4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGFzdChjb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiB0YWtlTGFzdE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VMYXN0T3BlcmF0b3IoY291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgVGFrZUxhc3RPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlTGFzdE9wZXJhdG9yKHRvdGFsKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgaWYgKHRoaXMudG90YWwgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVGFrZUxhc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VMYXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnRvdGFsKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZUxhc3RPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZUxhc3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRha2VMYXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlTGFzdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBfdGhpcy5yaW5nID0gbmV3IEFycmF5KCk7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByaW5nID0gdGhpcy5yaW5nO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnRvdGFsO1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmNvdW50Kys7XG4gICAgICAgIGlmIChyaW5nLmxlbmd0aCA8IHRvdGFsKSB7XG4gICAgICAgICAgICByaW5nLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gY291bnQgJSB0b3RhbDtcbiAgICAgICAgICAgIHJpbmdbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRha2VMYXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmNvdW50ID49IHRoaXMudG90YWwgPyB0aGlzLnRvdGFsIDogdGhpcy5jb3VudDtcbiAgICAgICAgICAgIHZhciByaW5nID0gdGhpcy5yaW5nO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IChjb3VudCsrKSAlIHRvdGFsO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQocmluZ1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VMYXN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZUxhc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX0VtcHR5RXJyb3IsX2ZpbHRlcixfdGFrZUxhc3QsX3Rocm93SWZFbXB0eSxfZGVmYXVsdElmRW1wdHksX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4uL3V0aWwvRW1wdHlFcnJvcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlcic7XG5pbXBvcnQgeyB0YWtlTGFzdCB9IGZyb20gJy4vdGFrZUxhc3QnO1xuaW1wb3J0IHsgdGhyb3dJZkVtcHR5IH0gZnJvbSAnLi90aHJvd0lmRW1wdHknO1xuaW1wb3J0IHsgZGVmYXVsdElmRW1wdHkgfSBmcm9tICcuL2RlZmF1bHRJZkVtcHR5JztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbGFzdChwcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKHByZWRpY2F0ZSA/IGZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gcHJlZGljYXRlKHYsIGksIHNvdXJjZSk7IH0pIDogaWRlbnRpdHksIHRha2VMYXN0KDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIDogdGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBFbXB0eUVycm9yKCk7IH0pKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwVG8odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE1hcFRvT3BlcmF0b3IodmFsdWUpKTsgfTtcbn1cbnZhciBNYXBUb09wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcFRvT3BlcmF0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBNYXBUb09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWFwVG9TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBUb09wZXJhdG9yO1xufSgpKTtcbnZhciBNYXBUb1N1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWFwVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hcFRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBUb1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfTm90aWZpY2F0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuLi9Ob3RpZmljYXRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBtYXRlcmlhbGl6ZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTWF0ZXJpYWxpemVPcGVyYXRvcigpKTtcbiAgICB9O1xufVxudmFyIE1hdGVyaWFsaXplT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWF0ZXJpYWxpemVPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgTWF0ZXJpYWxpemVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWF0ZXJpYWxpemVPcGVyYXRvcjtcbn0oKSk7XG52YXIgTWF0ZXJpYWxpemVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1hdGVyaWFsaXplU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yKGVycikpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hdGVyaWFsaXplU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0ZXJpYWxpemUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHZhciBoYXNTZWVkID0gZmFsc2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICBoYXNTZWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNjYW5PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCkpO1xuICAgIH07XG59XG52YXIgU2Nhbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCkge1xuICAgICAgICBpZiAoaGFzU2VlZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBoYXNTZWVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xuICAgICAgICB0aGlzLmhhc1NlZWQgPSBoYXNTZWVkO1xuICAgIH1cbiAgICBTY2FuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTY2FuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmFjY3VtdWxhdG9yLCB0aGlzLnNlZWQsIHRoaXMuaGFzU2VlZCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNjYW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgU2NhblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2NhblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBfc2VlZCwgaGFzU2VlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgX3RoaXMuX3NlZWQgPSBfc2VlZDtcbiAgICAgICAgX3RoaXMuaGFzU2VlZCA9IGhhc1NlZWQ7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NhblN1YnNjcmliZXIucHJvdG90eXBlLCBcInNlZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNTZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NlZWQgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTZWVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmFjY3VtdWxhdG9yKHRoaXMuc2VlZCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVkID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nhbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjYW4sX3Rha2VMYXN0LF9kZWZhdWx0SWZFbXB0eSxfdXRpbF9waXBlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHNjYW4gfSBmcm9tICcuL3NjYW4nO1xuaW1wb3J0IHsgdGFrZUxhc3QgfSBmcm9tICcuL3Rha2VMYXN0JztcbmltcG9ydCB7IGRlZmF1bHRJZkVtcHR5IH0gZnJvbSAnLi9kZWZhdWx0SWZFbXB0eSc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi4vdXRpbC9waXBlJztcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2UoYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZWR1Y2VPcGVyYXRvckZ1bmN0aW9uV2l0aFNlZWQoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwZShzY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSwgdGFrZUxhc3QoMSksIGRlZmF1bHRJZkVtcHR5KHNlZWQpKShzb3VyY2UpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcmVkdWNlT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHBpcGUoc2NhbihmdW5jdGlvbiAoYWNjLCB2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGFjY3VtdWxhdG9yKGFjYywgdmFsdWUsIGluZGV4ICsgMSk7IH0pLCB0YWtlTGFzdCgxKSkoc291cmNlKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdWNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfcmVkdWNlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlJztcbmV4cG9ydCBmdW5jdGlvbiBtYXgoY29tcGFyZXIpIHtcbiAgICB2YXIgbWF4ID0gKHR5cGVvZiBjb21wYXJlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgPyBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gY29tcGFyZXIoeCwgeSkgPiAwID8geCA6IHk7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4geCA+IHkgPyB4IDogeTsgfTtcbiAgICByZXR1cm4gcmVkdWNlKG1heCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXguanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX21lcmdlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlIGFzIG1lcmdlU3RhdGljIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9tZXJnZSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwobWVyZ2VTdGF0aWMuYXBwbHkodm9pZCAwLCBbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlTWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9PdXRlclN1YnNjcmliZXIsX0lubmVyU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2NhbihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNZXJnZVNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkpOyB9O1xufVxudmFyIE1lcmdlU2Nhbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSB7XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICB9XG4gICAgTWVyZ2VTY2FuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNZXJnZVNjYW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWNjdW11bGF0b3IsIHRoaXMuc2VlZCwgdGhpcy5jb25jdXJyZW50KSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VTY2FuT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgTWVyZ2VTY2FuT3BlcmF0b3IgfTtcbnZhciBNZXJnZVNjYW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1lcmdlU2NhblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVyZ2VTY2FuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWNjdW11bGF0b3IsIGFjYywgY29uY3VycmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgX3RoaXMuYWNjID0gYWNjO1xuICAgICAgICBfdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWVyZ2VTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgdmFyIGlzaCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjY3VtdWxhdG9yID0gdGhpcy5hY2N1bXVsYXRvcjtcbiAgICAgICAgICAgICAgICBpc2ggPSBhY2N1bXVsYXRvcih0aGlzLmFjYywgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgICAgIHRoaXMuX2lubmVyU3ViKGlzaCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAoaXNoLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIodGhpcywgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGlzaCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbiAhPT0gaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuYWNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuYWNjID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmFjYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZVNjYW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE1lcmdlU2NhblN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlU2Nhbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3JlZHVjZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZSc7XG5leHBvcnQgZnVuY3Rpb24gbWluKGNvbXBhcmVyKSB7XG4gICAgdmFyIG1pbiA9ICh0eXBlb2YgY29tcGFyZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgID8gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIGNvbXBhcmVyKHgsIHkpIDwgMCA/IHggOiB5OyB9XG4gICAgICAgIDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHggPCB5ID8geCA6IHk7IH07XG4gICAgcmV0dXJuIHJlZHVjZShtaW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWluLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9Db25uZWN0YWJsZU9ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvciB9IGZyb20gJy4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aWNhc3Qoc3ViamVjdE9yU3ViamVjdEZhY3RvcnksIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG11bHRpY2FzdE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHZhciBzdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gc3ViamVjdEZhY3RvcnkoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3RPclN1YmplY3RGYWN0b3J5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IE11bHRpY2FzdE9wZXJhdG9yKHN1YmplY3RGYWN0b3J5LCBzZWxlY3RvcikpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IE9iamVjdC5jcmVhdGUoc291cmNlLCBjb25uZWN0YWJsZU9ic2VydmFibGVEZXNjcmlwdG9yKTtcbiAgICAgICAgY29ubmVjdGFibGUuc291cmNlID0gc291cmNlO1xuICAgICAgICBjb25uZWN0YWJsZS5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgICAgICByZXR1cm4gY29ubmVjdGFibGU7XG4gICAgfTtcbn1cbnZhciBNdWx0aWNhc3RPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNdWx0aWNhc3RPcGVyYXRvcihzdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfVxuICAgIE11bHRpY2FzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdEZhY3RvcnkoKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNlbGVjdG9yKHN1YmplY3QpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHN1YmplY3QpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBNdWx0aWNhc3RPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNdWx0aWNhc3RPcGVyYXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGljYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfb2JzZXJ2YWJsZV9mcm9tLF91dGlsX2lzQXJyYXksX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0KCkge1xuICAgIHZhciBuZXh0U291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG5leHRTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChuZXh0U291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShuZXh0U291cmNlc1swXSkpIHtcbiAgICAgICAgbmV4dFNvdXJjZXMgPSBuZXh0U291cmNlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yKG5leHRTb3VyY2VzKSk7IH07XG59XG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHRTdGF0aWMoKSB7XG4gICAgdmFyIG5leHRTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgbmV4dFNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNvdXJjZSA9IG51bGw7XG4gICAgaWYgKG5leHRTb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG5leHRTb3VyY2VzWzBdKSkge1xuICAgICAgICBuZXh0U291cmNlcyA9IG5leHRTb3VyY2VzWzBdO1xuICAgIH1cbiAgICBzb3VyY2UgPSBuZXh0U291cmNlcy5zaGlmdCgpO1xuICAgIHJldHVybiBmcm9tKHNvdXJjZSwgbnVsbCkubGlmdChuZXcgT25FcnJvclJlc3VtZU5leHRPcGVyYXRvcihuZXh0U291cmNlcykpO1xufVxudmFyIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT25FcnJvclJlc3VtZU5leHRPcGVyYXRvcihuZXh0U291cmNlcykge1xuICAgICAgICB0aGlzLm5leHRTb3VyY2VzID0gbmV4dFNvdXJjZXM7XG4gICAgfVxuICAgIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5uZXh0U291cmNlcykpO1xuICAgIH07XG4gICAgcmV0dXJuIE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3I7XG59KCkpO1xudmFyIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBuZXh0U291cmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMubmV4dFNvdXJjZXMgPSBuZXh0U291cmNlcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgIH07XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgIH07XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvTmV4dFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvTmV4dFNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHRTb3VyY2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmICghIW5leHQpIHtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG5leHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uRXJyb3JSZXN1bWVOZXh0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHBhaXJ3aXNlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUGFpcndpc2VPcGVyYXRvcigpKTsgfTtcbn1cbnZhciBQYWlyd2lzZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhaXJ3aXNlT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIFBhaXJ3aXNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBQYWlyd2lzZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFBhaXJ3aXNlT3BlcmF0b3I7XG59KCkpO1xudmFyIFBhaXJ3aXNlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhQYWlyd2lzZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFpcndpc2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNQcmV2ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUGFpcndpc2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFpcjtcbiAgICAgICAgaWYgKHRoaXMuaGFzUHJldikge1xuICAgICAgICAgICAgcGFpciA9IFt0aGlzLnByZXYsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFzUHJldiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2ID0gdmFsdWU7XG4gICAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocGFpcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQYWlyd2lzZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhaXJ3aXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9ub3QsX2ZpbHRlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBub3QgfSBmcm9tICcuLi91dGlsL25vdCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlcic7XG5leHBvcnQgZnVuY3Rpb24gcGFydGl0aW9uKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKShzb3VyY2UpLFxuICAgICAgICAgICAgZmlsdGVyKG5vdChwcmVkaWNhdGUsIHRoaXNBcmcpKShzb3VyY2UpXG4gICAgICAgIF07XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRpdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gcGx1Y2soKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBwcm9wZXJ0aWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG1hcChwbHVja2VyKHByb3BlcnRpZXMsIGxlbmd0aCkpKHNvdXJjZSk7IH07XG59XG5mdW5jdGlvbiBwbHVja2VyKHByb3BzLCBsZW5ndGgpIHtcbiAgICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQcm9wID0geDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBjdXJyZW50UHJvcFtwcm9wc1tpXV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFByb3AgPSBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudFByb3A7XG4gICAgfTtcbiAgICByZXR1cm4gbWFwcGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Y2suanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9TdWJqZWN0LF9tdWx0aWNhc3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2goc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IgP1xuICAgICAgICBtdWx0aWNhc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YmplY3QoKTsgfSwgc2VsZWN0b3IpIDpcbiAgICAgICAgbXVsdGljYXN0KG5ldyBTdWJqZWN0KCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0JlaGF2aW9yU3ViamVjdCxfbXVsdGljYXN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJy4uL0JlaGF2aW9yU3ViamVjdCc7XG5pbXBvcnQgeyBtdWx0aWNhc3QgfSBmcm9tICcuL211bHRpY2FzdCc7XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaEJlaGF2aW9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG11bHRpY2FzdChuZXcgQmVoYXZpb3JTdWJqZWN0KHZhbHVlKSkoc291cmNlKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hCZWhhdmlvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0FzeW5jU3ViamVjdCxfbXVsdGljYXN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFzeW5jU3ViamVjdCB9IGZyb20gJy4uL0FzeW5jU3ViamVjdCc7XG5pbXBvcnQgeyBtdWx0aWNhc3QgfSBmcm9tICcuL211bHRpY2FzdCc7XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaExhc3QoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG11bHRpY2FzdChuZXcgQXN5bmNTdWJqZWN0KCkpKHNvdXJjZSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoTGFzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1JlcGxheVN1YmplY3QsX211bHRpY2FzdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAnLi4vUmVwbGF5U3ViamVjdCc7XG5pbXBvcnQgeyBtdWx0aWNhc3QgfSBmcm9tICcuL211bHRpY2FzdCc7XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaFJlcGxheShidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzZWxlY3Rvck9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2VsZWN0b3JPclNjaGVkdWxlciAmJiB0eXBlb2Ygc2VsZWN0b3JPclNjaGVkdWxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBzZWxlY3Rvck9yU2NoZWR1bGVyO1xuICAgIH1cbiAgICB2YXIgc2VsZWN0b3IgPSB0eXBlb2Ygc2VsZWN0b3JPclNjaGVkdWxlciA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGVjdG9yT3JTY2hlZHVsZXIgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3ViamVjdDsgfSwgc2VsZWN0b3IpKHNvdXJjZSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoUmVwbGF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF9vYnNlcnZhYmxlX3JhY2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyByYWNlIGFzIHJhY2VTdGF0aWMgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3JhY2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJhY2VPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdC5jYWxsKHJhY2VTdGF0aWMuYXBwbHkodm9pZCAwLCBbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhY2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9vYnNlcnZhYmxlX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvdW50ID0gLTE7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY291bnQgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlcGVhdE9wZXJhdG9yKC0xLCBzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVwZWF0T3BlcmF0b3IoY291bnQgLSAxLCBzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgUmVwZWF0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVwZWF0T3BlcmF0b3IoY291bnQsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBSZXBlYXRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJlcGVhdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVwZWF0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXBlYXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlcGVhdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBlYXRTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZSh0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdFdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlcGVhdFdoZW5PcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxudmFyIFJlcGVhdFdoZW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBlYXRXaGVuT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBSZXBlYXRXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSZXBlYXRXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyLCBzb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRXaGVuT3BlcmF0b3I7XG59KCkpO1xudmFyIFJlcGVhdFdoZW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlcGVhdFdoZW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlcGVhdFdoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllciwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8gPSB0cnVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuc291cmNlSXNCZWluZ1N1YnNjcmliZWRUbyA9IHRydWU7XG4gICAgICAgIHRoaXMuc291cmNlLnN1YnNjcmliZSh0aGlzKTtcbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICBpZiAodGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8gPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvUmV0cmllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gfHwgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIG5vdGlmaWNhdGlvbnMgPSBfYS5ub3RpZmljYXRpb25zLCByZXRyaWVzU3Vic2NyaXB0aW9uID0gX2EucmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKG5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldHJpZXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXRyaWVzID0gbnVsbDtcbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3Vuc3Vic2NyaWJlID0gdGhpcy5fdW5zdWJzY3JpYmU7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gX3Vuc3Vic2NyaWJlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFJlcGVhdFdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1JldHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIHZhciByZXRyaWVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG5vdGlmaWVyID0gdGhpcy5ub3RpZmllcjtcbiAgICAgICAgICAgIHJldHJpZXMgPSBub3RpZmllcih0aGlzLm5vdGlmaWNhdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG4gICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJldHJpZXMpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdFdoZW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdFdoZW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gcmV0cnkoY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb3VudCA9IC0xO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFJldHJ5T3BlcmF0b3IoY291bnQsIHNvdXJjZSkpOyB9O1xufVxudmFyIFJldHJ5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmV0cnlPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJldHJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSZXRyeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeU9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXRyeVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmV0cnlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJldHJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY291bnQsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJldHJ5U3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHNvdXJjZSA9IF9hLnNvdXJjZSwgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZSh0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiByZXRyeVdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFJldHJ5V2hlbk9wZXJhdG9yKG5vdGlmaWVyLCBzb3VyY2UpKTsgfTtcbn1cbnZhciBSZXRyeVdoZW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXRyeVdoZW5PcGVyYXRvcihub3RpZmllciwgc291cmNlKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJldHJ5V2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmV0cnlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5V2hlbk9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXRyeVdoZW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJldHJ5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmV0cnlXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICB2YXIgcmV0cmllcyA9IHRoaXMucmV0cmllcztcbiAgICAgICAgICAgIHZhciByZXRyaWVzU3Vic2NyaXB0aW9uID0gdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKCFyZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXIgPSB0aGlzLm5vdGlmaWVyO1xuICAgICAgICAgICAgICAgICAgICByZXRyaWVzID0gbm90aWZpZXIoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJldHJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzID0gcmV0cmllcztcbiAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgICAgICBlcnJvcnMubmV4dChlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXRyeVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGVycm9ycyA9IF9hLmVycm9ycywgcmV0cmllc1N1YnNjcmlwdGlvbiA9IF9hLnJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIGVycm9ycy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXRyaWVzU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXRyaWVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0cmllcyA9IG51bGw7XG4gICAgfTtcbiAgICBSZXRyeVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBfdW5zdWJzY3JpYmUgPSB0aGlzLl91bnN1YnNjcmliZTtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBfdW5zdWJzY3JpYmU7XG4gICAgICAgIHRoaXMuc291cmNlLnN1YnNjcmliZSh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVdoZW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5V2hlbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTYW1wbGVPcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxudmFyIFNhbXBsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbXBsZU9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgU2FtcGxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBzYW1wbGVTdWJzY3JpYmVyID0gbmV3IFNhbXBsZVN1YnNjcmliZXIoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHNhbXBsZVN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKHN1YnNjcmliZVRvUmVzdWx0KHNhbXBsZVN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2FtcGxlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYW1wbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhbXBsZVN1YnNjcmliZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLmVtaXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfc2NoZWR1bGVyX2FzeW5jIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlVGltZShwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTYW1wbGVUaW1lT3BlcmF0b3IocGVyaW9kLCBzY2hlZHVsZXIpKTsgfTtcbn1cbnZhciBTYW1wbGVUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2FtcGxlVGltZU9wZXJhdG9yKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgU2FtcGxlVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2FtcGxlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wZXJpb2QsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTYW1wbGVUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYW1wbGVUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTm90aWZpY2F0aW9uLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogX3RoaXMsIHBlcmlvZDogcGVyaW9kIH0pKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hOb3RpZmljYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZDtcbiAgICBzdWJzY3JpYmVyLm5vdGlmeU5leHQoKTtcbiAgICB0aGlzLnNjaGVkdWxlKHN0YXRlLCBwZXJpb2QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZUVxdWFsKGNvbXBhcmVUbywgY29tcGFyYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2VxdWVuY2VFcXVhbE9wZXJhdG9yKGNvbXBhcmVUbywgY29tcGFyYXRvcikpOyB9O1xufVxudmFyIFNlcXVlbmNlRXF1YWxPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IoY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgICAgIHRoaXMuY29tcGFyZVRvID0gY29tcGFyZVRvO1xuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xuICAgIH1cbiAgICBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvbXBhcmVUbywgdGhpcy5jb21wYXJhdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IFNlcXVlbmNlRXF1YWxPcGVyYXRvciB9O1xudmFyIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb21wYXJlVG8sIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbXBhcmVUbyA9IGNvbXBhcmVUbztcbiAgICAgICAgX3RoaXMuY29tcGFyYXRvciA9IGNvbXBhcmF0b3I7XG4gICAgICAgIF90aGlzLl9hID0gW107XG4gICAgICAgIF90aGlzLl9iID0gW107XG4gICAgICAgIF90aGlzLl9vbmVDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbi5hZGQoY29tcGFyZVRvLnN1YnNjcmliZShuZXcgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIoZGVzdGluYXRpb24sIF90aGlzKSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fb25lQ29tcGxldGUgJiYgdGhpcy5fYi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlcygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fb25lQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCh0aGlzLl9hLmxlbmd0aCA9PT0gMCAmJiB0aGlzLl9iLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vbmVDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLmNoZWNrVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2MgPSB0aGlzLCBfYSA9IF9jLl9hLCBfYiA9IF9jLl9iLCBjb21wYXJhdG9yID0gX2MuY29tcGFyYXRvcjtcbiAgICAgICAgd2hpbGUgKF9hLmxlbmd0aCA+IDAgJiYgX2IubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGEgPSBfYS5zaGlmdCgpO1xuICAgICAgICAgICAgdmFyIGIgPSBfYi5zaGlmdCgpO1xuICAgICAgICAgICAgdmFyIGFyZUVxdWFsID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFyZUVxdWFsID0gY29tcGFyYXRvciA/IGNvbXBhcmF0b3IoYSwgYikgOiBhID09PSBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhcmVFcXVhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLm5leHRCID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSAmJiB0aGlzLl9hLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2IucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZUIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KHRoaXMuX2EubGVuZ3RoID09PSAwICYmIHRoaXMuX2IubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX29uZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciB9O1xudmFyIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubmV4dEIodmFsdWUpO1xuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQuY29tcGxldGVCKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VxdWVuY2VFcXVhbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX211bHRpY2FzdCxfcmVmQ291bnQsX1N1YmplY3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuaW1wb3J0IHsgcmVmQ291bnQgfSBmcm9tICcuL3JlZkNvdW50JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmZ1bmN0aW9uIHNoYXJlU3ViamVjdEZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJqZWN0KCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhcmUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHJlZkNvdW50KCkobXVsdGljYXN0KHNoYXJlU3ViamVjdEZhY3RvcnkpKHNvdXJjZSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9SZXBsYXlTdWJqZWN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICcuLi9SZXBsYXlTdWJqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZVJlcGxheShjb25maWdPckJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuICAgIHZhciBjb25maWc7XG4gICAgaWYgKGNvbmZpZ09yQnVmZmVyU2l6ZSAmJiB0eXBlb2YgY29uZmlnT3JCdWZmZXJTaXplID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWcgPSBjb25maWdPckJ1ZmZlclNpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICBidWZmZXJTaXplOiBjb25maWdPckJ1ZmZlclNpemUsXG4gICAgICAgICAgICB3aW5kb3dUaW1lOiB3aW5kb3dUaW1lLFxuICAgICAgICAgICAgcmVmQ291bnQ6IGZhbHNlLFxuICAgICAgICAgICAgc2NoZWR1bGVyOiBzY2hlZHVsZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KHNoYXJlUmVwbGF5T3BlcmF0b3IoY29uZmlnKSk7IH07XG59XG5mdW5jdGlvbiBzaGFyZVJlcGxheU9wZXJhdG9yKF9hKSB7XG4gICAgdmFyIF9iID0gX2EuYnVmZmVyU2l6ZSwgYnVmZmVyU2l6ZSA9IF9iID09PSB2b2lkIDAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBfYiwgX2MgPSBfYS53aW5kb3dUaW1lLCB3aW5kb3dUaW1lID0gX2MgPT09IHZvaWQgMCA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IF9jLCB1c2VSZWZDb3VudCA9IF9hLnJlZkNvdW50LCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgdmFyIHN1YmplY3Q7XG4gICAgdmFyIHJlZkNvdW50ID0gMDtcbiAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgIHZhciBoYXNFcnJvciA9IGZhbHNlO1xuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNoYXJlUmVwbGF5T3BlcmF0aW9uKHNvdXJjZSkge1xuICAgICAgICByZWZDb3VudCsrO1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBzdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3QoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBzdWJqZWN0Lm5leHQodmFsdWUpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5uZXJTdWIgPSBzdWJqZWN0LnN1YnNjcmliZSh0aGlzKTtcbiAgICAgICAgdGhpcy5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVmQ291bnQtLTtcbiAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFpc0NvbXBsZXRlICYmIHVzZVJlZkNvdW50ICYmIHJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHN1YmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZVJlcGxheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfRW1wdHlFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4uL3V0aWwvRW1wdHlFcnJvcic7XG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2luZ2xlT3BlcmF0b3IocHJlZGljYXRlLCBzb3VyY2UpKTsgfTtcbn1cbnZhciBTaW5nbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW5nbGVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFNpbmdsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2luZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBTaW5nbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2luZ2xlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTaW5nbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNpbmdsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5hcHBseVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlZW5WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcignU2VxdWVuY2UgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBlbGVtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZVZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnRyeU5leHQodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUodmFsdWUsIGluZGV4LCB0aGlzLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5U2luZ2xlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAodGhpcy5pbmRleCA+IDApIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodGhpcy5zZWVuVmFsdWUgPyB0aGlzLnNpbmdsZVZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgRW1wdHlFcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTaW5nbGVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW5nbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc2tpcChjb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2tpcE9wZXJhdG9yKGNvdW50KSk7IH07XG59XG52YXIgU2tpcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBPcGVyYXRvcih0b3RhbCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgfVxuICAgIFNraXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNraXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBTa2lwT3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNraXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNraXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgPiB0aGlzLnRvdGFsKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoeCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG5leHBvcnQgZnVuY3Rpb24gc2tpcExhc3QoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNraXBMYXN0T3BlcmF0b3IoY291bnQpKTsgfTtcbn1cbnZhciBTa2lwTGFzdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBMYXN0T3BlcmF0b3IoX3NraXBDb3VudCkge1xuICAgICAgICB0aGlzLl9za2lwQ291bnQgPSBfc2tpcENvdW50O1xuICAgICAgICBpZiAodGhpcy5fc2tpcENvdW50IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFNraXBMYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9za2lwQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwTGFzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5fc2tpcENvdW50KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwTGFzdE9wZXJhdG9yO1xufSgpKTtcbnZhciBTa2lwTGFzdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcExhc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgX3NraXBDb3VudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3NraXBDb3VudCA9IF9za2lwQ291bnQ7XG4gICAgICAgIF90aGlzLl9jb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9yaW5nID0gbmV3IEFycmF5KF9za2lwQ291bnQpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNraXBMYXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHNraXBDb3VudCA9IHRoaXMuX3NraXBDb3VudDtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5fY291bnQrKztcbiAgICAgICAgaWYgKGNvdW50IDwgc2tpcENvdW50KSB7XG4gICAgICAgICAgICB0aGlzLl9yaW5nW2NvdW50XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IGNvdW50ICUgc2tpcENvdW50O1xuICAgICAgICAgICAgdmFyIHJpbmcgPSB0aGlzLl9yaW5nO1xuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gcmluZ1tjdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgcmluZ1tjdXJyZW50SW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQob2xkVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcExhc3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwTGFzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gc2tpcFVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwVW50aWxPcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxudmFyIFNraXBVbnRpbE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgU2tpcFVudGlsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2tpcFVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdGhpcy5ub3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBVbnRpbE9wZXJhdG9yO1xufSgpKTtcbnZhciBTa2lwVW50aWxTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNraXBVbnRpbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcFVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKF90aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgIF90aGlzLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBfdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaWJlcjtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIG5vdGlmaWVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIF90aGlzLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBfdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmlubmVyU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBVbnRpbFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNraXBXaGlsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNraXBXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSkpOyB9O1xufVxudmFyIFNraXBXaGlsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraXBXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICB9XG4gICAgU2tpcFdoaWxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwV2hpbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFdoaWxlT3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBXaGlsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcFdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwV2hpbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc2tpcHBpbmcgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcFdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuc2tpcHBpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5Q2FsbFByZWRpY2F0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNraXBwaW5nKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2tpcFdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5Q2FsbFByZWRpY2F0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlKHZhbHVlLCB0aGlzLmluZGV4KyspO1xuICAgICAgICAgICAgdGhpcy5za2lwcGluZyA9IEJvb2xlYW4ocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwV2hpbGVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX2NvbmNhdCxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcnJheVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgYXJyYXkucG9wKCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBjb25jYXQoYXJyYXksIHNvdXJjZSwgc2NoZWR1bGVyKTsgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBjb25jYXQoYXJyYXksIHNvdXJjZSk7IH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT2JzZXJ2YWJsZSxfc2NoZWR1bGVyX2FzYXAsX3V0aWxfaXNOdW1lcmljIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc2FwIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzYXAnO1xuaW1wb3J0IHsgaXNOdW1lcmljIH0gZnJvbSAnLi4vdXRpbC9pc051bWVyaWMnO1xudmFyIFN1YnNjcmliZU9uT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpYmVPbk9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgZGVsYXlUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGRlbGF5VGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheVRpbWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gYXNhcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLmRlbGF5VGltZSA9IGRlbGF5VGltZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhkZWxheVRpbWUpIHx8IGRlbGF5VGltZSA8IDApIHtcbiAgICAgICAgICAgIF90aGlzLmRlbGF5VGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gYXNhcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc291cmNlLCBkZWxheSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBhc2FwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmcuc291cmNlLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkZWxheSA9IHRoaXMuZGVsYXlUaW1lO1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShTdWJzY3JpYmVPbk9ic2VydmFibGUuZGlzcGF0Y2gsIGRlbGF5LCB7XG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVPbk9ic2VydmFibGU7XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IFN1YnNjcmliZU9uT2JzZXJ2YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlT25PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9TdWJzY3JpYmVPbk9ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlT25PYnNlcnZhYmxlIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9TdWJzY3JpYmVPbk9ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICBkZWxheSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBzdWJzY3JpYmVPbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgU3Vic2NyaWJlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSk7XG4gICAgfTtcbn1cbnZhciBTdWJzY3JpYmVPbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgIH1cbiAgICBTdWJzY3JpYmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIHRoaXMuZGVsYXksIHRoaXMuc2NoZWR1bGVyKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlT25PcGVyYXRvcjtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9tYXAsX29ic2VydmFibGVfZnJvbSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUoc3dpdGNoTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTd2l0Y2hNYXBPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG52YXIgU3dpdGNoTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCkge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBTd2l0Y2hNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwT3BlcmF0b3I7XG59KCkpO1xudmFyIFN3aXRjaE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3dpdGNoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTd2l0Y2hNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIGlmICh0aGlzLmlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZCh0aGlzLmlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoIWlubmVyU3Vic2NyaXB0aW9uIHx8IGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zd2l0Y2hNYXAsX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAnLi9zd2l0Y2hNYXAnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hBbGwoKSB7XG4gICAgcmV0dXJuIHN3aXRjaE1hcChpZGVudGl0eSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hBbGwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zd2l0Y2hNYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAnLi9zd2l0Y2hNYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gcmVzdWx0U2VsZWN0b3IgPyBzd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvcikgOiBzd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcFRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiB0YWtlVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgVGFrZVVudGlsT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBUYWtlVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHRha2VVbnRpbFN1YnNjcmliZXIgPSBuZXcgVGFrZVVudGlsU3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGFrZVVudGlsU3Vic2NyaWJlciwgdGhpcy5ub3RpZmllcik7XG4gICAgICAgIGlmIChub3RpZmllclN1YnNjcmlwdGlvbiAmJiAhdGFrZVVudGlsU3Vic2NyaWJlci5zZWVuVmFsdWUpIHtcbiAgICAgICAgICAgIHRha2VVbnRpbFN1YnNjcmliZXIuYWRkKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHRha2VVbnRpbFN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWtlVW50aWxTdWJzY3JpYmVyO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VVbnRpbE9wZXJhdG9yO1xufSgpKTtcbnZhciBUYWtlVW50aWxTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRha2VVbnRpbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VVbnRpbFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VXaGlsZShwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgIGlmIChpbmNsdXNpdmUgPT09IHZvaWQgMCkge1xuICAgICAgICBpbmNsdXNpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUsIGluY2x1c2l2ZSkpO1xuICAgIH07XG59XG52YXIgVGFrZVdoaWxlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZVdoaWxlT3BlcmF0b3IocHJlZGljYXRlLCBpbmNsdXNpdmUpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuaW5jbHVzaXZlID0gaW5jbHVzaXZlO1xuICAgIH1cbiAgICBUYWtlV2hpbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VXaGlsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuaW5jbHVzaXZlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVdoaWxlT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VXaGlsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZVdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlV2hpbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5pbmNsdXNpdmUgPSBpbmNsdXNpdmU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRPckNvbXBsZXRlKHZhbHVlLCByZXN1bHQpO1xuICAgIH07XG4gICAgVGFrZVdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dE9yQ29tcGxldGUgPSBmdW5jdGlvbiAodmFsdWUsIHByZWRpY2F0ZVJlc3VsdCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoQm9vbGVhbihwcmVkaWNhdGVSZXN1bHQpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRha2VXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VXaGlsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfbm9vcCxfdXRpbF9pc0Z1bmN0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHRhcChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRhcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSk7XG4gICAgfTtcbn1cbnZhciBEb09wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvT3BlcmF0b3IobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB0aGlzLm5leHRPck9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgIH1cbiAgICBEb09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5leHRPck9ic2VydmVyLCB0aGlzLmVycm9yLCB0aGlzLmNvbXBsZXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9PcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90YXBOZXh0ID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gY29tcGxldGUgfHwgbm9vcDtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBfdGhpcy5fY29udGV4dCA9IF90aGlzO1xuICAgICAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgX3RoaXMuX2NvbnRleHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIF90aGlzLl90YXBOZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dCB8fCBub29wO1xuICAgICAgICAgICAgX3RoaXMuX3RhcEVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgICAgIF90aGlzLl90YXBDb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlIHx8IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwTmV4dC5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFRhcFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX3RhcEVycm9yLmNhbGwodGhpcy5fY29udGV4dCwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgVGFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwQ29tcGxldGUuY2FsbCh0aGlzLl9jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBUYXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IHZhciBkZWZhdWx0VGhyb3R0bGVDb25maWcgPSB7XG4gICAgbGVhZGluZzogdHJ1ZSxcbiAgICB0cmFpbGluZzogZmFsc2Vcbn07XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUoZHVyYXRpb25TZWxlY3RvciwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmZpZyA9IGRlZmF1bHRUaHJvdHRsZUNvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IsIGNvbmZpZy5sZWFkaW5nLCBjb25maWcudHJhaWxpbmcpKTsgfTtcbn1cbnZhciBUaHJvdHRsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5sZWFkaW5nID0gbGVhZGluZztcbiAgICAgICAgdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgIH1cbiAgICBUaHJvdHRsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGhyb3R0bGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvciwgdGhpcy5sZWFkaW5nLCB0aGlzLnRyYWlsaW5nKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRocm90dGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IsIF9sZWFkaW5nLCBfdHJhaWxpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5fbGVhZGluZyA9IF9sZWFkaW5nO1xuICAgICAgICBfdGhpcy5fdHJhaWxpbmcgPSBfdHJhaWxpbmc7XG4gICAgICAgIF90aGlzLl9oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZW5kVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKCF0aGlzLl90aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRocm90dGxlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaGFzVmFsdWUgPSBfYS5faGFzVmFsdWUsIF9zZW5kVmFsdWUgPSBfYS5fc2VuZFZhbHVlO1xuICAgICAgICBpZiAoX2hhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoX3NlbmRWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlKF9zZW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NlbmRWYWx1ZSA9IG51bGw7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRocm90dGxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMudHJ5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIGlmICghIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLl90aHJvdHRsZWQgPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBkdXJhdGlvbikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUR1cmF0aW9uU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uU2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRocm90dGxpbmdEb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfdGhyb3R0bGVkID0gX2EuX3Rocm90dGxlZCwgX3RyYWlsaW5nID0gX2EuX3RyYWlsaW5nO1xuICAgICAgICBpZiAoX3Rocm90dGxlZCkge1xuICAgICAgICAgICAgX3Rocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rocm90dGxlZCA9IG51bGw7XG4gICAgICAgIGlmIChfdHJhaWxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy50aHJvdHRsaW5nRG9uZSgpO1xuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aHJvdHRsaW5nRG9uZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3NjaGVkdWxlcl9hc3luYyxfdGhyb3R0bGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGRlZmF1bHRUaHJvdHRsZUNvbmZpZyB9IGZyb20gJy4vdGhyb3R0bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25maWcgPSBkZWZhdWx0VGhyb3R0bGVDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlciwgY29uZmlnLmxlYWRpbmcsIGNvbmZpZy50cmFpbGluZykpOyB9O1xufVxudmFyIFRocm90dGxlVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZU9wZXJhdG9yKGR1cmF0aW9uLCBzY2hlZHVsZXIsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIHRoaXMudHJhaWxpbmcgPSB0cmFpbGluZztcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb24sIHRoaXMuc2NoZWR1bGVyLCB0aGlzLmxlYWRpbmcsIHRoaXMudHJhaWxpbmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzY2hlZHVsZXIsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmxlYWRpbmcgPSBsZWFkaW5nO1xuICAgICAgICBfdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgICAgICBfdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFpbGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1cmF0aW9uLCB7IHN1YnNjcmliZXI6IHRoaXMgfSkpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGVhZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5fdHJhaWxpbmdWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyVGhyb3R0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aHJvdHRsZWQgPSB0aGlzLnRocm90dGxlZDtcbiAgICAgICAgaWYgKHRocm90dGxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhaWxpbmcgJiYgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLl90cmFpbGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoYXJnKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICBzdWJzY3JpYmVyLmNsZWFyVGhyb3R0bGUoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfc2Nhbixfb2JzZXJ2YWJsZV9kZWZlcixfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IHNjYW4gfSBmcm9tICcuL3NjYW4nO1xuaW1wb3J0IHsgZGVmZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2RlZmVyJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lSW50ZXJ2YWwoc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKHNjYW4oZnVuY3Rpb24gKF9hLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gX2EuY3VycmVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHsgdmFsdWU6IHZhbHVlLCBjdXJyZW50OiBzY2hlZHVsZXIubm93KCksIGxhc3Q6IGN1cnJlbnQgfSk7XG4gICAgICAgICAgICB9LCB7IGN1cnJlbnQ6IHNjaGVkdWxlci5ub3coKSwgdmFsdWU6IHVuZGVmaW5lZCwgbGFzdDogdW5kZWZpbmVkIH0pLCBtYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBfYS5jdXJyZW50LCBsYXN0ID0gX2EubGFzdCwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRpbWVJbnRlcnZhbCh2YWx1ZSwgY3VycmVudCAtIGxhc3QpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxudmFyIFRpbWVJbnRlcnZhbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lSW50ZXJ2YWwodmFsdWUsIGludGVydmFsKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICAgIH1cbiAgICByZXR1cm4gVGltZUludGVydmFsO1xufSgpKTtcbmV4cG9ydCB7IFRpbWVJbnRlcnZhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZUludGVydmFsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzRGF0ZSxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc0RhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0V2l0aChkdWUsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBhYnNvbHV0ZVRpbWVvdXQgPSBpc0RhdGUoZHVlKTtcbiAgICAgICAgdmFyIHdhaXRGb3IgPSBhYnNvbHV0ZVRpbWVvdXQgPyAoK2R1ZSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkdWUpO1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbnZhciBUaW1lb3V0V2l0aE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG4gICAgICAgIHRoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgICAgICB0aGlzLndpdGhPYnNlcnZhYmxlID0gd2l0aE9ic2VydmFibGU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBUaW1lb3V0V2l0aE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGltZW91dFdpdGhTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWJzb2x1dGVUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMud2l0aE9ic2VydmFibGUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGltZW91dFdpdGhTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRpbWVvdXRXaXRoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lb3V0V2l0aFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFic29sdXRlVGltZW91dCwgd2FpdEZvciwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgICAgICBfdGhpcy53YWl0Rm9yID0gd2FpdEZvcjtcbiAgICAgICAgX3RoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0ID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpdGhPYnNlcnZhYmxlID0gc3Vic2NyaWJlci53aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgc3Vic2NyaWJlci5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlKCk7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHN1YnNjcmliZVRvUmVzdWx0KHN1YnNjcmliZXIsIHdpdGhPYnNlcnZhYmxlKSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbi5zY2hlZHVsZSh0aGlzLCB0aGlzLndhaXRGb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5hY3Rpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuYWJzb2x1dGVUaW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVvdXRXaXRoU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0V2l0aC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfdXRpbF9UaW1lb3V0RXJyb3IsX3RpbWVvdXRXaXRoLF9vYnNlcnZhYmxlX3Rocm93RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgVGltZW91dEVycm9yIH0gZnJvbSAnLi4vdXRpbC9UaW1lb3V0RXJyb3InO1xuaW1wb3J0IHsgdGltZW91dFdpdGggfSBmcm9tICcuL3RpbWVvdXRXaXRoJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3Rocm93RXJyb3InO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQoZHVlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiB0aW1lb3V0V2l0aChkdWUsIHRocm93RXJyb3IobmV3IFRpbWVvdXRFcnJvcigpKSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2hlZHVsZXJfYXN5bmMsX21hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXN0YW1wKHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIG5ldyBUaW1lc3RhbXAodmFsdWUsIHNjaGVkdWxlci5ub3coKSk7IH0pO1xufVxudmFyIFRpbWVzdGFtcCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lc3RhbXAodmFsdWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgIH1cbiAgICByZXR1cm4gVGltZXN0YW1wO1xufSgpKTtcbmV4cG9ydCB7IFRpbWVzdGFtcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfcmVkdWNlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlJztcbmZ1bmN0aW9uIHRvQXJyYXlSZWR1Y2VyKGFyciwgaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtpdGVtXTtcbiAgICB9XG4gICAgYXJyLnB1c2goaXRlbSk7XG4gICAgcmV0dXJuIGFycjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiByZWR1Y2UodG9BcnJheVJlZHVjZXIsIFtdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvdyh3aW5kb3dCb3VuZGFyaWVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd09wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykpO1xuICAgIH07XG59XG52YXIgV2luZG93T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykge1xuICAgICAgICB0aGlzLndpbmRvd0JvdW5kYXJpZXMgPSB3aW5kb3dCb3VuZGFyaWVzO1xuICAgIH1cbiAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHdpbmRvd1N1YnNjcmliZXIgPSBuZXcgV2luZG93U3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIHNvdXJjZVN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUod2luZG93U3Vic2NyaWJlcik7XG4gICAgICAgIGlmICghc291cmNlU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgd2luZG93U3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlVG9SZXN1bHQod2luZG93U3Vic2NyaWJlciwgdGhpcy53aW5kb3dCb3VuZGFyaWVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZVN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1N1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLndpbmRvdyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoX3RoaXMud2luZG93KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdygpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93ID0gbnVsbDtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIG5ld1dpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChuZXdXaW5kb3cpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1N1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd0NvdW50KHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICBpZiAoc3RhcnRXaW5kb3dFdmVyeSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0V2luZG93RXZlcnkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gd2luZG93Q291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkpO1xuICAgIH07XG59XG52YXIgV2luZG93Q291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dDb3VudE9wZXJhdG9yKHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICAgICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICAgICAgdGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID0gc3RhcnRXaW5kb3dFdmVyeTtcbiAgICB9XG4gICAgV2luZG93Q291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd0NvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1NpemUsIHRoaXMuc3RhcnRXaW5kb3dFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd0NvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIFdpbmRvd0NvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93Q291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICAgICAgX3RoaXMuc3RhcnRXaW5kb3dFdmVyeSA9IHN0YXJ0V2luZG93RXZlcnk7XG4gICAgICAgIF90aGlzLndpbmRvd3MgPSBbbmV3IFN1YmplY3QoKV07XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChfdGhpcy53aW5kb3dzWzBdKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBzdGFydFdpbmRvd0V2ZXJ5ID0gKHRoaXMuc3RhcnRXaW5kb3dFdmVyeSA+IDApID8gdGhpcy5zdGFydFdpbmRvd0V2ZXJ5IDogdGhpcy53aW5kb3dTaXplO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgd2luZG93U2l6ZSA9IHRoaXMud2luZG93U2l6ZTtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHZhciBsZW4gPSB3aW5kb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXRoaXMuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHdpbmRvd3NbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB0aGlzLmNvdW50IC0gd2luZG93U2l6ZSArIDE7XG4gICAgICAgIGlmIChjID49IDAgJiYgYyAlIHN0YXJ0V2luZG93RXZlcnkgPT09IDAgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKyt0aGlzLmNvdW50ICUgc3RhcnRXaW5kb3dFdmVyeSA9PT0gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93XzEpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgaWYgKHdpbmRvd3MpIHtcbiAgICAgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDAgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICBpZiAod2luZG93cykge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMud2luZG93cyA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dDb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX3NjaGVkdWxlcl9hc3luYyxfU3Vic2NyaWJlcixfdXRpbF9pc051bWVyaWMsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93VGltZSh3aW5kb3dUaW1lU3Bhbikge1xuICAgIHZhciBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB2YXIgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IG51bGw7XG4gICAgdmFyIG1heFdpbmRvd1NpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGlzU2NoZWR1bGVyKGFyZ3VtZW50c1szXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzWzNdO1xuICAgIH1cbiAgICBpZiAoaXNTY2hlZHVsZXIoYXJndW1lbnRzWzJdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTnVtZXJpYyhhcmd1bWVudHNbMl0pKSB7XG4gICAgICAgIG1heFdpbmRvd1NpemUgPSBhcmd1bWVudHNbMl07XG4gICAgfVxuICAgIGlmIChpc1NjaGVkdWxlcihhcmd1bWVudHNbMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOdW1lcmljKGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgICAgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd1RpbWVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd1RpbWVPcGVyYXRvcih3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgbWF4V2luZG93U2l6ZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbnZhciBXaW5kb3dUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBtYXhXaW5kb3dTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuICAgICAgICB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSB3aW5kb3dDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLm1heFdpbmRvd1NpemUgPSBtYXhXaW5kb3dTaXplO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgV2luZG93VGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93VGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy53aW5kb3dUaW1lU3BhbiwgdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsLCB0aGlzLm1heFdpbmRvd1NpemUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBDb3VudGVkU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb3VudGVkU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb3VudGVkU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9udW1iZXJPZk5leHRlZFZhbHVlcyA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ291bnRlZFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbnVtYmVyT2ZOZXh0ZWRWYWx1ZXMrKztcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvdW50ZWRTdWJqZWN0LnByb3RvdHlwZSwgXCJudW1iZXJPZk5leHRlZFZhbHVlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlck9mTmV4dGVkVmFsdWVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ291bnRlZFN1YmplY3Q7XG59KFN1YmplY3QpKTtcbnZhciBXaW5kb3dUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgd2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIG1heFdpbmRvd1NpemUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMud2luZG93VGltZVNwYW4gPSB3aW5kb3dUaW1lU3BhbjtcbiAgICAgICAgX3RoaXMud2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIF90aGlzLm1heFdpbmRvd1NpemUgPSBtYXhXaW5kb3dTaXplO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndpbmRvd3MgPSBbXTtcbiAgICAgICAgdmFyIHdpbmRvdyA9IF90aGlzLm9wZW5XaW5kb3coKTtcbiAgICAgICAgaWYgKHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgIT09IG51bGwgJiYgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VTdGF0ZSA9IHsgc3Vic2NyaWJlcjogX3RoaXMsIHdpbmRvdzogd2luZG93LCBjb250ZXh0OiBudWxsIH07XG4gICAgICAgICAgICB2YXIgY3JlYXRpb25TdGF0ZSA9IHsgd2luZG93VGltZVNwYW46IHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsOiB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzdWJzY3JpYmVyOiBfdGhpcywgc2NoZWR1bGVyOiBzY2hlZHVsZXIgfTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDcmVhdGlvbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgY3JlYXRpb25TdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgd2luZG93OiB3aW5kb3csIHdpbmRvd1RpbWVTcGFuOiB3aW5kb3dUaW1lU3BhbiB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd1RpbWVTcGFuT25seSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHZhciBsZW4gPSB3aW5kb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gd2luZG93c1tpXTtcbiAgICAgICAgICAgIGlmICghd2luZG93XzEuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93XzEubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd18xLm51bWJlck9mTmV4dGVkVmFsdWVzID49IHRoaXMubWF4V2luZG93U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlV2luZG93KHdpbmRvd18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18yID0gd2luZG93cy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3dfMi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dfMi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2luZG93ID0gbmV3IENvdW50ZWRTdWJqZWN0KCk7XG4gICAgICAgIHRoaXMud2luZG93cy5wdXNoKHdpbmRvdyk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aW5kb3dzLnNwbGljZSh3aW5kb3dzLmluZGV4T2Yod2luZG93KSwgMSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5KHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3dUaW1lU3BhbiA9IHN0YXRlLndpbmRvd1RpbWVTcGFuLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgICBzdWJzY3JpYmVyLmNsb3NlV2luZG93KHdpbmRvdyk7XG4gICAgfVxuICAgIHN0YXRlLndpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHdpbmRvd1RpbWVTcGFuKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgd2luZG93VGltZVNwYW4gPSBzdGF0ZS53aW5kb3dUaW1lU3Bhbiwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlciwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgdmFyIHdpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuICAgIHZhciBjb250ZXh0ID0geyBhY3Rpb246IGFjdGlvbiwgc3Vic2NyaXB0aW9uOiBudWxsIH07XG4gICAgdmFyIHRpbWVTcGFuU3RhdGUgPSB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHdpbmRvdzogd2luZG93LCBjb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29udGV4dC5zdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuU3RhdGUpO1xuICAgIGFjdGlvbi5hZGQoY29udGV4dC5zdWJzY3JpcHRpb24pO1xuICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFdpbmRvd0Nsb3NlKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCB3aW5kb3cgPSBzdGF0ZS53aW5kb3csIGNvbnRleHQgPSBzdGF0ZS5jb250ZXh0O1xuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuYWN0aW9uICYmIGNvbnRleHQuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnRleHQuYWN0aW9uLnJlbW92ZShjb250ZXh0LnN1YnNjcmlwdGlvbik7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuY2xvc2VXaW5kb3cod2luZG93KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RpbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9TdWJzY3JpcHRpb24sX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1RvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSk7IH07XG59XG52YXIgV2luZG93VG9nZ2xlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93VG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBXaW5kb3dUb2dnbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vcGVuaW5ncywgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUb2dnbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93VG9nZ2xlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIF90aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY29udGV4dHMgPSBbXTtcbiAgICAgICAgX3RoaXMuYWRkKF90aGlzLm9wZW5TdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb3BlbmluZ3MsIG9wZW5pbmdzKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHRzW2ldLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzIud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8yLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMyA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzMud2luZG93LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8zLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChvdXRlclZhbHVlID09PSB0aGlzLm9wZW5pbmdzKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ1NlbGVjdG9yKGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfNCA9IHsgd2luZG93OiB3aW5kb3dfMSwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0XzQpO1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0XzQpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0XzQ7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93XzEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmluZGV4T2Yob3V0ZXJWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICAgICAgaWYgKGlubmVyICE9PSB0aGlzLm9wZW5TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5pbmRleE9mKGlubmVyLmNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICB2YXIgd2luZG93ID0gY29udGV4dC53aW5kb3csIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuICAgICAgICBjb250ZXh0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93VG9nZ2xlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUb2dnbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1doZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdpbmRvd1doZW5PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd09wZXJhdG9yKGNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgV2luZG93T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFdpbmRvd1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1N1YnNjcmliZXIoZGVzdGluYXRpb24sIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5vcGVuV2luZG93KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coaW5uZXJTdWIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdyhpbm5lclN1Yik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlQ2xvc2luZ05vdGlmaWNhdGlvbigpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NpbmdOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChpbm5lclN1YiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHdpbmRvdyk7XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1N1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93V2hlbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBwcm9qZWN0O1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcHJvamVjdCA9IGFyZ3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yKG9ic2VydmFibGVzLCBwcm9qZWN0KSk7XG4gICAgfTtcbn1cbnZhciBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub2JzZXJ2YWJsZXMsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG59KCkpO1xudmFyIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLnRvUmVzcG9uZCA9IFtdO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgX3RoaXMudG9SZXNwb25kLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9IHRoaXMudG9SZXNwb25kO1xuICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvdW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50b1Jlc3BvbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFt2YWx1ZV0uY29uY2F0KHRoaXMudmFsdWVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV96aXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgemlwIGFzIHppcFN0YXRpYyB9IGZyb20gJy4uL29ic2VydmFibGUvemlwJztcbmV4cG9ydCBmdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHppcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdC5jYWxsKHppcFN0YXRpYy5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV96aXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgWmlwT3BlcmF0b3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3ppcCc7XG5leHBvcnQgZnVuY3Rpb24gemlwQWxsKHByb2plY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFppcE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcEFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB7IGF1ZGl0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0JztcbmV4cG9ydCB7IGF1ZGl0VGltZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWUnO1xuZXhwb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcic7XG5leHBvcnQgeyBidWZmZXJDb3VudCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudCc7XG5leHBvcnQgeyBidWZmZXJUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWUnO1xuZXhwb3J0IHsgYnVmZmVyVG9nZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRvZ2dsZSc7XG5leHBvcnQgeyBidWZmZXJXaGVuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW4nO1xuZXhwb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yJztcbmV4cG9ydCB7IGNvbWJpbmVBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUFsbCc7XG5leHBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3QnO1xuZXhwb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdCc7XG5leHBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmV4cG9ydCB7IGNvbmNhdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAnO1xuZXhwb3J0IHsgY29uY2F0TWFwVG8gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwVG8nO1xuZXhwb3J0IHsgY291bnQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY291bnQnO1xuZXhwb3J0IHsgZGVib3VuY2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2UnO1xuZXhwb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZSc7XG5leHBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kZWZhdWx0SWZFbXB0eSc7XG5leHBvcnQgeyBkZWxheSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheSc7XG5leHBvcnQgeyBkZWxheVdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuJztcbmV4cG9ydCB7IGRlbWF0ZXJpYWxpemUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVtYXRlcmlhbGl6ZSc7XG5leHBvcnQgeyBkaXN0aW5jdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdCc7XG5leHBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZCc7XG5leHBvcnQgeyBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCc7XG5leHBvcnQgeyBlbGVtZW50QXQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0JztcbmV4cG9ydCB7IGVuZFdpdGggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZW5kV2l0aCc7XG5leHBvcnQgeyBldmVyeSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9ldmVyeSc7XG5leHBvcnQgeyBleGhhdXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3QnO1xuZXhwb3J0IHsgZXhoYXVzdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0TWFwJztcbmV4cG9ydCB7IGV4cGFuZCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9leHBhbmQnO1xuZXhwb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlcic7XG5leHBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZSc7XG5leHBvcnQgeyBmaW5kIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmQnO1xuZXhwb3J0IHsgZmluZEluZGV4IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleCc7XG5leHBvcnQgeyBmaXJzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9maXJzdCc7XG5leHBvcnQgeyBncm91cEJ5IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2dyb3VwQnknO1xuZXhwb3J0IHsgaWdub3JlRWxlbWVudHMgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMnO1xuZXhwb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9pc0VtcHR5JztcbmV4cG9ydCB7IGxhc3QgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbGFzdCc7XG5leHBvcnQgeyBtYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwJztcbmV4cG9ydCB7IG1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hcFRvJztcbmV4cG9ydCB7IG1hdGVyaWFsaXplIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplJztcbmV4cG9ydCB7IG1heCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tYXgnO1xuZXhwb3J0IHsgbWVyZ2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2UnO1xuZXhwb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuZXhwb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuZXhwb3J0IHsgbWVyZ2VNYXAgYXMgZmxhdE1hcCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5leHBvcnQgeyBtZXJnZU1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG8nO1xuZXhwb3J0IHsgbWVyZ2VTY2FuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbic7XG5leHBvcnQgeyBtaW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWluJztcbmV4cG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3QnO1xuZXhwb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbic7XG5leHBvcnQgeyBvbkVycm9yUmVzdW1lTmV4dCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9vbkVycm9yUmVzdW1lTmV4dCc7XG5leHBvcnQgeyBwYWlyd2lzZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9wYWlyd2lzZSc7XG5leHBvcnQgeyBwYXJ0aXRpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGFydGl0aW9uJztcbmV4cG9ydCB7IHBsdWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrJztcbmV4cG9ydCB7IHB1Ymxpc2ggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaCc7XG5leHBvcnQgeyBwdWJsaXNoQmVoYXZpb3IgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yJztcbmV4cG9ydCB7IHB1Ymxpc2hMYXN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0JztcbmV4cG9ydCB7IHB1Ymxpc2hSZXBsYXkgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheSc7XG5leHBvcnQgeyByYWNlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JhY2UnO1xuZXhwb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZSc7XG5leHBvcnQgeyByZXBlYXQgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0JztcbmV4cG9ydCB7IHJlcGVhdFdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0V2hlbic7XG5leHBvcnQgeyByZXRyeSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeSc7XG5leHBvcnQgeyByZXRyeVdoZW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuJztcbmV4cG9ydCB7IHJlZkNvdW50IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZkNvdW50JztcbmV4cG9ydCB7IHNhbXBsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGUnO1xuZXhwb3J0IHsgc2FtcGxlVGltZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lJztcbmV4cG9ydCB7IHNjYW4gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbic7XG5leHBvcnQgeyBzZXF1ZW5jZUVxdWFsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwnO1xuZXhwb3J0IHsgc2hhcmUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmUnO1xuZXhwb3J0IHsgc2hhcmVSZXBsYXkgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVSZXBsYXknO1xuZXhwb3J0IHsgc2luZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NpbmdsZSc7XG5leHBvcnQgeyBza2lwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXAnO1xuZXhwb3J0IHsgc2tpcExhc3QgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3QnO1xuZXhwb3J0IHsgc2tpcFVudGlsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBVbnRpbCc7XG5leHBvcnQgeyBza2lwV2hpbGUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFdoaWxlJztcbmV4cG9ydCB7IHN0YXJ0V2l0aCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGgnO1xuZXhwb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IHsgc3dpdGNoQWxsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbCc7XG5leHBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwJztcbmV4cG9ydCB7IHN3aXRjaE1hcFRvIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvJztcbmV4cG9ydCB7IHRha2UgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZSc7XG5leHBvcnQgeyB0YWtlTGFzdCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlTGFzdCc7XG5leHBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsJztcbmV4cG9ydCB7IHRha2VXaGlsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGUnO1xuZXhwb3J0IHsgdGFwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RhcCc7XG5leHBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZSc7XG5leHBvcnQgeyB0aHJvdHRsZVRpbWUgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lJztcbmV4cG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy90aHJvd0lmRW1wdHknO1xuZXhwb3J0IHsgdGltZUludGVydmFsIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVJbnRlcnZhbCc7XG5leHBvcnQgeyB0aW1lb3V0IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXQnO1xuZXhwb3J0IHsgdGltZW91dFdpdGggfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFdpdGgnO1xuZXhwb3J0IHsgdGltZXN0YW1wIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVzdGFtcCc7XG5leHBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXknO1xuZXhwb3J0IHsgd2luZG93IH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvdyc7XG5leHBvcnQgeyB3aW5kb3dDb3VudCB9IGZyb20gJy4uL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dDb3VudCc7XG5leHBvcnQgeyB3aW5kb3dUaW1lIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWUnO1xuZXhwb3J0IHsgd2luZG93VG9nZ2xlIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RvZ2dsZSc7XG5leHBvcnQgeyB3aW5kb3dXaGVuIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW4nO1xuZXhwb3J0IHsgd2l0aExhdGVzdEZyb20gfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20nO1xuZXhwb3J0IHsgemlwIH0gZnJvbSAnLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3ppcCc7XG5leHBvcnQgeyB6aXBBbGwgfSBmcm9tICcuLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgQW5pbWF0aW9uRnJhbWVBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBzY2hlZHVsZXIuZmx1c2gobnVsbCk7IH0pKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkZyYW1lQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZUFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9BbmltYXRpb25GcmFtZUFjdGlvbixfQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVBY3Rpb24gfSBmcm9tICcuL0FuaW1hdGlvbkZyYW1lQWN0aW9uJztcbmltcG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH0gZnJvbSAnLi9BbmltYXRpb25GcmFtZVNjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFuaW1hdGlvbkZyYW1lID0gLypAX19QVVJFX18qLyBuZXcgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoQW5pbWF0aW9uRnJhbWVBY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBBbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBbmltYXRpb25GcmFtZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgY291bnQgPSBhY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBjb3VudCAmJiAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FzeW5jQWN0aW9uLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmlydHVhbFRpbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlydHVhbFRpbWVTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBtYXhGcmFtZXMpIHtcbiAgICAgICAgaWYgKFNjaGVkdWxlckFjdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBTY2hlZHVsZXJBY3Rpb24gPSBWaXJ0dWFsQWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhGcmFtZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbWF4RnJhbWVzID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZnJhbWU7IH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1heEZyYW1lcyA9IG1heEZyYW1lcztcbiAgICAgICAgX3RoaXMuZnJhbWUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYWN0aW9ucyA9IF9hLmFjdGlvbnMsIG1heEZyYW1lcyA9IF9hLm1heEZyYW1lcztcbiAgICAgICAgdmFyIGVycm9yLCBhY3Rpb247XG4gICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmRlbGF5IDw9IG1heEZyYW1lcykge1xuICAgICAgICAgICAgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IGFjdGlvbi5kZWxheTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLmZyYW1lVGltZUZhY3RvciA9IDEwO1xuICAgIHJldHVybiBWaXJ0dWFsVGltZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IFZpcnR1YWxUaW1lU2NoZWR1bGVyIH07XG52YXIgVmlydHVhbEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhWaXJ0dWFsQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZpcnR1YWxBY3Rpb24oc2NoZWR1bGVyLCB3b3JrLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaW5kZXggPSBzY2hlZHVsZXIuaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gc2NoZWR1bGVyLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG5ldyBWaXJ0dWFsQWN0aW9uKHRoaXMuc2NoZWR1bGVyLCB0aGlzLndvcmspO1xuICAgICAgICB0aGlzLmFkZChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gYWN0aW9uLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBzY2hlZHVsZXIuZnJhbWUgKyBkZWxheTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICBhY3Rpb25zLnNvcnQoVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX2V4ZWN1dGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnNvcnRBY3Rpb25zID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGVsYXkgPT09IGIuZGVsYXkpIHtcbiAgICAgICAgICAgIGlmIChhLmluZGV4ID09PSBiLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhLmluZGV4ID4gYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGEuZGVsYXkgPiBiLmRlbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFZpcnR1YWxBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBWaXJ0dWFsQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaXJ0dWFsVGltZVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gISFvYmogJiYgKG9iaiBpbnN0YW5jZW9mIE9ic2VydmFibGUgfHwgKHR5cGVvZiBvYmoubGlmdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfQXN5bmNTdWJqZWN0LF9vcGVyYXRvcnNfbWFwLF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX2lzQXJyYXksX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAnLi4vQXN5bmNTdWJqZWN0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCByZXN1bHRTZWxlY3Rvciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHNjaGVkdWxlcikuYXBwbHkodm9pZCAwLCBhcmdzKS5waXBlKG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgdmFyIHN1YmplY3Q7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYzogY2FsbGJhY2tGdW5jLFxuICAgICAgICAgICAgc2NoZWR1bGVyOiBzY2hlZHVsZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPD0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yKHN1YmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBzdGF0ZS5hcmdzLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgcGFyYW1zID0gc3RhdGUucGFyYW1zO1xuICAgIHZhciBjYWxsYmFja0Z1bmMgPSBwYXJhbXMuY2FsbGJhY2tGdW5jLCBjb250ZXh0ID0gcGFyYW1zLmNvbnRleHQsIHNjaGVkdWxlciA9IHBhcmFtcy5zY2hlZHVsZXI7XG4gICAgdmFyIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdDtcbiAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgc3ViamVjdCA9IHBhcmFtcy5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdCgpO1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbm5lckFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoIDw9IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3M7XG4gICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdmFsdWUsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2tGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KFtoYW5kbGVyXSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZChzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoc3RhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZSwgc3ViamVjdCA9IHN0YXRlLnN1YmplY3Q7XG4gICAgc3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEVycm9yKHN0YXRlKSB7XG4gICAgdmFyIGVyciA9IHN0YXRlLmVyciwgc3ViamVjdCA9IHN0YXRlLnN1YmplY3Q7XG4gICAgc3ViamVjdC5lcnJvcihlcnIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfQXN5bmNTdWJqZWN0LF9vcGVyYXRvcnNfbWFwLF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX2lzU2NoZWR1bGVyLF91dGlsX2lzQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAnLi4vQXN5bmNTdWJqZWN0JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgc2NoZWR1bGVyKS5hcHBseSh2b2lkIDAsIGFyZ3MpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHN1YmplY3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBjYWxsYmFja0Z1bmM6IGNhbGxiYWNrRnVuYyxcbiAgICAgICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdDtcbiAgICAgICAgICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IGlubmVyQXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQoaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuUmVwb3J0RXJyb3Ioc3ViamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IHBhcmFtczogcGFyYW1zLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzdGF0ZS5wYXJhbXMsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICB2YXIgY2FsbGJhY2tGdW5jID0gcGFyYW1zLmNhbGxiYWNrRnVuYywgYXJncyA9IHBhcmFtcy5hcmdzLCBzY2hlZHVsZXIgPSBwYXJhbXMuc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVyciA9IGlubmVyQXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVyciwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoIDw9IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3M7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVyciwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KGFyZykge1xuICAgIHZhciB2YWx1ZSA9IGFyZy52YWx1ZSwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgc3ViamVjdC5jb21wbGV0ZSgpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihhcmcpIHtcbiAgICB2YXIgZXJyID0gYXJnLmVyciwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmROb2RlQ2FsbGJhY2suanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzQXJyYXksX29wZXJhdG9yc19tYXAsX3V0aWxfaXNPYmplY3QsX2Zyb20gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC9pc09iamVjdCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBmb3JrSm9pbigpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBmaXJzdF8xID0gc291cmNlc1swXTtcbiAgICAgICAgaWYgKGlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbkludGVybmFsKGZpcnN0XzEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09iamVjdChmaXJzdF8xKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZmlyc3RfMSkgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZmlyc3RfMSk7XG4gICAgICAgICAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLCBrZXlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNvdXJjZXNbc291cmNlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcmVzdWx0U2VsZWN0b3JfMSA9IHNvdXJjZXMucG9wKCk7XG4gICAgICAgIHNvdXJjZXMgPSAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShzb3VyY2VzWzBdKSkgPyBzb3VyY2VzWzBdIDogc291cmNlcztcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywgbnVsbCkucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yXzEuYXBwbHkodm9pZCAwLCBhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChzb3VyY2VzLCBudWxsKTtcbn1cbmZ1bmN0aW9uIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywga2V5cykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSAwO1xuICAgICAgICB2YXIgZW1pdHRlZCA9IDA7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmcm9tKHNvdXJjZXNbaV0pO1xuICAgICAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlZCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gbGVuIHx8ICFoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtaXR0ZWQgPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChrZXlzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAocmVzdWx0W2tleV0gPSB2YWx1ZXNbaV0sIHJlc3VsdCk7IH0sIHt9KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmtKb2luLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pc0FycmF5LF91dGlsX2lzRnVuY3Rpb24sX29wZXJhdG9yc19tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xudmFyIHRvU3RyaW5nID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXkoYXJncykgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpIDogcmVzdWx0U2VsZWN0b3IoYXJncyk7IH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldHVwU3Vic2NyaXB0aW9uKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlO1xuICAgIGlmIChpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8xID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8xLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMiA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzIub2ZmKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8zID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChzb3VyY2VPYmogJiYgc291cmNlT2JqLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlT2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmpbaV0sIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuYWRkKHVuc3Vic2NyaWJlKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmoub24gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5vZmYgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNBcnJheSxfdXRpbF9pc0Z1bmN0aW9uLF9vcGVyYXRvcnNfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGVbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoZS5sZW5ndGggPT09IDEgPyBlWzBdIDogZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXRWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldFZhbHVlID0gYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihyZW1vdmVIYW5kbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlSGFuZGxlcihoYW5kbGVyLCByZXRWYWx1ZSk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnRQYXR0ZXJuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pZGVudGl0eSxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgIHZhciByZXN1bHRTZWxlY3RvcjtcbiAgICB2YXIgaW5pdGlhbFN0YXRlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsU3RhdGVPck9wdGlvbnM7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IG9wdGlvbnMuaW5pdGlhbFN0YXRlO1xuICAgICAgICBjb25kaXRpb24gPSBvcHRpb25zLmNvbmRpdGlvbjtcbiAgICAgICAgaXRlcmF0ZSA9IG9wdGlvbnMuaXRlcmF0ZTtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zLnJlc3VsdFNlbGVjdG9yIHx8IGlkZW50aXR5O1xuICAgICAgICBzY2hlZHVsZXIgPSBvcHRpb25zLnNjaGVkdWxlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUgPT09IHVuZGVmaW5lZCB8fCBpc1NjaGVkdWxlcihyZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zO1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IGlkZW50aXR5O1xuICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucztcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsXG4gICAgICAgICAgICAgICAgaXRlcmF0ZTogaXRlcmF0ZSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb246IGNvbmRpdGlvbixcbiAgICAgICAgICAgICAgICByZXN1bHRTZWxlY3RvcjogcmVzdWx0U2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmRpdGlvblJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBjb25kaXRpb24oc3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0U2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGl0ZXJhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb25kaXRpb24gPSBzdGF0ZS5jb25kaXRpb247XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5uZWVkSXRlcmF0ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdGUuc3RhdGUgPSBzdGF0ZS5pdGVyYXRlKHN0YXRlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5uZWVkSXRlcmF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgdmFyIGNvbmRpdGlvblJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGNvbmRpdGlvbihzdGF0ZS5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbmRpdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIHZhbHVlID0gc3RhdGUucmVzdWx0U2VsZWN0b3Ioc3RhdGUuc3RhdGUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfZGVmZXIsX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9kZWZlcic7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGlpZihjb25kaXRpb24sIHRydWVSZXN1bHQsIGZhbHNlUmVzdWx0KSB7XG4gICAgaWYgKHRydWVSZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICB0cnVlUmVzdWx0ID0gRU1QVFk7XG4gICAgfVxuICAgIGlmIChmYWxzZVJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGZhbHNlUmVzdWx0ID0gRU1QVFk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBjb25kaXRpb24oKSA/IHRydWVSZXN1bHQgOiBmYWxzZVJlc3VsdDsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1paWYuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9zY2hlZHVsZXJfYXN5bmMsX3V0aWxfaXNOdW1lcmljIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIGlmICghaXNOdW1lcmljKHBlcmlvZCkgfHwgcGVyaW9kIDwgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlciB8fCB0eXBlb2Ygc2NoZWR1bGVyLnNjaGVkdWxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogMCwgcGVyaW9kOiBwZXJpb2QgfSkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb3VudGVyID0gc3RhdGUuY291bnRlciwgcGVyaW9kID0gc3RhdGUucGVyaW9kO1xuICAgIHN1YnNjcmliZXIubmV4dChjb3VudGVyKTtcbiAgICB0aGlzLnNjaGVkdWxlKHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogY291bnRlciArIDEsIHBlcmlvZDogcGVyaW9kIH0sIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfbm9vcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCB2YXIgTkVWRVIgPSAvKkBfX1BVUkVfXyovIG5ldyBPYnNlcnZhYmxlKG5vb3ApO1xuZXhwb3J0IGZ1bmN0aW9uIG5ldmVyKCkge1xuICAgIHJldHVybiBORVZFUjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfdXRpbF9pc0FycmF5LF9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dCgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gc291cmNlc1swXSwgcmVtYWluZGVyID0gc291cmNlcy5zbGljZSgxKTtcbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShmaXJzdCkpIHtcbiAgICAgICAgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0LmFwcGx5KHZvaWQgMCwgZmlyc3QpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1Yk5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmFkZChvbkVycm9yUmVzdW1lTmV4dC5hcHBseSh2b2lkIDAsIHJlbWFpbmRlcikuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTsgfTtcbiAgICAgICAgcmV0dXJuIGZyb20oZmlyc3QpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgIGVycm9yOiBzdWJOZXh0LFxuICAgICAgICAgICAgY29tcGxldGU6IHN1Yk5leHQsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBwYWlycyhvYmosIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoW2tleSwgb2JqW2tleV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHsga2V5czoga2V5cywgaW5kZXg6IDAsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvYmo6IG9iaiB9KSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIga2V5cyA9IHN0YXRlLmtleXMsIGluZGV4ID0gc3RhdGUuaW5kZXgsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzdWJzY3JpcHRpb24gPSBzdGF0ZS5zdWJzY3JpcHRpb24sIG9iaiA9IHN0YXRlLm9iajtcbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIGlmIChpbmRleCA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoW2tleSwgb2JqW2tleV1dKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZSh7IGtleXM6IGtleXMsIGluZGV4OiBpbmRleCArIDEsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uLCBvYmo6IG9iaiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlycy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfbm90LF91dGlsX3N1YnNjcmliZVRvLF9vcGVyYXRvcnNfZmlsdGVyLF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vdCB9IGZyb20gJy4uL3V0aWwvbm90JztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUbyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvZmlsdGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aXRpb24oc291cmNlLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKShuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVUbyhzb3VyY2UpKSksXG4gICAgICAgIGZpbHRlcihub3QocHJlZGljYXRlLCB0aGlzQXJnKSkobmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oc291cmNlKSkpXG4gICAgXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRpdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gc3RhcnQ7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydDtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgY291bnQ6IGNvdW50LCBzdGFydDogc3RhcnQsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCsrID49IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChjdXJyZW50KyspO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUuc3RhcnQsIGluZGV4ID0gc3RhdGUuaW5kZXgsIGNvdW50ID0gc3RhdGUuY291bnQsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIGlmIChpbmRleCA+PSBjb3VudCkge1xuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5uZXh0KHN0YXJ0KTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGF0ZS5pbmRleCA9IGluZGV4ICsgMTtcbiAgICBzdGF0ZS5zdGFydCA9IHN0YXJ0ICsgMTtcbiAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmdlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHVzaW5nKHJlc291cmNlRmFjdG9yeSwgb2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHJlc291cmNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzb3VyY2UgPSByZXNvdXJjZUZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBvYnNlcnZhYmxlRmFjdG9yeShyZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc291cmNlID0gcmVzdWx0ID8gZnJvbShyZXN1bHQpIDogRU1QVFk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNpbmcuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZhYmxlJztcbmV4cG9ydCB7IENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnO1xuZXhwb3J0IHsgR3JvdXBlZE9ic2VydmFibGUgfSBmcm9tICcuL2ludGVybmFsL29wZXJhdG9ycy9ncm91cEJ5JztcbmV4cG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICcuL2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL2ludGVybmFsL1N1YmplY3QnO1xuZXhwb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAnLi9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QnO1xuZXhwb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJy4vaW50ZXJuYWwvUmVwbGF5U3ViamVjdCc7XG5leHBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICcuL2ludGVybmFsL0FzeW5jU3ViamVjdCc7XG5leHBvcnQgeyBhc2FwIGFzIGFzYXBTY2hlZHVsZXIgfSBmcm9tICcuL2ludGVybmFsL3NjaGVkdWxlci9hc2FwJztcbmV4cG9ydCB7IGFzeW5jIGFzIGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMnO1xuZXhwb3J0IHsgcXVldWUgYXMgcXVldWVTY2hlZHVsZXIgfSBmcm9tICcuL2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZSc7XG5leHBvcnQgeyBhbmltYXRpb25GcmFtZSBhcyBhbmltYXRpb25GcmFtZVNjaGVkdWxlciB9IGZyb20gJy4vaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lJztcbmV4cG9ydCB7IFZpcnR1YWxUaW1lU2NoZWR1bGVyLCBWaXJ0dWFsQWN0aW9uIH0gZnJvbSAnLi9pbnRlcm5hbC9zY2hlZHVsZXIvVmlydHVhbFRpbWVTY2hlZHVsZXInO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9pbnRlcm5hbC9TY2hlZHVsZXInO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9pbnRlcm5hbC9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vaW50ZXJuYWwvU3Vic2NyaWJlcic7XG5leHBvcnQgeyBOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvbktpbmQgfSBmcm9tICcuL2ludGVybmFsL05vdGlmaWNhdGlvbic7XG5leHBvcnQgeyBwaXBlIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL3BpcGUnO1xuZXhwb3J0IHsgbm9vcCB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9ub29wJztcbmV4cG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL2lkZW50aXR5JztcbmV4cG9ydCB7IGlzT2JzZXJ2YWJsZSB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9pc09ic2VydmFibGUnO1xuZXhwb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuZXhwb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4vaW50ZXJuYWwvdXRpbC9FbXB0eUVycm9yJztcbmV4cG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmV4cG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5leHBvcnQgeyBUaW1lb3V0RXJyb3IgfSBmcm9tICcuL2ludGVybmFsL3V0aWwvVGltZW91dEVycm9yJztcbmV4cG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2snO1xuZXhwb3J0IHsgYmluZE5vZGVDYWxsYmFjayB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrJztcbmV4cG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XG5leHBvcnQgeyBjb25jYXQgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvY29uY2F0JztcbmV4cG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2RlZmVyJztcbmV4cG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5JztcbmV4cG9ydCB7IGZvcmtKb2luIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luJztcbmV4cG9ydCB7IGZyb20gfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50JztcbmV4cG9ydCB7IGZyb21FdmVudFBhdHRlcm4gfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybic7XG5leHBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9nZW5lcmF0ZSc7XG5leHBvcnQgeyBpaWYgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvaWlmJztcbmV4cG9ydCB7IGludGVydmFsIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsJztcbmV4cG9ydCB7IG1lcmdlIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlJztcbmV4cG9ydCB7IG5ldmVyIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL25ldmVyJztcbmV4cG9ydCB7IG9mIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29mJztcbmV4cG9ydCB7IG9uRXJyb3JSZXN1bWVOZXh0IH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0JztcbmV4cG9ydCB7IHBhaXJzIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzJztcbmV4cG9ydCB7IHBhcnRpdGlvbiB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24nO1xuZXhwb3J0IHsgcmFjZSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlJztcbmV4cG9ydCB7IHJhbmdlIH0gZnJvbSAnLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhbmdlJztcbmV4cG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvcic7XG5leHBvcnQgeyB0aW1lciB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lcic7XG5leHBvcnQgeyB1c2luZyB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS91c2luZyc7XG5leHBvcnQgeyB6aXAgfSBmcm9tICcuL2ludGVybmFsL29ic2VydmFibGUvemlwJztcbmV4cG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4vaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5leHBvcnQgeyBFTVBUWSB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eSc7XG5leHBvcnQgeyBORVZFUiB9IGZyb20gJy4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlcic7XG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2ludGVybmFsL2NvbmZpZyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsInZhciBTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm93ID0gU2NoZWR1bGVyLm5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlNjaGVkdWxlckFjdGlvbiA9IFNjaGVkdWxlckFjdGlvbjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfT2JzZXJ2YWJsZSxfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5KGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgR3JvdXBCeU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyb3VwQnlPcGVyYXRvcihrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkdXJhdGlvblNlbGVjdG9yLCBzdWJqZWN0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICB0aGlzLmVsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgfVxuICAgIEdyb3VwQnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEdyb3VwQnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZWxlbWVudFNlbGVjdG9yLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IsIHRoaXMuc3ViamVjdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeU9wZXJhdG9yO1xufSgpKTtcbnZhciBHcm91cEJ5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cEJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cEJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgZHVyYXRpb25TZWxlY3Rvciwgc3ViamVjdFNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmdyb3VwcyA9IG51bGw7XG4gICAgICAgIF90aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5rZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dyb3VwKHZhbHVlLCBrZXkpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9ncm91cCA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKCFncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3VwcyA9IHRoaXMuZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cCA9IGdyb3Vwcy5nZXQoa2V5KTtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICBncm91cCA9ICh0aGlzLnN1YmplY3RTZWxlY3RvciA/IHRoaXMuc3ViamVjdFNlbGVjdG9yKCkgOiBuZXcgU3ViamVjdCgpKTtcbiAgICAgICAgICAgIGdyb3Vwcy5zZXQoa2V5LCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZ3JvdXBlZE9ic2VydmFibGUgPSBuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoZ3JvdXBlZE9ic2VydmFibGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25TZWxlY3RvcihuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFkZChkdXJhdGlvbi5zdWJzY3JpYmUobmV3IEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHRoaXMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFncm91cC5jbG9zZWQpIHtcbiAgICAgICAgICAgIGdyb3VwLm5leHQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBncm91cC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmdyb3Vwcy5kZWxldGUoa2V5KTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cER1cmF0aW9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cER1cmF0aW9uU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cER1cmF0aW9uU3Vic2NyaWJlcihrZXksIGdyb3VwLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ3JvdXApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcbiAgICAgICAgX3RoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwYXJlbnQgPSBfYS5wYXJlbnQsIGtleSA9IF9hLmtleTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVHcm91cChrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBEdXJhdGlvblN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cGVkT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cGVkT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwU3ViamVjdCwgcmVmQ291bnRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgICBfdGhpcy5ncm91cFN1YmplY3QgPSBncm91cFN1YmplY3Q7XG4gICAgICAgIF90aGlzLnJlZkNvdW50U3Vic2NyaXB0aW9uID0gcmVmQ291bnRTdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBlZE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZWZDb3VudFN1YnNjcmlwdGlvbiA9IF9hLnJlZkNvdW50U3Vic2NyaXB0aW9uLCBncm91cFN1YmplY3QgPSBfYS5ncm91cFN1YmplY3Q7XG4gICAgICAgIGlmIChyZWZDb3VudFN1YnNjcmlwdGlvbiAmJiAhcmVmQ291bnRTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKG5ldyBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uKHJlZkNvdW50U3Vic2NyaXB0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChncm91cFN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cGVkT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgR3JvdXBlZE9ic2VydmFibGUgfTtcbnZhciBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQuY291bnQrKztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudC5jbG9zZWQgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBwYXJlbnQuY291bnQgLT0gMTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuY291bnQgPT09IDAgJiYgcGFyZW50LmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JvdXBCeS5qcy5tYXBcbiIsImltcG9ydCBQb2ludGVyIGZyb20gJy4uL2Fzc2V0cy9pbWcvcG9pbnRlci5wbmcnXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4uL2xpYi9zdG9yZSdcbmltcG9ydCB7IHN0b3JlLCBHYW1lU3RhdGUgfSBmcm9tICcuL3N0b3JlJ1xuaW1wb3J0IHsgQ2FudmFzQVBJIH0gZnJvbSAnLi4vbGliL2NhbnZhcydcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlbmRlcmFibGUgZXh0ZW5kcyBDYW52YXNBUEkge1xuXHRwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPEdhbWVTdGF0ZT4gPSBzdG9yZVxuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKClcblx0XHRpZiAodGhpcy5vbkluaXQpIHNldFRpbWVvdXQoKCkgPT4gKHRoaXMub25Jbml0IGFzIGFueSkoKSwgMSlcblx0fVxuXG5cdHB1YmxpYyBvbkluaXQ/KCk6IHZvaWRcblx0cHVibGljIG9uQ2hhbmdlcz8oKTogdm9pZFxuXHRwdWJsaWMgYWJzdHJhY3QgcmVuZGVyKCk6IHZvaWRcblxuXHRwdWJsaWMgZ2V0IHN0YXRlKCkge1xuXHRcdHJldHVybiB0aGlzLnN0b3JlLmN1cnJlbnRTdGF0ZVxuXHR9XG5cblx0cHVibGljIGdldCBjdXJzb3JQb3NpdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZS5pbnB1dC5jdXJzb3JQb3NpdGlvblxuXHR9XG5cblx0cHVibGljIHByaW50U3RhdGUoXG5cdFx0eDogbnVtYmVyLFxuXHRcdHk6IG51bWJlcixcblx0XHRzaXplOiBudW1iZXIsXG5cdFx0c2VsZWN0b3I/OiAoc3RhdGU6IEdhbWVTdGF0ZSkgPT4gYW55LFxuXHRcdGNvbG9yOiBzdHJpbmcgPSAneWVsbG93J1xuXHQpIHtcblx0XHRjb25zdCB7IGN1cnJlbnRTdGF0ZSB9ID0gdGhpcy5zdG9yZVxuXHRcdGNvbnN0IHRleHQgPSBKU09OLnN0cmluZ2lmeShcblx0XHRcdHNlbGVjdG9yID8gc2VsZWN0b3IoY3VycmVudFN0YXRlKSA6IGN1cnJlbnRTdGF0ZVxuXHRcdClcblxuXHRcdHRoaXMuZmlsbFRleHQoe1xuXHRcdFx0eCxcblx0XHRcdHksXG5cdFx0XHR0ZXh0LFxuXHRcdFx0c2l6ZSxcblx0XHRcdG5hbWU6IGNvbmZpZy5mb250TmFtZSxcblx0XHRcdGNvbG9yXG5cdFx0fSlcblx0fVxuXG5cdHB1YmxpYyBzZXRGb250U2l6ZShzaXplOiBudW1iZXIsIGZvbnQ6IHN0cmluZyA9IGNvbmZpZy5mb250TmFtZSkge1xuXHRcdHN1cGVyLnNldEZvbnRTaXplKHNpemUsIGZvbnQpXG5cdH1cblxuXHRwdWJsaWMgZHJhd0N1cnNvcihcblx0XHR4OiBudW1iZXIgPSB0aGlzLmN1cnNvclBvc2l0aW9uID8gdGhpcy5jdXJzb3JQb3NpdGlvblswXSA6IDAsXG5cdFx0eTogbnVtYmVyID0gdGhpcy5jdXJzb3JQb3NpdGlvbiA/IHRoaXMuY3Vyc29yUG9zaXRpb25bMV0gOiAwXG5cdCkge1xuXHRcdHRoaXMubG9hZEZyYW1lKClcblx0XHRjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpXG5cdFx0aW1hZ2Uuc3JjID0gUG9pbnRlclxuXHRcdHRoaXMuY3R4LmRyYXdJbWFnZShpbWFnZSwgeCAtIDQsIHkgLSAyKVxuXHR9XG5cblx0cHVibGljIGN1cnNvckluQXJlYSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSB7XG5cdFx0aWYgKCF0aGlzLnN0YXRlPy5pbnB1dD8uY3Vyc29yUG9zaXRpb24pIHJldHVybiBmYWxzZVxuXHRcdGNvbnN0IFtteCwgbXldID0gdGhpcy5zdGF0ZS5pbnB1dC5jdXJzb3JQb3NpdGlvblxuXHRcdGNvbnN0IGlzSW5BcmVhID0gbXggPj0geDEgJiYgbXggPD0geDIgJiYgbXkgPj0geTEgJiYgbXkgPD0geTJcblxuXHRcdHJldHVybiBpc0luQXJlYVxuXHR9XG5cblx0cHVibGljIGtleUlzUHJlc3NlZChrZXk6IGtleW9mIHR5cGVvZiBjb25maWcua2V5QmluZGluZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZT8uaW5wdXQ/LmtleXNEb3duPy5pbmNsdWRlcyhrZXkpXG5cdH1cbn1cbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX09ic2VydmFibGUsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfb3BlcmF0b3JzX3JlZkNvdW50IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0U3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHJlZkNvdW50IGFzIGhpZ2hlck9yZGVyUmVmQ291bnQgfSBmcm9tICcuLi9vcGVyYXRvcnMvcmVmQ291bnQnO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb25uZWN0YWJsZU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVPYnNlcnZhYmxlKHNvdXJjZSwgc3ViamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgICAgICBfdGhpcy5fcmVmQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5faXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN1YmplY3QoKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmdldFN1YmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5fc3ViamVjdDtcbiAgICAgICAgaWYgKCFzdWJqZWN0IHx8IHN1YmplY3QuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJqZWN0O1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuX2Nvbm5lY3Rpb247XG4gICAgICAgIGlmICghY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5faXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29ubmVjdGlvbiA9IHRoaXMuX2Nvbm5lY3Rpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmFkZCh0aGlzLnNvdXJjZVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUobmV3IENvbm5lY3RhYmxlU3Vic2NyaWJlcih0aGlzLmdldFN1YmplY3QoKSwgdGhpcykpKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLnJlZkNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaGlnaGVyT3JkZXJSZWZDb3VudCgpKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgQ29ubmVjdGFibGVPYnNlcnZhYmxlIH07XG5leHBvcnQgdmFyIGNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbm5lY3RhYmxlUHJvdG8gPSBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZXJhdG9yOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgIF9yZWZDb3VudDogeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgICAgX3N1YmplY3Q6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgIF9jb25uZWN0aW9uOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgICBfc3Vic2NyaWJlOiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLl9zdWJzY3JpYmUgfSxcbiAgICAgICAgX2lzQ29tcGxldGU6IHsgdmFsdWU6IGNvbm5lY3RhYmxlUHJvdG8uX2lzQ29tcGxldGUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgIGdldFN1YmplY3Q6IHsgdmFsdWU6IGNvbm5lY3RhYmxlUHJvdG8uZ2V0U3ViamVjdCB9LFxuICAgICAgICBjb25uZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmNvbm5lY3QgfSxcbiAgICAgICAgcmVmQ291bnQ6IHsgdmFsdWU6IGNvbm5lY3RhYmxlUHJvdG8ucmVmQ291bnQgfVxuICAgIH07XG59KSgpO1xudmFyIENvbm5lY3RhYmxlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb25uZWN0YWJsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmIChjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVTdWJzY3JpYmVyO1xufShTdWJqZWN0U3Vic2NyaWJlcikpO1xudmFyIFJlZkNvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRPcGVyYXRvcihjb25uZWN0YWJsZSkge1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgfVxuICAgIFJlZkNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCsrO1xuICAgICAgICB2YXIgcmVmQ291bnRlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgY29ubmVjdGFibGUpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcbiAgICAgICAgaWYgKCFyZWZDb3VudGVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmVmQ291bnRlci5jb25uZWN0aW9uID0gY29ubmVjdGFibGUuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVmQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZkNvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWZDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBpZiAoIWNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSBjb25uZWN0YWJsZS5fcmVmQ291bnQ7XG4gICAgICAgIGlmIChyZWZDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCA9IHJlZkNvdW50IC0gMTtcbiAgICAgICAgaWYgKHJlZkNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uZWN0aW9uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICBzaGFyZWRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCZWhhdmlvclN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmVoYXZpb3JTdWJqZWN0KF92YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudGhyb3duRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy5fdmFsdWUgPSB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBCZWhhdmlvclN1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX05vdGlmaWNhdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGF5ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9ic2VydmVPbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuICAgIH07XG59XG52YXIgT2JzZXJ2ZU9uT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIE9ic2VydmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNjaGVkdWxlciwgdGhpcy5kZWxheSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmVPbk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk9wZXJhdG9yIH07XG52YXIgT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPYnNlcnZlT25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmVPblN1YnNjcmliZXIoZGVzdGluYXRpb24sIHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZU1lc3NhZ2UgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCBuZXcgT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIHRoaXMuZGVzdGluYXRpb24pKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT2JzZXJ2ZU9uU3Vic2NyaWJlciB9O1xudmFyIE9ic2VydmVPbk1lc3NhZ2UgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk1lc3NhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBUaW1lb3V0RXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRFcnJvckltcGwoKSB7XG4gICAgICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdUaW1lb3V0IGhhcyBvY2N1cnJlZCc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgVGltZW91dEVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gVGltZW91dEVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIFRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lb3V0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tZXJnZUFsbCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzU2NoZWR1bGVyLF9vcGVyYXRvcnNfbWVyZ2VBbGwsX2Zyb21BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuICAgIHZhciBsYXN0ID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKGxhc3QpKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgICAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID4gMSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGxhc3QgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gbnVsbCAmJiBvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgb2JzZXJ2YWJsZXNbMF0gaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlQWxsKGNvbmN1cnJlbnQpKGZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfaXNBcnJheSxfZnJvbUFycmF5LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gcmFjZSgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmIChpc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5KG9ic2VydmFibGVzLCB1bmRlZmluZWQpLmxpZnQobmV3IFJhY2VPcGVyYXRvcigpKTtcbn1cbnZhciBSYWNlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmFjZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBSYWNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSYWNlU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmFjZU9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IFJhY2VPcGVyYXRvciB9O1xudmFyIFJhY2VTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJhY2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJhY2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNGaXJzdCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKG9ic2VydmFibGUpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcy5wdXNoKG9ic2VydmFibGUpO1xuICAgIH07XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gdGhpcy5vYnNlcnZhYmxlcztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXRoaXMuaGFzRmlyc3Q7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG9ic2VydmFibGUsIG9ic2VydmFibGUsIGkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSYWNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICBpZiAoIXRoaXMuaGFzRmlyc3QpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gb3V0ZXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBSYWNlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBSYWNlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3NjaGVkdWxlcl9hc3luYyxfdXRpbF9pc051bWVyaWMsX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNOdW1lcmljIH0gZnJvbSAnLi4vdXRpbC9pc051bWVyaWMnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBwZXJpb2RPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICBkdWVUaW1lID0gMDtcbiAgICB9XG4gICAgdmFyIHBlcmlvZCA9IC0xO1xuICAgIGlmIChpc051bWVyaWMocGVyaW9kT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgIHBlcmlvZCA9IE51bWJlcihwZXJpb2RPclNjaGVkdWxlcikgPCAxICYmIDEgfHwgTnVtYmVyKHBlcmlvZE9yU2NoZWR1bGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTY2hlZHVsZXIocGVyaW9kT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IHBlcmlvZE9yU2NoZWR1bGVyO1xuICAgIH1cbiAgICBpZiAoIWlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZHVlID0gaXNOdW1lcmljKGR1ZVRpbWUpXG4gICAgICAgICAgICA/IGR1ZVRpbWVcbiAgICAgICAgICAgIDogKCtkdWVUaW1lIC0gc2NoZWR1bGVyLm5vdygpKTtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgZHVlLCB7XG4gICAgICAgICAgICBpbmRleDogMCwgcGVyaW9kOiBwZXJpb2QsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBpbmRleCA9IHN0YXRlLmluZGV4LCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2QsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIHN1YnNjcmliZXIubmV4dChpbmRleCk7XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAocGVyaW9kID09PSAtMSkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH1cbiAgICBzdGF0ZS5pbmRleCA9IGluZGV4ICsgMTtcbiAgICB0aGlzLnNjaGVkdWxlKHN0YXRlLCBwZXJpb2QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zY2hlZHVsZU9ic2VydmFibGUsX3NjaGVkdWxlUHJvbWlzZSxfc2NoZWR1bGVBcnJheSxfc2NoZWR1bGVJdGVyYWJsZSxfdXRpbF9pc0ludGVyb3BPYnNlcnZhYmxlLF91dGlsX2lzUHJvbWlzZSxfdXRpbF9pc0FycmF5TGlrZSxfdXRpbF9pc0l0ZXJhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZShpbnB1dCkgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0IHx8IGlucHV0KSArICcgaXMgbm90IG9ic2VydmFibGUnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXRbU3ltYm9sX29ic2VydmFibGVdID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbixfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgICAgIHN1Yi5hZGQob2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7IH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7IH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KSk7IH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgJiYgdHlwZW9mIGlucHV0W1N5bWJvbF9pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uLF9zeW1ib2xfaXRlcmF0b3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgaXRlcmF0b3I7XG4gICAgICAgIHN1Yi5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yICYmIHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHJlc3VsdC5kb25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgUXVldWVBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUXVldWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUXVldWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIChkZWxheSA+IDAgfHwgdGhpcy5jbG9zZWQpID9cbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSkgOlxuICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHx8IChkZWxheSA9PT0gbnVsbCAmJiB0aGlzLmRlbGF5ID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuZmx1c2godGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUXVldWVBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBRdWV1ZUFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBRdWV1ZVNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhRdWV1ZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUXVldWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBRdWV1ZVNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9RdWV1ZUFjdGlvbixfUXVldWVTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgUXVldWVBY3Rpb24gfSBmcm9tICcuL1F1ZXVlQWN0aW9uJztcbmltcG9ydCB7IFF1ZXVlU2NoZWR1bGVyIH0gZnJvbSAnLi9RdWV1ZVNjaGVkdWxlcic7XG5leHBvcnQgdmFyIHF1ZXVlID0gLypAX19QVVJFX18qLyBuZXcgUXVldWVTY2hlZHVsZXIoUXVldWVBY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVldWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbnZhciBTdWJqZWN0U3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3RTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmlwdGlvbihzdWJqZWN0LCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzU3RvcHBlZCB8fCBzdWJqZWN0LmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpYmVySW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZih0aGlzLnN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0U3Vic2NyaXB0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0FycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdChwcmVkLCB0aGlzQXJnKSB7XG4gICAgZnVuY3Rpb24gbm90UHJlZCgpIHtcbiAgICAgICAgcmV0dXJuICEobm90UHJlZC5wcmVkLmFwcGx5KG5vdFByZWQudGhpc0FyZywgYXJndW1lbnRzKSk7XG4gICAgfVxuICAgIG5vdFByZWQucHJlZCA9IHByZWQ7XG4gICAgbm90UHJlZC50aGlzQXJnID0gdGhpc0FyZztcbiAgICByZXR1cm4gbm90UHJlZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdC5qcy5tYXBcbiIsImltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vbGliL3N0b3JlJ1xuaW1wb3J0IHtcblx0c3RhdGVTdWJqZWN0LFxuXHRhY3Rpb25zT2JzZXJ2ZXIsXG5cdHJlZHVjZXJNYW5hZ2VyLFxuXHRHYW1lU3RhdGVcbn0gZnJvbSAnLi9kZXBzJ1xuXG5leHBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tICcuL2RlcHMnXG5leHBvcnQgY29uc3Qgc3RvcmU6IFN0b3JlPEdhbWVTdGF0ZT4gPSBuZXcgU3RvcmU8R2FtZVN0YXRlPihcblx0c3RhdGVTdWJqZWN0LFxuXHRhY3Rpb25zT2JzZXJ2ZXIsXG5cdHJlZHVjZXJNYW5hZ2VyXG4pXG4iLCJpbXBvcnQgeyBjcmVhdGVBY3Rpb24sIHByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3N0b3JlJ1xyXG5pbXBvcnQgeyBSb29tIH0gZnJvbSAnLi4vcm9vbSdcclxuXHJcbmV4cG9ydCBjb25zdCB3b3JsZEluaXQgPSBjcmVhdGVBY3Rpb24oJ1tEdW5nZW9uXSBXb3JsZCBJbml0JylcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRSb29tID0gY3JlYXRlQWN0aW9uKFxyXG5cdCdbRHVuZ2Vvbl0gQWRkIFJvb20nLFxyXG5cdHByb3BzPHtcclxuXHRcdGNvb3JkaW5hdGVzOiBbbnVtYmVyLCBudW1iZXJdXHJcblx0XHRyb29tOiBSb29tXHJcblx0fT4oKVxyXG4pXHJcblxyXG5leHBvcnQgY29uc3QgZW50ZXJSb29tID0gY3JlYXRlQWN0aW9uKFxyXG5cdCdbRHVuZ2Vvbl0gRW50ZXIgUm9vbScsXHJcblx0cHJvcHM8eyB4OiBudW1iZXI7IHk6IG51bWJlciB9PigpXHJcbilcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRBY3RpdmVSb29tID0gY3JlYXRlQWN0aW9uKFxyXG5cdCdbRHVuZ2Vvbl0gU2V0IEFjdGl2ZSBSb29tJyxcclxuXHRwcm9wczx7IHJvb21JRDogc3RyaW5nIH0+KClcclxuKVxyXG4iLCJpbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSAnLi4vcmVuZGVyYWJsZSdcclxuXHJcbmV4cG9ydCB0eXBlIENoYW5nZVNjZW5lID0gKHNjZW5lOiBSZW5kZXJhYmxlKSA9PiB2b2lkXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2NlbmUgZXh0ZW5kcyBSZW5kZXJhYmxlIHtcclxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2V0QWN0aXZlU2NlbmU6IENoYW5nZVNjZW5lKSB7XHJcblx0XHRzdXBlcigpXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgb25Jbml0PygpOiB2b2lkXHJcblx0cHVibGljIG9uQ2hhbmdlcz8oKTogdm9pZFxyXG5cdHB1YmxpYyBhYnN0cmFjdCByZW5kZXIoKTogdm9pZFxyXG59XHJcbiIsImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnXG5cbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vbW9kZWxzJ1xuXG5leHBvcnQgY2xhc3MgQWN0aW9uc1N1YmplY3QgZXh0ZW5kcyBCZWhhdmlvclN1YmplY3Q8QWN0aW9uPiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHsgdHlwZTogJ2luaXQnIH0pXG5cdH1cblxuXHRuZXh0KGFjdGlvbjogQWN0aW9uKTogdm9pZCB7XG5cdFx0aWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYFxuXHRcdFx0XHREaXNwYXRjaCBleHBlY3RlZCBhbiBvYmplY3QsIGluc3RlYWQgaXQgcmVjZWl2ZWQgYSBmdW5jdGlvbi5cblx0XHRcdFx0SWYgeW91J3JlIHVzaW5nIHRoZSBjcmVhdGVBY3Rpb24gZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGZ1bmN0aW9uXG5cdFx0XHRcdGJlZm9yZSBkaXNwYXRjaGluZyB0aGUgYWN0aW9uLiBGb3IgZXhhbXBsZSwgc29tZUFjdGlvbiBzaG91bGQgYmUgc29tZUFjdGlvbigpLmApXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgQWN0aW9ucyBtdXN0IGJlIG9iamVjdHNgKVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgQWN0aW9ucyBtdXN0IGhhdmUgYSB0eXBlIHByb3BlcnR5YClcblx0XHR9XG5cdFx0c3VwZXIubmV4dChhY3Rpb24pXG5cdH1cbn1cbiIsImltcG9ydCB7IE9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5cbmltcG9ydCB7IEFjdGlvbkNyZWF0b3IsIENyZWF0b3IsIEFjdGlvbiB9IGZyb20gJy4vbW9kZWxzJ1xuXG50eXBlIEFjdGlvbkV4dHJhY3Rvcjxcblx0VCBleHRlbmRzIHN0cmluZyB8IEFDLFxuXHRBQyBleHRlbmRzIEFjdGlvbkNyZWF0b3I8c3RyaW5nLCBDcmVhdG9yPixcblx0RVxuPiA9IFQgZXh0ZW5kcyBzdHJpbmcgPyBFIDogUmV0dXJuVHlwZTxFeHRyYWN0PFQsIEFDPj5cblxuZXhwb3J0IGZ1bmN0aW9uIG9mVHlwZTxcblx0QUMgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yPHN0cmluZywgQ3JlYXRvcj5bXSxcblx0VSBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcblx0ViA9IFJldHVyblR5cGU8QUNbbnVtYmVyXT5cbj4oLi4uYWxsb3dlZFR5cGVzOiBBQyk6IE9wZXJhdG9yRnVuY3Rpb248VSwgVj5cblxuZXhwb3J0IGZ1bmN0aW9uIG9mVHlwZTxcblx0RSBleHRlbmRzIEV4dHJhY3Q8VSwgeyB0eXBlOiBUMSB9Pixcblx0QUMgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yPHN0cmluZywgQ3JlYXRvcj4sXG5cdFQxIGV4dGVuZHMgc3RyaW5nIHwgQUMsXG5cdFUgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24sXG5cdFYgPSBUMSBleHRlbmRzIHN0cmluZyA/IEUgOiBSZXR1cm5UeXBlPEV4dHJhY3Q8VDEsIEFDPj5cbj4odDE6IFQxKTogT3BlcmF0b3JGdW5jdGlvbjxVLCBWPlxuZXhwb3J0IGZ1bmN0aW9uIG9mVHlwZTxcblx0RSBleHRlbmRzIEV4dHJhY3Q8VSwgeyB0eXBlOiBUMSB8IFQyIH0+LFxuXHRBQyBleHRlbmRzIEFjdGlvbkNyZWF0b3I8c3RyaW5nLCBDcmVhdG9yPixcblx0VDEgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VDIgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VSBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcblx0ViA9IEFjdGlvbkV4dHJhY3RvcjxUMSB8IFQyLCBBQywgRT5cbj4odDE6IFQxLCB0MjogVDIpOiBPcGVyYXRvckZ1bmN0aW9uPFUsIFY+XG5leHBvcnQgZnVuY3Rpb24gb2ZUeXBlPFxuXHRFIGV4dGVuZHMgRXh0cmFjdDxVLCB7IHR5cGU6IFQxIHwgVDIgfCBUMyB9Pixcblx0QUMgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yPHN0cmluZywgQ3JlYXRvcj4sXG5cdFQxIGV4dGVuZHMgc3RyaW5nIHwgQUMsXG5cdFQyIGV4dGVuZHMgc3RyaW5nIHwgQUMsXG5cdFQzIGV4dGVuZHMgc3RyaW5nIHwgQUMsXG5cdFUgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24sXG5cdFYgPSBBY3Rpb25FeHRyYWN0b3I8VDEgfCBUMiB8IFQzLCBBQywgRT5cbj4odDE6IFQxLCB0MjogVDIsIHQzOiBUMyk6IE9wZXJhdG9yRnVuY3Rpb248VSwgVj5cbmV4cG9ydCBmdW5jdGlvbiBvZlR5cGU8XG5cdEUgZXh0ZW5kcyBFeHRyYWN0PFUsIHsgdHlwZTogVDEgfCBUMiB8IFQzIHwgVDQgfT4sXG5cdEFDIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcjxzdHJpbmcsIENyZWF0b3I+LFxuXHRUMSBleHRlbmRzIHN0cmluZyB8IEFDLFxuXHRUMiBleHRlbmRzIHN0cmluZyB8IEFDLFxuXHRUMyBleHRlbmRzIHN0cmluZyB8IEFDLFxuXHRUNCBleHRlbmRzIHN0cmluZyB8IEFDLFxuXHRVIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uLFxuXHRWID0gQWN0aW9uRXh0cmFjdG9yPFQxIHwgVDIgfCBUMyB8IFQ0LCBBQywgRT5cbj4odDE6IFQxLCB0MjogVDIsIHQzOiBUMywgdDQ6IFQ0KTogT3BlcmF0b3JGdW5jdGlvbjxVLCBWPlxuZXhwb3J0IGZ1bmN0aW9uIG9mVHlwZTxcblx0RSBleHRlbmRzIEV4dHJhY3Q8VSwgeyB0eXBlOiBUMSB8IFQyIHwgVDMgfCBUNCB8IFQ1IH0+LFxuXHRBQyBleHRlbmRzIEFjdGlvbkNyZWF0b3I8c3RyaW5nLCBDcmVhdG9yPixcblx0VDEgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VDIgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VDMgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VDQgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VDUgZXh0ZW5kcyBzdHJpbmcgfCBBQyxcblx0VSBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcblx0ViA9IEFjdGlvbkV4dHJhY3RvcjxUMSB8IFQyIHwgVDMgfCBUNCB8IFQ1LCBBQywgRT5cbj4odDE6IFQxLCB0MjogVDIsIHQzOiBUMywgdDQ6IFQ0LCB0NTogVDUpOiBPcGVyYXRvckZ1bmN0aW9uPFUsIFY+XG5cbmV4cG9ydCBmdW5jdGlvbiBvZlR5cGU8ViBleHRlbmRzIEFjdGlvbj4oXG5cdC4uLmFsbG93ZWRUeXBlczogQXJyYXk8c3RyaW5nIHwgQWN0aW9uQ3JlYXRvcjxzdHJpbmcsIENyZWF0b3I+PlxuKTogT3BlcmF0b3JGdW5jdGlvbjxBY3Rpb24sIFY+XG5leHBvcnQgZnVuY3Rpb24gb2ZUeXBlKFxuXHQuLi5hbGxvd2VkVHlwZXM6IEFycmF5PHN0cmluZyB8IEFjdGlvbkNyZWF0b3I8c3RyaW5nLCBDcmVhdG9yPj5cbik6IE9wZXJhdG9yRnVuY3Rpb248QWN0aW9uLCBBY3Rpb24+IHtcblx0cmV0dXJuIGZpbHRlcigoYWN0aW9uOiBBY3Rpb24pID0+XG5cdFx0YWxsb3dlZFR5cGVzLnNvbWUodHlwZU9yQWN0aW9uQ3JlYXRvciA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIENvbXBhcmluZyB0aGUgc3RyaW5nIHRvIHR5cGVcblx0XHRcdFx0cmV0dXJuIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IGFjdGlvbi50eXBlXG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlIGFyZSBmaWx0ZXJpbmcgYnkgQWN0aW9uQ3JlYXRvclxuXHRcdFx0cmV0dXJuIHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZSA9PT0gYWN0aW9uLnR5cGVcblx0XHR9KVxuXHQpXG59XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcblxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJ1xuaW1wb3J0IHsgb2ZUeXBlIH0gZnJvbSAnLi4vLi4vbGliL3N0b3JlL29mVHlwZSdcbmltcG9ydCB7IENvb3JkaW5hdGVzIH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzJ1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9zdG9yZSdcblxuaW1wb3J0ICogYXMgZnJvbUFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJ1xuaW1wb3J0IHsgdXNlcklucHV0UmVkdWNlciB9IGZyb20gJy4vcmVkdWNlcidcblxubGV0IGxhc3RDdXJzb3JVcGRhdGU6IG51bWJlclxuXG5leHBvcnQgY2xhc3MgSW5wdXRIYW5kbGVyIHtcblx0cHVibGljIHN0YXRpYyBzdG9yZU5vZGVOYW1lID0gJ2lucHV0JyBhcyAnaW5wdXQnXG5cblx0cHVibGljIHN0YXRpYyBvbkluaXQoKSB7XG5cdFx0c3RvcmUuYWRkUmVkdWNlcih0aGlzLnN0b3JlTm9kZU5hbWUsIHVzZXJJbnB1dFJlZHVjZXIpXG5cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudmFsdWVPZigpXG5cdFx0XHRpZiAoIWxhc3RDdXJzb3JVcGRhdGUgfHwgbm93IC0gbGFzdEN1cnNvclVwZGF0ZSA+IGNvbmZpZy5jdXJzb3JQb2xsUmF0ZSkge1xuXHRcdFx0XHRzdG9yZS5kaXNwYXRjaChmcm9tQWN0aW9ucy5tb3VzZU1vdmUoeyBldmVudCB9KSlcblx0XHRcdFx0bGFzdEN1cnNvclVwZGF0ZSA9IG5vd1xuXHRcdFx0fVxuXHRcdH0pXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PlxuXHRcdFx0c3RvcmUuZGlzcGF0Y2goZnJvbUFjdGlvbnMubW91c2VEb3duKHsgZXZlbnQgfSkpXG5cdFx0KVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+XG5cdFx0XHRzdG9yZS5kaXNwYXRjaChmcm9tQWN0aW9ucy5tb3VzZVVwKHsgZXZlbnQgfSkpXG5cdFx0KVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChldmVudDogTW91c2VFdmVudCkgPT5cblx0XHRcdHN0b3JlLmRpc3BhdGNoKGZyb21BY3Rpb25zLm1vdXNlT3Zlcih7IGV2ZW50IH0pKVxuXHRcdClcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChldmVudDogTW91c2VFdmVudCkgPT5cblx0XHRcdHN0b3JlLmRpc3BhdGNoKGZyb21BY3Rpb25zLm1vdXNlT3V0KHsgZXZlbnQgfSkpXG5cdFx0KVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+XG5cdFx0XHRzdG9yZS5kaXNwYXRjaChmcm9tQWN0aW9ucy5rZXlEb3duKHsgZXZlbnQgfSkpXG5cdFx0KVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PlxuXHRcdFx0c3RvcmUuZGlzcGF0Y2goZnJvbUFjdGlvbnMua2V5VXAoeyBldmVudCB9KSlcblx0XHQpXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+XG5cdFx0XHRzdG9yZS5kaXNwYXRjaChmcm9tQWN0aW9ucy5rZXlQcmVzcyh7IGV2ZW50IH0pKVxuXHRcdClcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMga2V5Ym9hcmRFdmVudHMkKCkge1xuXHRcdHJldHVybiBzdG9yZS5hY3Rpb25zJC5waXBlKFxuXHRcdFx0b2ZUeXBlKGZyb21BY3Rpb25zLmtleURvd24sIGZyb21BY3Rpb25zLmtleVVwLCBmcm9tQWN0aW9ucy5rZXlQcmVzcylcblx0XHQpXG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIG1vdXNlRXZlbnRzJCgpIHtcblx0XHRyZXR1cm4gc3RvcmUuYWN0aW9ucyQucGlwZShcblx0XHRcdG9mVHlwZShcblx0XHRcdFx0ZnJvbUFjdGlvbnMubW91c2VNb3ZlLFxuXHRcdFx0XHRmcm9tQWN0aW9ucy5tb3VzZURvd24sXG5cdFx0XHRcdGZyb21BY3Rpb25zLm1vdXNlVXAsXG5cdFx0XHRcdGZyb21BY3Rpb25zLm1vdXNlT3Zlcixcblx0XHRcdFx0ZnJvbUFjdGlvbnMubW91c2VPdXRcblx0XHRcdClcblx0XHQpXG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGN1cnNvclBvc2l0aW9uJCgpIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZUV2ZW50cyQoKS5waXBlKFxuXHRcdFx0b2ZUeXBlKGZyb21BY3Rpb25zLm1vdXNlTW92ZSksXG5cdFx0XHRtYXAoKHsgZXZlbnQgfSkgPT4gZXZlbnQpLFxuXHRcdFx0bWFwKCh7IGNsaWVudFgsIGNsaWVudFkgfSkgPT4gW2NsaWVudFgsIGNsaWVudFldIGFzIENvb3JkaW5hdGVzKVxuXHRcdClcblx0fVxufVxuIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJ1xuaW1wb3J0IHsgY3JlYXRlUmVkdWNlciwgb24gfSBmcm9tICcuLi8uLi9saWIvc3RvcmUnXG5pbXBvcnQgKiBhcyBmcm9tQWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnXG5cbmNvbnN0IHsga2V5QmluZGluZ3MgfSA9IGNvbmZpZ1xudHlwZSBHYW1lS2V5ID0ga2V5b2YgdHlwZW9mIGtleUJpbmRpbmdzXG5jb25zdCBldmVudEtleUluS2V5YmluZHMgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKGtleUJpbmRpbmdzKS5maW5kKGdhbWVLZXkgPT5cblx0XHRrZXlCaW5kaW5nc1tnYW1lS2V5IGFzIEdhbWVLZXldLmluY2x1ZGVzKGV2ZW50LmtleSlcblx0KSBhcyBHYW1lS2V5IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRTdGF0ZSB7XG5cdGtleXNEb3duOiBBcnJheTxHYW1lS2V5PlxuXHRtb3VzZURvd246IGJvb2xlYW5cblx0Y3Vyc29yUG9zaXRpb246IFtudW1iZXIsIG51bWJlcl0gfCBudWxsXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVJbml0aWFsU3RhdGUgPSAoKTogSW5wdXRTdGF0ZSA9PiAoe1xuXHRrZXlzRG93bjogW10sXG5cdG1vdXNlRG93bjogZmFsc2UsXG5cdGN1cnNvclBvc2l0aW9uOiBudWxsXG59KVxuXG5leHBvcnQgY29uc3QgdXNlcklucHV0UmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoXG5cdGNyZWF0ZUluaXRpYWxTdGF0ZSgpLFxuXHRvbihmcm9tQWN0aW9ucy5tb3VzZU1vdmUsIChzdGF0ZTogSW5wdXRTdGF0ZSwgeyBldmVudCB9KSA9PiAoe1xuXHRcdC4uLnN0YXRlLFxuXHRcdGN1cnNvclBvc2l0aW9uOiBbZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WV0gYXMgW251bWJlciwgbnVtYmVyXVxuXHR9KSksXG5cdG9uKGZyb21BY3Rpb25zLm1vdXNlRG93biwgc3RhdGUgPT4gKHtcblx0XHQuLi5zdGF0ZSxcblx0XHRtb3VzZURvd246IHRydWVcblx0fSkpLFxuXHRvbihmcm9tQWN0aW9ucy5tb3VzZVVwLCBzdGF0ZSA9PiAoe1xuXHRcdC4uLnN0YXRlLFxuXHRcdG1vdXNlRG93bjogZmFsc2Vcblx0fSkpLFxuXHRvbihmcm9tQWN0aW9ucy5rZXlEb3duLCAoc3RhdGUsIHsgZXZlbnQgfSkgPT4ge1xuXHRcdGNvbnN0IG1hdGNoZWRLZXkgPSBldmVudEtleUluS2V5YmluZHMoZXZlbnQpXG5cblx0XHRpZiAobWF0Y2hlZEtleSAmJiAhc3RhdGUua2V5c0Rvd24uaW5jbHVkZXMobWF0Y2hlZEtleSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRrZXlzRG93bjogWy4uLnN0YXRlLmtleXNEb3duLCBtYXRjaGVkS2V5XVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzdGF0ZVxuXHR9KSxcblx0b24oZnJvbUFjdGlvbnMua2V5VXAsIChzdGF0ZSwgeyBldmVudCB9KSA9PiB7XG5cdFx0Y29uc3QgbWF0Y2hlZEtleSA9IGV2ZW50S2V5SW5LZXliaW5kcyhldmVudClcblxuXHRcdGlmIChtYXRjaGVkS2V5ICYmIHN0YXRlLmtleXNEb3duLmluY2x1ZGVzKG1hdGNoZWRLZXkpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0a2V5c0Rvd246IHN0YXRlLmtleXNEb3duLmZpbHRlcihrZXkgPT4ga2V5ICE9PSBtYXRjaGVkS2V5KVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzdGF0ZVxuXHR9KVxuKVxuIiwiaW1wb3J0IHsgY3JlYXRlQWN0aW9uLCBwcm9wcyB9IGZyb20gJy4uLy4uL2xpYi9zdG9yZSdcblxuZXhwb3J0IGNvbnN0IG1vdXNlTW92ZSA9IGNyZWF0ZUFjdGlvbihcblx0J1tVc2VyIElucHV0XSBtb3VzZW1vdmUnLFxuXHRwcm9wczx7IGV2ZW50OiBNb3VzZUV2ZW50IH0+KClcbilcblxuZXhwb3J0IGNvbnN0IG1vdXNlRG93biA9IGNyZWF0ZUFjdGlvbihcblx0J1tVc2VyIElucHV0XSBtb3VzZWRvd24nLFxuXHRwcm9wczx7IGV2ZW50OiBNb3VzZUV2ZW50IH0+KClcbilcblxuZXhwb3J0IGNvbnN0IG1vdXNlVXAgPSBjcmVhdGVBY3Rpb24oXG5cdCdbVXNlciBJbnB1dF0gbW91c2V1cCcsXG5cdHByb3BzPHsgZXZlbnQ6IE1vdXNlRXZlbnQgfT4oKVxuKVxuXG5leHBvcnQgY29uc3QgbW91c2VPdmVyID0gY3JlYXRlQWN0aW9uKFxuXHQnW1VzZXIgSW5wdXRdIG1vdXNlb3ZlcicsXG5cdHByb3BzPHsgZXZlbnQ6IE1vdXNlRXZlbnQgfT4oKVxuKVxuXG5leHBvcnQgY29uc3QgbW91c2VPdXQgPSBjcmVhdGVBY3Rpb24oXG5cdCdbVXNlciBJbnB1dF0gbW91c2VvdXQnLFxuXHRwcm9wczx7IGV2ZW50OiBNb3VzZUV2ZW50IH0+KClcbilcblxuZXhwb3J0IGNvbnN0IGtleURvd24gPSBjcmVhdGVBY3Rpb24oXG5cdCdbVXNlciBJbnB1dF0ga2V5ZG93bicsXG5cdHByb3BzPHsgZXZlbnQ6IEtleWJvYXJkRXZlbnQgfT4oKVxuKVxuXG5leHBvcnQgY29uc3Qga2V5VXAgPSBjcmVhdGVBY3Rpb24oXG5cdCdbVXNlciBJbnB1dF0ga2V5dXAnLFxuXHRwcm9wczx7IGV2ZW50OiBLZXlib2FyZEV2ZW50IH0+KClcbilcblxuZXhwb3J0IGNvbnN0IGtleVByZXNzID0gY3JlYXRlQWN0aW9uKFxuXHQnW1VzZXIgSW5wdXRdIGtleXByZXNzJyxcblx0cHJvcHM8eyBldmVudDogS2V5Ym9hcmRFdmVudCB9PigpXG4pXG4iLCJpbXBvcnQgeyBjcmVhdGVBY3Rpb24sIHByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3N0b3JlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE1haW5NZW51RGltZW5zaW9ucyB7XG5cdGJvZHk6IHtcblx0XHRoZWlnaHQ6IG51bWJlclxuXHRcdHdpZHRoOiBudW1iZXJcblx0XHRtYXJnaW46IG51bWJlclxuXHRcdHBvc2l0aW9uOiBbbnVtYmVyLCBudW1iZXJdXG5cdH1cblx0dGl0bGU6IHtcblx0XHRoZWlnaHQ6IG51bWJlclxuXHRcdHdpZHRoOiBudW1iZXJcblx0XHRwb3NpdGlvbjogW251bWJlciwgbnVtYmVyXVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVEaW1lbnNpb25zID0gY3JlYXRlQWN0aW9uKFxuXHQnW01haW4tTWVudV0gVXBkYXRlIFJlbmRlciBEaW1lbnNpb25zJyxcblx0cHJvcHM8e1xuXHRcdGRpbWVuc2lvbnM6IE1haW5NZW51RGltZW5zaW9uc1xuXHR9PigpXG4pXG4iLCJleHBvcnQgdHlwZSBDVFggPSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcblxuY29uc3QgZnJhbWVDYWNoZSA9IG5ldyBJbWFnZSgpXG5cbmV4cG9ydCBjbGFzcyBDYW52YXNBUEkge1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuXHRcdCdjYW52YXMnXG5cdClcblx0cHVibGljIHN0YXRpYyByZWFkb25seSBjdHg6IENUWCA9IENhbnZhc0FQSS5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKSBhcyBDVFhcblxuXHRwdWJsaWMgZ2V0IGN0eCgpIHtcblx0XHRyZXR1cm4gQ2FudmFzQVBJLmN0eFxuXHR9XG5cblx0cHVibGljIGdldCBjYW52YXMoKSB7XG5cdFx0cmV0dXJuIENhbnZhc0FQSS5jYW52YXNcblx0fVxuXG5cdHB1YmxpYyBnZXRDbGllbnRCb3VuZGluZ1JlY3QoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cdH1cblxuXHRwdWJsaWMgZ2V0Rm9udE5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY3R4LmZvbnQuc3BsaXQoJyAnKS5wb3AoKVxuXHR9XG5cblx0cHVibGljIGNsZWFyKCkge1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRDbGllbnRCb3VuZGluZ1JlY3QoKVxuXHRcdHRoaXMuZmlsbFJlY3QoeyB4OiAwLCB5OiAwLCB3aWR0aCwgaGVpZ2h0LCBjb2xvcjogJ2JsYWNrJyB9KVxuXHR9XG5cblx0cHVibGljIHNhdmVGcmFtZSgpOiB2b2lkIHtcblx0XHRmcmFtZUNhY2hlLnNyYyA9IHRoaXMuY3R4LmNhbnZhcy50b0RhdGFVUkwoKVxuXHR9XG5cblx0cHVibGljIGxvYWRGcmFtZSgpOiB2b2lkIHtcblx0XHRpZiAoZnJhbWVDYWNoZS5zcmMpIHtcblx0XHRcdHRoaXMuY3R4LmRyYXdJbWFnZShmcmFtZUNhY2hlLCAwLCAwKVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzZXRGb250U2l6ZShzaXplOiBudW1iZXIsIGZvbnQ6IHN0cmluZykge1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdGNvbnN0IHJlbGF0aXZlU2l6ZSA9IE1hdGguZmxvb3IoKHNpemUgLyAoKHdpZHRoICsgaGVpZ2h0KSAvIDQpKSAqIDEwMClcblx0XHR0aGlzLmN0eC5mb250ID0gYCR7cmVsYXRpdmVTaXplfXB4IFwiJHtmb250fVwiYFxuXHR9XG5cblx0cHVibGljIGRvV2l0aEZvbnQ8VCA9IHZvaWQ+KHtcblx0XHRmbixcblx0XHRhbGlnbixcblx0XHRiYXNlbGluZSxcblx0XHRjb2xvcixcblx0XHRhbHBoYSxcblx0XHRzaXplLFxuXHRcdG5hbWVcblx0fTogRG9XaXRoRm9udFBhcmFtczxUPik6IFQge1xuXHRcdGNvbnN0IHsgZm9udCwgdGV4dEFsaWduLCB0ZXh0QmFzZWxpbmUgfSA9IHRoaXMuY3R4XG5cdFx0dGhpcy5zZXRGb250U2l6ZShzaXplLCBuYW1lKVxuXHRcdHRoaXMuY3R4LnRleHRBbGlnbiA9IGFsaWduIHx8IHRleHRBbGlnblxuXHRcdHRoaXMuY3R4LnRleHRCYXNlbGluZSA9IGJhc2VsaW5lIHx8IHRleHRCYXNlbGluZVxuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5kb1dpdGhDb2xvcih7XG5cdFx0XHRmbjogKCkgPT4gZm4odGhpcy5jdHgpLFxuXHRcdFx0Y29sb3IsXG5cdFx0XHRhbHBoYVxuXHRcdH0pXG5cdFx0dGhpcy5jdHguZm9udCA9IGZvbnRcblx0XHR0aGlzLmN0eC50ZXh0QWxpZ24gPSB0ZXh0QWxpZ25cblx0XHR0aGlzLmN0eC50ZXh0QmFzZWxpbmUgPSB0ZXh0QmFzZWxpbmVcblx0XHRyZXR1cm4gdmFsdWVcblx0fVxuXG5cdHB1YmxpYyBkb1dpdGhDb2xvcjxUID0gdm9pZD4oeyBmbiwgY29sb3IsIGFscGhhIH06IERvV2l0aENvbG9yUGFyYW1zPFQ+KTogVCB7XG5cdFx0Y29uc3QgeyBnbG9iYWxBbHBoYSwgZmlsbFN0eWxlIH0gPSB0aGlzLmN0eFxuXHRcdHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNvbG9yIHx8IGZpbGxTdHlsZVxuXHRcdHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gYWxwaGEgfHwgMVxuXHRcdGNvbnN0IHZhbHVlID0gZm4odGhpcy5jdHgpXG5cdFx0dGhpcy5jdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlXG5cdFx0dGhpcy5jdHguZ2xvYmFsQWxwaGEgPSBnbG9iYWxBbHBoYVxuXHRcdHJldHVybiB2YWx1ZVxuXHR9XG5cblx0cHVibGljIGZpbGxSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3IsIGFscGhhIH06IEZpbGxSZWN0UGFyYW1zKTogdm9pZCB7XG5cdFx0dGhpcy5kb1dpdGhDb2xvcih7XG5cdFx0XHRmbjogKCkgPT4gdGhpcy5jdHguZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCksXG5cdFx0XHRjb2xvcixcblx0XHRcdGFscGhhXG5cdFx0fSlcblx0fVxuXG5cdHB1YmxpYyBmaWxsVGV4dCh7XG5cdFx0dGV4dCxcblx0XHR4LFxuXHRcdHksXG5cdFx0Y29sb3IsXG5cdFx0YWxwaGEsXG5cdFx0c2l6ZSxcblx0XHRhbGlnbixcblx0XHRiYXNlbGluZSxcblx0XHRuYW1lXG5cdH06IEZpbGxQYXJhbXMgJiBGb250UGFyYW1zICYgeyB0ZXh0OiBzdHJpbmcgfSk6IHZvaWQge1xuXHRcdHRoaXMuZG9XaXRoRm9udCh7XG5cdFx0XHRmbjogKCkgPT4gdGhpcy5jdHguZmlsbFRleHQodGV4dCwgeCwgeSksXG5cdFx0XHRjb2xvcixcblx0XHRcdGFscGhhLFxuXHRcdFx0c2l6ZSxcblx0XHRcdGFsaWduLFxuXHRcdFx0YmFzZWxpbmUsXG5cdFx0XHRuYW1lXG5cdFx0fSlcblx0fVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yUGFyYW1zIHtcblx0Y29sb3I/OiBzdHJpbmdcblx0YWxwaGE/OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxsUGFyYW1zIGV4dGVuZHMgQ29sb3JQYXJhbXMge1xuXHR4OiBudW1iZXJcblx0eTogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsbFJlY3RQYXJhbXMgZXh0ZW5kcyBGaWxsUGFyYW1zIHtcblx0d2lkdGg6IG51bWJlclxuXHRoZWlnaHQ6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRQYXJhbXMgZXh0ZW5kcyBDb2xvclBhcmFtcyB7XG5cdHNpemU6IG51bWJlclxuXHRhbGlnbj86IENhbnZhc1RleHRBbGlnblxuXHRiYXNlbGluZT86IENhbnZhc1RleHRCYXNlbGluZVxuXHRuYW1lOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxsVGV4dFBhcmFtcyBleHRlbmRzIEZpbGxQYXJhbXMge1xuXHR0ZXh0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdHhGdW5jdGlvbldyYXBwZXI8VD4ge1xuXHRmbjogKGN0eDogQ1RYKSA9PiBUXG59XG5cbmV4cG9ydCB0eXBlIERvV2l0aEZvbnRQYXJhbXM8VD4gPSBGb250UGFyYW1zICYgQ3R4RnVuY3Rpb25XcmFwcGVyPFQ+XG5leHBvcnQgdHlwZSBEb1dpdGhDb2xvclBhcmFtczxUPiA9IENvbG9yUGFyYW1zICYgQ3R4RnVuY3Rpb25XcmFwcGVyPFQ+XG4iLCJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9zdG9yZSdcclxuaW1wb3J0IHsgc2VsZWN0U2NlbmVzIH0gZnJvbSAnLi4vLi4vc3RvcmUvc2VsZWN0b3JzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlbGVjdER1bmdlb25TdGF0ZSA9IGNyZWF0ZVNlbGVjdG9yKFxyXG5cdHNlbGVjdFNjZW5lcyxcclxuXHQoeyBkdW5nZW9uIH0pID0+IGR1bmdlb25cclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IHNlbGVjdFJvb21zID0gY3JlYXRlU2VsZWN0b3IoXHJcblx0c2VsZWN0RHVuZ2VvblN0YXRlLFxyXG5cdCh7IHJvb21zIH0pID0+IHJvb21zXHJcbilcclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RBY3RpdmVSb29tID0gY3JlYXRlU2VsZWN0b3IoXHJcblx0c2VsZWN0RHVuZ2VvblN0YXRlLFxyXG5cdCh7IGFjdGl2ZVJvb20gfSkgPT4ge1xyXG5cdFx0Y29uc29sZS5sb2coJ2FjdGl2ZSByb29tOicsIGFjdGl2ZVJvb20pXHJcblx0XHRyZXR1cm4gYWN0aXZlUm9vbVxyXG5cdH1cclxuKVxyXG4iLCJpbXBvcnQgJy4vY3NzL2luZGV4LnNjc3MnXG5pbXBvcnQgKiBhcyBGb250RmFjZU9ic2VydmVyIGZyb20gJ2ZvbnRmYWNlb2JzZXJ2ZXInXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcbmltcG9ydCB7IEdhbWUgfSBmcm9tICcuL2dhbWUvZ2FtZSdcblxubmV3IEZvbnRGYWNlT2JzZXJ2ZXIoY29uZmlnLmZvbnROYW1lKS5sb2FkKCkudGhlbigoKSA9PiBuZXcgR2FtZShkb2N1bWVudC5ib2R5KSlcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gcmVxdWlyZShcIi4uL2Fzc2V0cy9QcmVzc1N0YXJ0MlAtUmVndWxhci50dGZcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBmb250LWZhY2V7Zm9udC1mYW1pbHk6J1ByZXNzIFN0YXJ0IDJQJztzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIik7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc3R5bGU6bm9ybWFsfWh0bWwsYm9keSxjYW52YXN7Zm9udC1mYW1pbHk6J1ByZXNzIFN0YXJ0IDJQJztkaXNwbGF5OmJsb2NrO21hcmdpbjowO3BhZGRpbmc6MDt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmg7Y3Vyc29yOm5vbmV9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyYzQwNGZkMDZjZDY3NzcwODA3ZDI0MmIyZDJlNWExNi50dGZcIjsiLCIvKiBGb250IEZhY2UgT2JzZXJ2ZXIgdjIuMS4wIC0gwqkgQnJhbSBTdGVpbi4gTGljZW5zZTogQlNELTMtQ2xhdXNlICovKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbChhLGIpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsYiwhMSk6YS5hdHRhY2hFdmVudChcInNjcm9sbFwiLGIpfWZ1bmN0aW9uIG0oYSl7ZG9jdW1lbnQuYm9keT9hKCk6ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcj9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uIGMoKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGMpO2EoKX0pOmRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24gaygpe2lmKFwiaW50ZXJhY3RpdmVcIj09ZG9jdW1lbnQucmVhZHlTdGF0ZXx8XCJjb21wbGV0ZVwiPT1kb2N1bWVudC5yZWFkeVN0YXRlKWRvY3VtZW50LmRldGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsayksYSgpfSl9O2Z1bmN0aW9uIHQoYSl7dGhpcy5hPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dGhpcy5hLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpO3RoaXMuYS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhKSk7dGhpcy5iPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO3RoaXMuYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTt0aGlzLmg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7dGhpcy5mPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO3RoaXMuZz0tMTt0aGlzLmIuc3R5bGUuY3NzVGV4dD1cIm1heC13aWR0aDpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7b3ZlcmZsb3c6c2Nyb2xsO2ZvbnQtc2l6ZToxNnB4O1wiO3RoaXMuYy5zdHlsZS5jc3NUZXh0PVwibWF4LXdpZHRoOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtvdmVyZmxvdzpzY3JvbGw7Zm9udC1zaXplOjE2cHg7XCI7XG50aGlzLmYuc3R5bGUuY3NzVGV4dD1cIm1heC13aWR0aDpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7b3ZlcmZsb3c6c2Nyb2xsO2ZvbnQtc2l6ZToxNnB4O1wiO3RoaXMuaC5zdHlsZS5jc3NUZXh0PVwiZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjAwJTtoZWlnaHQ6MjAwJTtmb250LXNpemU6MTZweDttYXgtd2lkdGg6bm9uZTtcIjt0aGlzLmIuYXBwZW5kQ2hpbGQodGhpcy5oKTt0aGlzLmMuYXBwZW5kQ2hpbGQodGhpcy5mKTt0aGlzLmEuYXBwZW5kQ2hpbGQodGhpcy5iKTt0aGlzLmEuYXBwZW5kQ2hpbGQodGhpcy5jKX1cbmZ1bmN0aW9uIHUoYSxiKXthLmEuc3R5bGUuY3NzVGV4dD1cIm1heC13aWR0aDpub25lO21pbi13aWR0aDoyMHB4O21pbi1oZWlnaHQ6MjBweDtkaXNwbGF5OmlubGluZS1ibG9jaztvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6YXV0bzttYXJnaW46MDtwYWRkaW5nOjA7dG9wOi05OTlweDt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1zeW50aGVzaXM6bm9uZTtmb250OlwiK2IrXCI7XCJ9ZnVuY3Rpb24geihhKXt2YXIgYj1hLmEub2Zmc2V0V2lkdGgsYz1iKzEwMDthLmYuc3R5bGUud2lkdGg9YytcInB4XCI7YS5jLnNjcm9sbExlZnQ9YzthLmIuc2Nyb2xsTGVmdD1hLmIuc2Nyb2xsV2lkdGgrMTAwO3JldHVybiBhLmchPT1iPyhhLmc9YiwhMCk6ITF9ZnVuY3Rpb24gQShhLGIpe2Z1bmN0aW9uIGMoKXt2YXIgYT1rO3ooYSkmJmEuYS5wYXJlbnROb2RlJiZiKGEuZyl9dmFyIGs9YTtsKGEuYixjKTtsKGEuYyxjKTt6KGEpfTtmdW5jdGlvbiBCKGEsYil7dmFyIGM9Ynx8e307dGhpcy5mYW1pbHk9YTt0aGlzLnN0eWxlPWMuc3R5bGV8fFwibm9ybWFsXCI7dGhpcy53ZWlnaHQ9Yy53ZWlnaHR8fFwibm9ybWFsXCI7dGhpcy5zdHJldGNoPWMuc3RyZXRjaHx8XCJub3JtYWxcIn12YXIgQz1udWxsLEQ9bnVsbCxFPW51bGwsRj1udWxsO2Z1bmN0aW9uIEcoKXtpZihudWxsPT09RClpZihKKCkmJi9BcHBsZS8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnZlbmRvcikpe3ZhciBhPS9BcHBsZVdlYktpdFxcLyhbMC05XSspKD86XFwuKFswLTldKykpKD86XFwuKFswLTldKykpLy5leGVjKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtEPSEhYSYmNjAzPnBhcnNlSW50KGFbMV0sMTApfWVsc2UgRD0hMTtyZXR1cm4gRH1mdW5jdGlvbiBKKCl7bnVsbD09PUYmJihGPSEhZG9jdW1lbnQuZm9udHMpO3JldHVybiBGfVxuZnVuY3Rpb24gSygpe2lmKG51bGw9PT1FKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RyeXthLnN0eWxlLmZvbnQ9XCJjb25kZW5zZWQgMTAwcHggc2Fucy1zZXJpZlwifWNhdGNoKGIpe31FPVwiXCIhPT1hLnN0eWxlLmZvbnR9cmV0dXJuIEV9ZnVuY3Rpb24gTChhLGIpe3JldHVyblthLnN0eWxlLGEud2VpZ2h0LEsoKT9hLnN0cmV0Y2g6XCJcIixcIjEwMHB4XCIsYl0uam9pbihcIiBcIil9XG5CLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxrPWF8fFwiQkVTYnN3eVwiLHI9MCxuPWJ8fDNFMyxIPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhLGIpe2lmKEooKSYmIUcoKSl7dmFyIE09bmV3IFByb21pc2UoZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBlKCl7KG5ldyBEYXRlKS5nZXRUaW1lKCktSD49bj9iKEVycm9yKFwiXCIrbitcIm1zIHRpbWVvdXQgZXhjZWVkZWRcIikpOmRvY3VtZW50LmZvbnRzLmxvYWQoTChjLCdcIicrYy5mYW1pbHkrJ1wiJyksaykudGhlbihmdW5jdGlvbihjKXsxPD1jLmxlbmd0aD9hKCk6c2V0VGltZW91dChlLDI1KX0sYil9ZSgpfSksTj1uZXcgUHJvbWlzZShmdW5jdGlvbihhLGMpe3I9c2V0VGltZW91dChmdW5jdGlvbigpe2MoRXJyb3IoXCJcIituK1wibXMgdGltZW91dCBleGNlZWRlZFwiKSl9LG4pfSk7UHJvbWlzZS5yYWNlKFtOLE1dKS50aGVuKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHIpO2EoYyl9LFxuYil9ZWxzZSBtKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdigpe3ZhciBiO2lmKGI9LTEhPWYmJi0xIT1nfHwtMSE9ZiYmLTEhPWh8fC0xIT1nJiYtMSE9aCkoYj1mIT1nJiZmIT1oJiZnIT1oKXx8KG51bGw9PT1DJiYoYj0vQXBwbGVXZWJLaXRcXC8oWzAtOV0rKSg/OlxcLihbMC05XSspKS8uZXhlYyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCksQz0hIWImJig1MzY+cGFyc2VJbnQoYlsxXSwxMCl8fDUzNj09PXBhcnNlSW50KGJbMV0sMTApJiYxMT49cGFyc2VJbnQoYlsyXSwxMCkpKSxiPUMmJihmPT13JiZnPT13JiZoPT13fHxmPT14JiZnPT14JiZoPT14fHxmPT15JiZnPT15JiZoPT15KSksYj0hYjtiJiYoZC5wYXJlbnROb2RlJiZkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCksY2xlYXJUaW1lb3V0KHIpLGEoYykpfWZ1bmN0aW9uIEkoKXtpZigobmV3IERhdGUpLmdldFRpbWUoKS1IPj1uKWQucGFyZW50Tm9kZSYmZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpLGIoRXJyb3IoXCJcIitcbm4rXCJtcyB0aW1lb3V0IGV4Y2VlZGVkXCIpKTtlbHNle3ZhciBhPWRvY3VtZW50LmhpZGRlbjtpZighMD09PWF8fHZvaWQgMD09PWEpZj1lLmEub2Zmc2V0V2lkdGgsZz1wLmEub2Zmc2V0V2lkdGgsaD1xLmEub2Zmc2V0V2lkdGgsdigpO3I9c2V0VGltZW91dChJLDUwKX19dmFyIGU9bmV3IHQoaykscD1uZXcgdChrKSxxPW5ldyB0KGspLGY9LTEsZz0tMSxoPS0xLHc9LTEseD0tMSx5PS0xLGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtkLmRpcj1cImx0clwiO3UoZSxMKGMsXCJzYW5zLXNlcmlmXCIpKTt1KHAsTChjLFwic2VyaWZcIikpO3UocSxMKGMsXCJtb25vc3BhY2VcIikpO2QuYXBwZW5kQ2hpbGQoZS5hKTtkLmFwcGVuZENoaWxkKHAuYSk7ZC5hcHBlbmRDaGlsZChxLmEpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZCk7dz1lLmEub2Zmc2V0V2lkdGg7eD1wLmEub2Zmc2V0V2lkdGg7eT1xLmEub2Zmc2V0V2lkdGg7SSgpO0EoZSxmdW5jdGlvbihhKXtmPWE7digpfSk7dShlLFxuTChjLCdcIicrYy5mYW1pbHkrJ1wiLHNhbnMtc2VyaWYnKSk7QShwLGZ1bmN0aW9uKGEpe2c9YTt2KCl9KTt1KHAsTChjLCdcIicrYy5mYW1pbHkrJ1wiLHNlcmlmJykpO0EocSxmdW5jdGlvbihhKXtoPWE7digpfSk7dShxLEwoYywnXCInK2MuZmFtaWx5KydcIixtb25vc3BhY2UnKSl9KX0pfTtcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1COih3aW5kb3cuRm9udEZhY2VPYnNlcnZlcj1CLHdpbmRvdy5Gb250RmFjZU9ic2VydmVyLnByb3RvdHlwZS5sb2FkPUIucHJvdG90eXBlLmxvYWQpO30oKSk7XG4iLCJpbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSAnLi9yZW5kZXJhYmxlJ1xuaW1wb3J0IHsgTWFpbk1lbnUgfSBmcm9tICcuL3NjZW5lcy9tYWluLW1lbnUnXG5pbXBvcnQgeyBJbnB1dEhhbmRsZXIgfSBmcm9tICcuL2lucHV0LWhhbmRsZXIvaW5wdXQtaGFuZGxlcidcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi9zdG9yZSdcbmltcG9ydCB7IENhbnZhc0FQSSB9IGZyb20gJy4uL2xpYi9jYW52YXMnXG5cbmV4cG9ydCBjbGFzcyBHYW1lIGV4dGVuZHMgQ2FudmFzQVBJIHtcblx0cHJpdmF0ZSBfYWN0aXZlU2NlbmU6IFJlbmRlcmFibGUgfCB1bmRlZmluZWRcblx0cHJpdmF0ZSBfcmVzaXplTGlzdGVuZXI6IGFueSB8IHVuZGVmaW5lZFxuXG5cdGNvbnN0cnVjdG9yKGhvc3RFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXHRcdHN1cGVyKClcblx0XHRob3N0RWxlbWVudC5pbm5lckhUTUwgPSAnJ1xuXHRcdGhvc3RFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKVxuXHRcdHN0b3JlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlbmRlcigpKVxuXHRcdElucHV0SGFuZGxlci5vbkluaXQoKVxuXHRcdHRoaXMuc2V0QWN0aXZlU2NlbmUoXG5cdFx0XHRuZXcgTWFpbk1lbnUoKHNjZW5lOiBSZW5kZXJhYmxlKSA9PiB0aGlzLnNldEFjdGl2ZVNjZW5lKHNjZW5lKSlcblx0XHQpXG5cdFx0dGhpcy5vbkNsaWVudFJlY3RVcGRhdGUoKVxuXHR9XG5cblx0cHVibGljIHNldEFjdGl2ZVNjZW5lKHNjZW5lOiBSZW5kZXJhYmxlKSB7XG5cdFx0dGhpcy5fYWN0aXZlU2NlbmUgPSBzY2VuZVxuXHR9XG5cblx0cHVibGljIG9uQ2xpZW50UmVjdFVwZGF0ZSgpIHtcblx0XHRpZiAoIXRoaXMuX3Jlc2l6ZUxpc3RlbmVyKSB7XG5cdFx0XHR0aGlzLl9yZXNpemVMaXN0ZW5lciA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PlxuXHRcdFx0XHR0aGlzLm9uQ2xpZW50UmVjdFVwZGF0ZSgpXG5cdFx0XHQpXG5cdFx0fVxuXHRcdGNvbnN0IHJlY3Q6IERPTVJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBTdHJpbmcocmVjdC53aWR0aCkpXG5cdFx0dGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBTdHJpbmcocmVjdC5oZWlnaHQpKVxuXHRcdHRoaXMuY2xlYXIoKVxuXHRcdHRoaXMucmVuZGVyKClcblx0fVxuXG5cdHB1YmxpYyBzZXRTY2VuZShzY2VuZTogUmVuZGVyYWJsZSkge1xuXHRcdHRoaXMuX2FjdGl2ZVNjZW5lID0gc2NlbmVcblx0fVxuXG5cdHB1YmxpYyByZW5kZXIoKSB7XG5cdFx0aWYgKHRoaXMuX2FjdGl2ZVNjZW5lKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmVTY2VuZS5jbGVhcigpXG5cdFx0XHR0aGlzLl9hY3RpdmVTY2VuZS5yZW5kZXIoKVxuXHRcdFx0Ly8gdGhpcy5fYWN0aXZlU2NlbmUuc2F2ZUZyYW1lKClcblx0XHRcdHRoaXMuX2FjdGl2ZVNjZW5lLmRyYXdDdXJzb3IoKVxuXHRcdH1cblx0fVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9tYWluLW1lbnUuc2NlbmUnXG4iLCJpbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSAnLi4vLi4vcmVuZGVyYWJsZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZydcbmltcG9ydCB7IEJvdW5kaW5nQm94IH0gZnJvbSAnLi4vLi4vLi4vbGliL3R5cGVzJ1xuaW1wb3J0IHsgTnVsbGlzaCB9IGZyb20gJy4uLy4uLy4uL2xpYi9udWxsaXNoJ1xuaW1wb3J0IHsgc2VsZWN0S2V5c0Rvd24gfSBmcm9tICcuLi8uLi9pbnB1dC1oYW5kbGVyL3NlbGVjdG9ycydcbmltcG9ydCB7IER1bmdlb24gfSBmcm9tICcuLi9kdW5nZW9uJ1xuaW1wb3J0IHsgdXBkYXRlRGltZW5zaW9ucyB9IGZyb20gJy4vc3RvcmUvYWN0aW9ucydcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi4vc2NlbmUnXG5cbmxldCBoYXNBY3RpdmF0ZWRTaW5jZUtleURvd246IGJvb2xlYW5cblxuaW50ZXJmYWNlIE1lbnVJdGVtIHtcblx0dGV4dDogc3RyaW5nXG5cdG9uU2VsZWN0KCk6IHZvaWRcblx0aGl0Ym94OiBCb3VuZGluZ0JveCB8IHVuZGVmaW5lZFxuXHRkaXNhYmxlZD86IHRydWVcbn1cblxuZXhwb3J0IGNsYXNzIE1haW5NZW51IGV4dGVuZHMgU2NlbmUge1xuXHRwdWJsaWMgZGVmYXVsdEZvbnRTaXplID0gY29uZmlnLmZvbnRTY2FsZVxuXHRwdWJsaWMgdGl0bGVGb250U2l6ZSA9IHRoaXMuZGVmYXVsdEZvbnRTaXplICogM1xuXHRwdWJsaWMgYWN0aXZlSXRlbTogbnVtYmVyIHwgdW5kZWZpbmVkXG5cdHB1YmxpYyBpdGVtczogTWVudUl0ZW1bXSB8IHVuZGVmaW5lZFxuXHRwdWJsaWMgaGFzQWN0aXZhdGVkU2luY2VNb3VzZURvd246IGJvb2xlYW4gPSBmYWxzZVxuXG5cdHB1YmxpYyBvbkluaXQoKSB7XG5cdFx0dGhpcy5pdGVtcyA9IFtcblx0XHRcdHtcblx0XHRcdFx0dGV4dDogJ05ldyBHYW1lJyxcblx0XHRcdFx0b25TZWxlY3Q6ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnNldEFjdGl2ZVNjZW5lKFxuXHRcdFx0XHRcdFx0bmV3IER1bmdlb24oKHNjZW5lOiBSZW5kZXJhYmxlKSA9PiB0aGlzLnNldEFjdGl2ZVNjZW5lKHNjZW5lKSlcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGhpdGJveDogdW5kZWZpbmVkXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0OiAnQ29udGludWUgR2FtZScsXG5cdFx0XHRcdG9uU2VsZWN0OiAoKSA9PiB7fSxcblx0XHRcdFx0aGl0Ym94OiB1bmRlZmluZWQsXG5cdFx0XHRcdGRpc2FibGVkOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0OiAnSW1wb3J0IFNhdmUnLFxuXHRcdFx0XHRvblNlbGVjdDogKCkgPT4ge30sXG5cdFx0XHRcdGhpdGJveDogdW5kZWZpbmVkXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0OiAnRXhwb3J0IFNhdmUnLFxuXHRcdFx0XHRvblNlbGVjdDogKCkgPT4ge30sXG5cdFx0XHRcdGhpdGJveDogdW5kZWZpbmVkXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0OiAnQWJvdXQnLFxuXHRcdFx0XHRvblNlbGVjdDogKCkgPT4ge30sXG5cdFx0XHRcdGhpdGJveDogdW5kZWZpbmVkXG5cdFx0XHR9XG5cdFx0XVxuXG5cdFx0Y29uc3Qge1xuXHRcdFx0d2lkdGg6IGNsaWVudFdpZHRoLFxuXHRcdFx0aGVpZ2h0OiBjbGllbnRIZWlnaHRcblx0XHR9ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuXHRcdGNvbnN0IHsgd2lkdGg6IHRpdGxlV2lkdGgsIGhlaWdodDogdGl0bGVIZWlnaHQgfSA9IHRoaXMuZ2V0VGl0bGVEaW1lbnNpb25zKClcblxuXHRcdGNvbnN0IG1hcmdpbiA9IHRpdGxlSGVpZ2h0IC8gMlxuXHRcdGNvbnN0IGl0ZW1IZWlnaHQgPSB0aXRsZUhlaWdodCArIG1hcmdpblxuXHRcdGNvbnN0IHdpZHRoID0gdGl0bGVXaWR0aCArIG1hcmdpbiAqIDJcblx0XHRjb25zdCBoZWlnaHQgPSB0aXRsZUhlaWdodCArIGl0ZW1IZWlnaHQgKiAodGhpcy5pdGVtcy5sZW5ndGggKyAxKVxuXHRcdGNvbnN0IHggPSAoY2xpZW50V2lkdGggLSB3aWR0aCkgLyAyXG5cdFx0Y29uc3QgeSA9IChjbGllbnRIZWlnaHQgLSBoZWlnaHQpIC8gMlxuXG5cdFx0dGhpcy5zdG9yZS5kaXNwYXRjaChcblx0XHRcdHVwZGF0ZURpbWVuc2lvbnMoe1xuXHRcdFx0XHRkaW1lbnNpb25zOiB7XG5cdFx0XHRcdFx0Ym9keToge1xuXHRcdFx0XHRcdFx0d2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQsXG5cdFx0XHRcdFx0XHRtYXJnaW4sXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogW3gsIHldXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aXRsZToge1xuXHRcdFx0XHRcdFx0aGVpZ2h0OiB0aXRsZUhlaWdodCxcblx0XHRcdFx0XHRcdHdpZHRoOiB0aXRsZVdpZHRoLFxuXHRcdFx0XHRcdFx0cG9zaXRpb246IFtjbGllbnRXaWR0aCAvIDIsIHkgKyB0aXRsZUhlaWdodCAqIDJdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdClcblx0fVxuXG5cdHB1YmxpYyBvbkNoYW5nZXMoKSB7XG5cdFx0aWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5zdGF0ZSkge1xuXHRcdFx0Y29uc3Qga2V5c0Rvd24gPSBzZWxlY3RLZXlzRG93bih0aGlzLnN0YXRlKVxuXHRcdFx0aWYgKGtleXNEb3duICYmIGtleXNEb3duLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5rZXlJc1ByZXNzZWQoJ3VwJykpIHtcblx0XHRcdFx0XHR0aGlzLmFjdGl2ZUl0ZW0gPVxuXHRcdFx0XHRcdFx0dGhpcy5hY3RpdmVJdGVtICE9PSB1bmRlZmluZWQgPyB0aGlzLmFjdGl2ZUl0ZW0gLSAxIDogMFxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMua2V5SXNQcmVzc2VkKCdkb3duJykpIHtcblx0XHRcdFx0XHR0aGlzLmFjdGl2ZUl0ZW0gPVxuXHRcdFx0XHRcdFx0dGhpcy5hY3RpdmVJdGVtICE9PSB1bmRlZmluZWQgPyB0aGlzLmFjdGl2ZUl0ZW0gKyAxIDogMFxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChOdWxsaXNoLmlzTm90TnVsbGlzaCh0aGlzLmFjdGl2ZUl0ZW0pKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuYWN0aXZlSXRlbSA8IDApIHtcblx0XHRcdFx0XHRcdHRoaXMuYWN0aXZlSXRlbSA9IDBcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuYWN0aXZlSXRlbSA+IHRoaXMuaXRlbXMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0dGhpcy5hY3RpdmVJdGVtID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IGFjdGl2ZUl0ZW0gPSB0aGlzLml0ZW1zW3RoaXMuYWN0aXZlSXRlbV1cblx0XHRcdFx0XHRpZiAoIWFjdGl2ZUl0ZW0uZGlzYWJsZWQgJiYgdGhpcy5rZXlJc1ByZXNzZWQoJ3NlbGVjdCcpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWhhc0FjdGl2YXRlZFNpbmNlS2V5RG93bikge1xuXHRcdFx0XHRcdFx0XHRoYXNBY3RpdmF0ZWRTaW5jZUtleURvd24gPSB0cnVlXG5cdFx0XHRcdFx0XHRcdGFjdGl2ZUl0ZW0ub25TZWxlY3QoKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFzQWN0aXZhdGVkU2luY2VLZXlEb3duID0gZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVuZGVyKCkge1xuXHRcdC8vIHRoaXMucHJpbnRTdGF0ZShcblx0XHQvLyBcdDEwMCxcblx0XHQvLyBcdDEwMCxcblx0XHQvLyBcdDEwMCxcblx0XHQvLyBcdHN0YXRlID0+IHN0YXRlLnNjZW5lc1snbWFpbi1tZW51J10uZGltZW5zaW9ucy5ib2R5XG5cdFx0Ly8gKVxuXG5cdFx0Y29uc3QgeyBkaW1lbnNpb25zIH0gPSB0aGlzLnN0YXRlLnNjZW5lc1snbWFpbi1tZW51J11cblx0XHRjb25zdCB7IGhlaWdodCwgd2lkdGgsIHBvc2l0aW9uLCBtYXJnaW4gfSA9IGRpbWVuc2lvbnMuYm9keVxuXHRcdGNvbnN0IFt4LCB5XSA9IHBvc2l0aW9uXG5cdFx0Y29uc3QgW3RpdGxlWCwgdGl0bGVZXSA9IGRpbWVuc2lvbnMudGl0bGUucG9zaXRpb25cblx0XHRjb25zdCB7IGhlaWdodDogdGl0bGVIZWlnaHQgfSA9IGRpbWVuc2lvbnMudGl0bGVcblxuXHRcdHRoaXMuZHJhd0JhY2tncm91bmQoeCwgeSwgd2lkdGgsIGhlaWdodClcblx0XHR0aGlzLmRyYXdUaXRsZSh0aXRsZVgsIHRpdGxlWSlcblx0XHR0aGlzLmRyYXdJdGVtcyhcblx0XHRcdHgsXG5cdFx0XHR5ICsgdGl0bGVIZWlnaHQgKiAyLjUsXG5cdFx0XHR3aWR0aCxcblx0XHRcdHRpdGxlSGVpZ2h0LFxuXHRcdFx0dGl0bGVIZWlnaHQgKyBtYXJnaW4sXG5cdFx0XHRtYXJnaW5cblx0XHQpXG5cdH1cblxuXHRwdWJsaWMgZ2V0VGl0bGVEaW1lbnNpb25zKCkge1xuXHRcdGNvbnN0IHsgZm9udCB9ID0gdGhpcy5jdHhcblxuXHRcdHRoaXMuc2V0Rm9udFNpemUodGhpcy50aXRsZUZvbnRTaXplKVxuXHRcdGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KGNvbmZpZy50aXRsZSlcblx0XHRjb25zdCBmb250U2l6ZSA9ICh0aGlzLmN0eC5mb250Lm1hdGNoKC9cXGQrLykgfHwgWzBdKVswXVxuXHRcdHRoaXMuY3R4LmZvbnQgPSBmb250XG5cblx0XHRyZXR1cm4geyBoZWlnaHQ6IE51bWJlcihmb250U2l6ZSksIHdpZHRoIH1cblx0fVxuXG5cdHB1YmxpYyBkcmF3QmFja2dyb3VuZCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcblx0XHRjb25zdCBjb2xvciA9IGNvbmZpZy5tZW51Q29sb3Jcblx0XHR0aGlzLmZpbGxSZWN0KHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3IgfSlcblxuXHRcdGlmICh0aGlzLmN1cnNvckluQXJlYSh4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQpKSB7XG5cdFx0XHR0aGlzLmFjdGl2ZUl0ZW0gPSB1bmRlZmluZWRcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZHJhd1RpdGxlKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0dGhpcy5maWxsVGV4dCh7XG5cdFx0XHR4LFxuXHRcdFx0eSxcblx0XHRcdHRleHQ6IGNvbmZpZy50aXRsZSxcblx0XHRcdHNpemU6IHRoaXMudGl0bGVGb250U2l6ZSxcblx0XHRcdGNvbG9yOiBjb25maWcubWVudVRleHRDb2xvcixcblx0XHRcdGFsaWduOiAnY2VudGVyJyxcblx0XHRcdGJhc2VsaW5lOiAnYm90dG9tJyxcblx0XHRcdG5hbWU6IGNvbmZpZy5mb250TmFtZVxuXHRcdH0pXG5cdH1cblxuXHRwdWJsaWMgZHJhd0l0ZW1zKFxuXHRcdHg6IG51bWJlcixcblx0XHR5OiBudW1iZXIsXG5cdFx0d2lkdGg6IG51bWJlcixcblx0XHR0aXRsZUhlaWdodDogbnVtYmVyLFxuXHRcdGl0ZW1IZWlnaHQ6IG51bWJlcixcblx0XHRtYXJnaW46IG51bWJlclxuXHQpIHtcblx0XHR0aGlzLml0ZW1zPy5mb3JFYWNoKChtZW51SXRlbSwgaSkgPT4ge1xuXHRcdFx0Y29uc3QgdGhpc0l0ZW1Ub3BPZmZzZXQgPSBpICogaXRlbUhlaWdodFxuXG5cdFx0XHR0aGlzLmRyYXdNZW51SXRlbShcblx0XHRcdFx0bWVudUl0ZW0udGV4dCxcblx0XHRcdFx0eCxcblx0XHRcdFx0eSArIHRoaXNJdGVtVG9wT2Zmc2V0LFxuXHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0dGl0bGVIZWlnaHQsXG5cdFx0XHRcdGksXG5cdFx0XHRcdG1hcmdpblxuXHRcdFx0KVxuXHRcdH0pXG5cdH1cblxuXHRwdWJsaWMgZHJhd01lbnVJdGVtKFxuXHRcdHRleHQ6IHN0cmluZyxcblx0XHR4OiBudW1iZXIsXG5cdFx0eTogbnVtYmVyLFxuXHRcdHdpZHRoOiBudW1iZXIsXG5cdFx0aGVpZ2h0OiBudW1iZXIsXG5cdFx0aW5kZXg6IG51bWJlcixcblx0XHRtYXJnaW46IG51bWJlciA9IDBcblx0KSB7XG5cdFx0aWYgKCF0aGlzLml0ZW1zKSByZXR1cm5cblxuXHRcdGNvbnN0IGhpdGJveDogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbXG5cdFx0XHR4ICsgbWFyZ2luLFxuXHRcdFx0eSxcblx0XHRcdHggKyB3aWR0aCAtIG1hcmdpbixcblx0XHRcdHkgKyBoZWlnaHRcblx0XHRdXG5cdFx0Y29uc3QgdGhpc0l0ZW0gPSB0aGlzLml0ZW1zW2luZGV4XVxuXHRcdGlmIChcblx0XHRcdCF0aGlzSXRlbS5oaXRib3ggfHxcblx0XHRcdEpTT04uc3RyaW5naWZ5KHRoaXNJdGVtLmhpdGJveCkgPT09IEpTT04uc3RyaW5naWZ5KGhpdGJveClcblx0XHQpIHtcblx0XHRcdHRoaXMuaXRlbXNbaW5kZXhdLmhpdGJveCA9IGhpdGJveFxuXHRcdH1cblxuXHRcdGNvbnN0IGNoZWNrRm9yQ3Vyc29yID0gKCkgPT4gdGhpcy5jdXJzb3JJbkFyZWEoLi4uaGl0Ym94KVxuXG5cdFx0Y29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuaXRlbXNbaW5kZXhdLmRpc2FibGVkXG5cblx0XHRpZiAoIWlzRGlzYWJsZWQgJiYgY2hlY2tGb3JDdXJzb3IoKSkge1xuXHRcdFx0dGhpcy5hY3RpdmVJdGVtID0gaW5kZXhcblxuXHRcdFx0aWYgKHRoaXMuc3RhdGUuaW5wdXQubW91c2VEb3duKSB7XG5cdFx0XHRcdGlmICghdGhpcy5oYXNBY3RpdmF0ZWRTaW5jZU1vdXNlRG93bikge1xuXHRcdFx0XHRcdHRoaXMuaGFzQWN0aXZhdGVkU2luY2VNb3VzZURvd24gPSB0cnVlXG5cdFx0XHRcdFx0dGhpcy5pdGVtc1tpbmRleF0ub25TZWxlY3QoKVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB0aGlzLmhhc0FjdGl2YXRlZFNpbmNlTW91c2VEb3duID0gZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBpc0FjdGl2ZUl0ZW0gPSB0aGlzLmFjdGl2ZUl0ZW0gPT09IGluZGV4XG5cblx0XHRjb25zdCB0ZXh0Q29sb3IgPSBpc0FjdGl2ZUl0ZW1cblx0XHRcdD8gY29uZmlnLm1lbnVUZXh0SG92ZXJDb2xvclxuXHRcdFx0OiBjb25maWcubWVudVRleHRDb2xvclxuXG5cdFx0dGhpcy5kcmF3TWVudUl0ZW1CYWNrZ3JvdW5kKFxuXHRcdFx0eCxcblx0XHRcdHksXG5cdFx0XHR3aWR0aCxcblx0XHRcdGhlaWdodCxcblx0XHRcdG1hcmdpbixcblx0XHRcdGlzRGlzYWJsZWQgPyBjb25maWcubWVudUl0ZW1EaXNhYmxlZENvbG9yIDogY29uZmlnLm1lbnVJdGVtQ29sb3Jcblx0XHQpXG5cdFx0aWYgKCFpc0Rpc2FibGVkICYmIGlzQWN0aXZlSXRlbSkge1xuXHRcdFx0dGhpcy5kcmF3TWVudUl0ZW1CYWNrZ3JvdW5kKFxuXHRcdFx0XHR4LFxuXHRcdFx0XHR5LFxuXHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0aGVpZ2h0LFxuXHRcdFx0XHRtYXJnaW4sXG5cdFx0XHRcdGNvbmZpZy5zZWxlY3RlZEl0ZW1Db2xvcixcblx0XHRcdFx0MC40XG5cdFx0XHQpXG5cdFx0fVxuXG5cdFx0dGhpcy5kcmF3TWVudUl0ZW1UZXh0KFxuXHRcdFx0eCxcblx0XHRcdHksXG5cdFx0XHR3aWR0aCxcblx0XHRcdGhlaWdodCxcblx0XHRcdG1hcmdpbixcblx0XHRcdGlzRGlzYWJsZWQgPyBjb25maWcubWVudVRleHREaXNhYmxlZENvbG9yIDogdGV4dENvbG9yLFxuXHRcdFx0dGV4dFxuXHRcdClcblx0fVxuXG5cdHB1YmxpYyBkcmF3TWVudUl0ZW1CYWNrZ3JvdW5kKFxuXHRcdHg6IG51bWJlcixcblx0XHR5OiBudW1iZXIsXG5cdFx0d2lkdGg6IG51bWJlcixcblx0XHRoZWlnaHQ6IG51bWJlcixcblx0XHRtYXJnaW46IG51bWJlcixcblx0XHRjb2xvcjogc3RyaW5nLFxuXHRcdGFscGhhOiBudW1iZXIgPSAxXG5cdCkge1xuXHRcdHRoaXMuZmlsbFJlY3Qoe1xuXHRcdFx0eDogeCArIG1hcmdpbixcblx0XHRcdHk6IHksXG5cdFx0XHR3aWR0aDogd2lkdGggLSBtYXJnaW4gKiAyLFxuXHRcdFx0aGVpZ2h0LFxuXHRcdFx0Y29sb3IsXG5cdFx0XHRhbHBoYVxuXHRcdH0pXG5cdH1cblxuXHRwdWJsaWMgZHJhd01lbnVJdGVtVGV4dChcblx0XHR4OiBudW1iZXIsXG5cdFx0eTogbnVtYmVyLFxuXHRcdHdpZHRoOiBudW1iZXIsXG5cdFx0aGVpZ2h0OiBudW1iZXIsXG5cdFx0bWFyZ2luOiBudW1iZXIsXG5cdFx0Y29sb3I6IHN0cmluZyxcblx0XHR0ZXh0OiBzdHJpbmdcblx0KSB7XG5cdFx0dGhpcy5maWxsVGV4dCh7XG5cdFx0XHRjb2xvcixcblx0XHRcdHRleHQsXG5cdFx0XHR4OiB4ICsgKHdpZHRoICsgbWFyZ2luKSAvIDIsXG5cdFx0XHR5OiB5ICsgaGVpZ2h0IC8gMixcblx0XHRcdHNpemU6IHRoaXMuZGVmYXVsdEZvbnRTaXplLFxuXHRcdFx0YmFzZWxpbmU6ICdtaWRkbGUnLFxuXHRcdFx0YWxpZ246ICdjZW50ZXInLFxuXHRcdFx0bmFtZTogY29uZmlnLmZvbnROYW1lXG5cdFx0fSlcblx0fVxufVxuIiwiZXhwb3J0IGNsYXNzIE51bGxpc2gge1xuXHRwdWJsaWMgc3RhdGljIGlzRGVmaW5lZDxUPih2YWx1ZTogVCk6IHZhbHVlIGlzIEV4Y2x1ZGU8VCwgdW5kZWZpbmVkPiB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgaXNOb3ROdWxsPFQ+KHZhbHVlOiBUKTogdmFsdWUgaXMgRXhjbHVkZTxULCBudWxsPiB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsXG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGlzTm90TnVsbGlzaDxUPih2YWx1ZTogVCk6IHZhbHVlIGlzIEV4Y2x1ZGU8VCwgbnVsbCB8IHVuZGVmaW5lZD4ge1xuXHRcdHJldHVybiBOdWxsaXNoLmlzRGVmaW5lZCh2YWx1ZSkgJiYgTnVsbGlzaC5pc05vdE51bGwodmFsdWUpXG5cdH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZlYXR1cmVTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICcuLi8uLi9saWIvc3RvcmUnXG5pbXBvcnQgeyBJbnB1dEhhbmRsZXIgfSBmcm9tICcuL2lucHV0LWhhbmRsZXInXG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSAnLi9yZWR1Y2VyJ1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0VXNlcklucHV0U3RhdGUgPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8SW5wdXRTdGF0ZT4oXG5cdElucHV0SGFuZGxlci5zdG9yZU5vZGVOYW1lXG4pXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RDdXJzb3JQb3NpdGlvbiA9IGNyZWF0ZVNlbGVjdG9yKFxuXHRzZWxlY3RVc2VySW5wdXRTdGF0ZSxcblx0c3RhdGUgPT4gc3RhdGUuY3Vyc29yUG9zaXRpb25cbilcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEtleXNEb3duID0gY3JlYXRlU2VsZWN0b3IoXG5cdHNlbGVjdFVzZXJJbnB1dFN0YXRlLFxuXHRzdGF0ZSA9PiBzdGF0ZS5rZXlzRG93blxuKVxuIiwiZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuXHR0eXBlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFR5cGVkQWN0aW9uPFQgZXh0ZW5kcyBzdHJpbmc+IGV4dGVuZHMgQWN0aW9uIHtcblx0cmVhZG9ubHkgdHlwZTogVFxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25UeXBlPEE+ID0gQSBleHRlbmRzIEFjdGlvbkNyZWF0b3I8aW5mZXIgVCwgaW5mZXIgQz5cblx0PyBSZXR1cm5UeXBlPEM+ICYgeyB0eXBlOiBUIH1cblx0OiBuZXZlclxuXG5leHBvcnQgdHlwZSBUeXBlSWQ8VD4gPSAoKSA9PiBUXG5cbmV4cG9ydCB0eXBlIEluaXRpYWxTdGF0ZTxUPiA9IFBhcnRpYWw8VD4gfCBUeXBlSWQ8UGFydGlhbDxUPj4gfCB2b2lkXG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uUmVkdWNlcjxULCBWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPiB7XG5cdChzdGF0ZTogVCB8IHVuZGVmaW5lZCwgYWN0aW9uOiBWKTogVFxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25SZWR1Y2VyTWFwPFQsIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24+ID0ge1xuXHRbcCBpbiBrZXlvZiBUXTogQWN0aW9uUmVkdWNlcjxUW3BdLCBWPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvblJlZHVjZXJGYWN0b3J5PFQsIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24+IHtcblx0KFxuXHRcdHJlZHVjZXJNYXA6IEFjdGlvblJlZHVjZXJNYXA8VCwgVj4sXG5cdFx0aW5pdGlhbFN0YXRlPzogSW5pdGlhbFN0YXRlPFQ+XG5cdCk6IEFjdGlvblJlZHVjZXI8VCwgVj5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yZUZlYXR1cmU8VCwgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4ge1xuXHRrZXk6IHN0cmluZ1xuXHRyZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxULCBWPlxuXHRyZWR1Y2VyRmFjdG9yeTogQWN0aW9uUmVkdWNlckZhY3Rvcnk8VCwgVj5cblx0aW5pdGlhbFN0YXRlPzogSW5pdGlhbFN0YXRlPFQ+XG59XG5cbmV4cG9ydCB0eXBlIFNlbGVjdG9yPFQsIFY+ID0gKHN0YXRlOiBUKSA9PiBWXG5cbmV4cG9ydCB0eXBlIFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PiA9IChcblx0c3RhdGU6IFN0YXRlLFxuXHRwcm9wczogUHJvcHNcbikgPT4gUmVzdWx0XG5cbmV4cG9ydCBjb25zdCBhcnJheXNBcmVOb3RBbGxvd2VkTXNnID1cblx0J2FycmF5cyBhcmUgbm90IGFsbG93ZWQgaW4gYWN0aW9uIGNyZWF0b3JzJ1xudHlwZSBBcnJheXNBcmVOb3RBbGxvd2VkID0gdHlwZW9mIGFycmF5c0FyZU5vdEFsbG93ZWRNc2dcblxuZXhwb3J0IGNvbnN0IHR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZE1zZyA9XG5cdCd0eXBlIHByb3BlcnR5IGlzIG5vdCBhbGxvd2VkIGluIGFjdGlvbiBjcmVhdG9ycydcbnR5cGUgVHlwZVByb3BlcnR5SXNOb3RBbGxvd2VkID0gdHlwZW9mIHR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZE1zZ1xuXG5leHBvcnQgdHlwZSBGdW5jdGlvbklzTm90QWxsb3dlZDxcblx0VCxcblx0RXJyb3JNZXNzYWdlIGV4dGVuZHMgc3RyaW5nXG4+ID0gVCBleHRlbmRzIEZ1bmN0aW9uID8gRXJyb3JNZXNzYWdlIDogVFxuXG5leHBvcnQgdHlwZSBDcmVhdG9yPFxuXHRQIGV4dGVuZHMgYW55W10gPSBhbnlbXSxcblx0UiBleHRlbmRzIG9iamVjdCA9IG9iamVjdFxuPiA9IEZ1bmN0aW9uV2l0aFBhcmFtZXRlcnNUeXBlPFAsIFI+XG5cbmV4cG9ydCB0eXBlIE5vdEFsbG93ZWRDaGVjazxUIGV4dGVuZHMgb2JqZWN0PiA9IFQgZXh0ZW5kcyBhbnlbXVxuXHQ/IEFycmF5c0FyZU5vdEFsbG93ZWRcblx0OiBUIGV4dGVuZHMgeyB0eXBlOiBhbnkgfVxuXHQ/IFR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZFxuXHQ6IHVua25vd25cblxuZXhwb3J0IHR5cGUgQWN0aW9uQ3JlYXRvcjxcblx0VCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcblx0QyBleHRlbmRzIENyZWF0b3IgPSBDcmVhdG9yXG4+ID0gQyAmIFR5cGVkQWN0aW9uPFQ+XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHM8VD4ge1xuXHRfYXM6ICdwcm9wcydcblx0X3A6IFRcbn1cblxuZXhwb3J0IHR5cGUgRnVuY3Rpb25XaXRoUGFyYW1ldGVyc1R5cGU8UCBleHRlbmRzIHVua25vd25bXSwgUiA9IHZvaWQ+ID0gKFxuXHQuLi5hcmdzOiBQXG4pID0+IFJcbiIsImltcG9ydCB7XG5cdENyZWF0b3IsXG5cdEFjdGlvbkNyZWF0b3IsXG5cdFR5cGVkQWN0aW9uLFxuXHRGdW5jdGlvbldpdGhQYXJhbWV0ZXJzVHlwZSxcblx0Tm90QWxsb3dlZENoZWNrLFxuXHRQcm9wc1xufSBmcm9tICcuL21vZGVscydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbjxUIGV4dGVuZHMgc3RyaW5nPihcblx0dHlwZTogVFxuKTogQWN0aW9uQ3JlYXRvcjxULCAoKSA9PiBUeXBlZEFjdGlvbjxUPj5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb248VCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIG9iamVjdD4oXG5cdHR5cGU6IFQsXG5cdGNvbmZpZzogUHJvcHM8UD4gJiBOb3RBbGxvd2VkQ2hlY2s8UD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBQICYgTm90QWxsb3dlZENoZWNrPFA+KSA9PiBQICYgVHlwZWRBY3Rpb248VD4+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uPFxuXHRUIGV4dGVuZHMgc3RyaW5nLFxuXHRQIGV4dGVuZHMgYW55W10sXG5cdFIgZXh0ZW5kcyBvYmplY3Rcbj4oXG5cdHR5cGU6IFQsXG5cdGNyZWF0b3I6IENyZWF0b3I8UCwgUj4gJiBOb3RBbGxvd2VkQ2hlY2s8Uj5cbik6IEZ1bmN0aW9uV2l0aFBhcmFtZXRlcnNUeXBlPFAsIFIgJiBUeXBlZEFjdGlvbjxUPj4gJiBUeXBlZEFjdGlvbjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uPFQgZXh0ZW5kcyBzdHJpbmcsIEMgZXh0ZW5kcyBDcmVhdG9yPihcblx0dHlwZTogVCxcblx0Y29uZmlnPzogeyBfYXM6ICdwcm9wcycgfSB8IENcbik6IEFjdGlvbkNyZWF0b3I8VD4ge1xuXHRpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBkZWZpbmVUeXBlKHR5cGUsICguLi5hcmdzOiBhbnlbXSkgPT4gKHtcblx0XHRcdC4uLmNvbmZpZyguLi5hcmdzKSxcblx0XHRcdHR5cGVcblx0XHR9KSlcblx0fVxuXHRjb25zdCBhcyA9IGNvbmZpZyA/IGNvbmZpZy5fYXMgOiAnZW1wdHknXG5cdHN3aXRjaCAoYXMpIHtcblx0XHRjYXNlICdlbXB0eSc6XG5cdFx0XHRyZXR1cm4gZGVmaW5lVHlwZSh0eXBlLCAoKSA9PiAoeyB0eXBlIH0pKVxuXHRcdGNhc2UgJ3Byb3BzJzpcblx0XHRcdHJldHVybiBkZWZpbmVUeXBlKHR5cGUsIChwcm9wczogb2JqZWN0KSA9PiAoe1xuXHRcdFx0XHQuLi5wcm9wcyxcblx0XHRcdFx0dHlwZVxuXHRcdFx0fSkpXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjb25maWcuJylcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcHM8UCBleHRlbmRzIG9iamVjdD4oKTogUHJvcHM8UD4ge1xuXHRyZXR1cm4geyBfYXM6ICdwcm9wcycsIF9wOiB1bmRlZmluZWQhIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lVHlwZTxUIGV4dGVuZHMgc3RyaW5nPihcblx0dHlwZTogVCxcblx0Y3JlYXRvcjogQ3JlYXRvclxuKTogQWN0aW9uQ3JlYXRvcjxUPiB7XG5cdHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRvciwgJ3R5cGUnLCB7XG5cdFx0dmFsdWU6IHR5cGUsXG5cdFx0d3JpdGFibGU6IGZhbHNlXG5cdH0pXG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgT3BlcmF0b3IgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHtcblx0ZGlzdGluY3RVbnRpbENoYW5nZWQsXG5cdG1hcCxcblx0cGx1Y2ssXG5cdHdpdGhMYXRlc3RGcm9tXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuXG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vYWN0aW9uc19zdWJqZWN0J1xuaW1wb3J0IHtcblx0QWN0aW9uLFxuXHRGdW5jdGlvbklzTm90QWxsb3dlZCxcblx0U3RvcmVGZWF0dXJlLFxuXHRBY3Rpb25SZWR1Y2VyXG59IGZyb20gJy4vbW9kZWxzJ1xuaW1wb3J0IHsgUmVkdWNlck1hbmFnZXIgfSBmcm9tICcuL3JlZHVjZXJfbWFuYWdlcidcbmltcG9ydCB7IFN0YXRlU3ViamVjdCB9IGZyb20gJy4vc3RhdGUnXG5cbmV4cG9ydCBjbGFzcyBTdG9yZTxUPiBleHRlbmRzIE9ic2VydmFibGU8VD4gaW1wbGVtZW50cyBPYnNlcnZlcjxBY3Rpb24+IHtcblx0YWN0aW9ucyQgPSB0aGlzLmFjdGlvbnNPYnNlcnZlci5hc09ic2VydmFibGUoKVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgc3RhdGVTdWJqZWN0OiBTdGF0ZVN1YmplY3QsXG5cdFx0cHJpdmF0ZSBhY3Rpb25zT2JzZXJ2ZXI6IEFjdGlvbnNTdWJqZWN0LFxuXHRcdHByaXZhdGUgcmVkdWNlck1hbmFnZXI6IFJlZHVjZXJNYW5hZ2VyXG5cdCkge1xuXHRcdHN1cGVyKClcblxuXHRcdHRoaXMuc291cmNlID0gc3RhdGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpXG5cblx0XHR0aGlzLmFjdGlvbnNPYnNlcnZlclxuXHRcdFx0LmFzT2JzZXJ2YWJsZSgpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0d2l0aExhdGVzdEZyb20oXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCksXG5cdFx0XHRcdFx0dGhpcy5yZWR1Y2VyTWFuYWdlci5hc09ic2VydmFibGUoKSxcblx0XHRcdFx0XHQoYWN0aW9uLCBzdGF0ZSwgcmVkdWNlcikgPT4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKHN0YXRlID0+IHRoaXMuc3RhdGVTdWJqZWN0Lm5leHQoc3RhdGUpKVxuXHR9XG5cblx0Z2V0IGN1cnJlbnRTdGF0ZSgpOiBUIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZVN1YmplY3QuZ2V0VmFsdWUoKVxuXHR9XG5cblx0c2VsZWN0U3luYzxLPihzZWxlY3RvcjogKHN0YXRlOiBUKSA9PiBLKSB7XG5cdFx0cmV0dXJuIHNlbGVjdG9yKHRoaXMuY3VycmVudFN0YXRlKVxuXHR9XG5cblx0c2VsZWN0QnlQYXRoKC4uLnBhdGhTZWdtZW50czogc3RyaW5nW10pIHtcblx0XHRyZXR1cm4gdGhpcy5waXBlKHBsdWNrKC4uLnBhdGhTZWdtZW50cyksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG5cdH1cblxuXHRzZWxlY3RCeUZ1bmN0aW9uPFU+KHNlbGVjdG9yOiAoc3RhdGU6IFQpID0+IFUpIHtcblx0XHRyZXR1cm4gdGhpcy5waXBlKFxuXHRcdFx0bWFwKHNvdXJjZSA9PiB7XG5cdFx0XHRcdHJldHVybiBzZWxlY3Rvcihzb3VyY2UpXG5cdFx0XHR9KVxuXHRcdClcblx0fVxuXG5cdGxpZnQ8Uj4ob3BlcmF0b3I6IE9wZXJhdG9yPFQsIFI+KTogU3RvcmU8Uj4ge1xuXHRcdGNvbnN0IHN0b3JlID0gbmV3IFN0b3JlPFI+KFxuXHRcdFx0dGhpcy5zdGF0ZVN1YmplY3QsXG5cdFx0XHR0aGlzLmFjdGlvbnNPYnNlcnZlcixcblx0XHRcdHRoaXMucmVkdWNlck1hbmFnZXJcblx0XHQpXG5cdFx0c3RvcmUub3BlcmF0b3IgPSBvcGVyYXRvclxuXG5cdFx0cmV0dXJuIHN0b3JlXG5cdH1cblxuXHRkaXNwYXRjaDxWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPihcblx0XHRhY3Rpb246IFYgJlxuXHRcdFx0RnVuY3Rpb25Jc05vdEFsbG93ZWQ8XG5cdFx0XHRcdFYsXG5cdFx0XHRcdCdGdW5jdGlvbnMgYXJlIG5vdCBhbGxvd2VkIHRvIGJlIGRpc3BhdGNoZWQuIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgYWN0aW9uIGNyZWF0b3IgZnVuY3Rpb24/J1xuXHRcdFx0PlxuXHQpIHtcblx0XHR0aGlzLmFjdGlvbnNPYnNlcnZlci5uZXh0KGFjdGlvbilcblx0fVxuXG5cdG5leHQoYWN0aW9uOiBBY3Rpb24pIHtcblx0XHR0aGlzLmFjdGlvbnNPYnNlcnZlci5uZXh0KGFjdGlvbilcblx0fVxuXG5cdGVycm9yKGVycjogYW55KSB7XG5cdFx0dGhpcy5hY3Rpb25zT2JzZXJ2ZXIuZXJyb3IoZXJyKVxuXHR9XG5cblx0Y29tcGxldGUoKSB7XG5cdFx0dGhpcy5hY3Rpb25zT2JzZXJ2ZXIuY29tcGxldGUoKVxuXHR9XG5cblx0YWRkUmVkdWNlcjxTdGF0ZSwgQWN0aW9ucyBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4oXG5cdFx0a2V5OiBzdHJpbmcsXG5cdFx0cmVkdWNlcjogQWN0aW9uUmVkdWNlcjxTdGF0ZSwgQWN0aW9ucz5cblx0KSB7XG5cdFx0dGhpcy5yZWR1Y2VyTWFuYWdlci5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcilcblx0fVxuXG5cdGFkZFJlZHVjZXJNYXA8U3RhdGUsIEFjdGlvbnMgZXh0ZW5kcyBBY3Rpb24+KFxuXHRcdGZlYXR1cmU6IFN0b3JlRmVhdHVyZTxTdGF0ZSwgQWN0aW9ucz5cblx0KSB7XG5cdFx0dGhpcy5yZWR1Y2VyTWFuYWdlci5hZGRGZWF0dXJlKGZlYXR1cmUpXG5cdH1cbn1cbiIsImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnXG5cbmltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnLi9hY3Rpb25zX3N1YmplY3QnXG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyLCBTdG9yZUZlYXR1cmUsIEFjdGlvblJlZHVjZXJNYXAsIEFjdGlvbiB9IGZyb20gJy4vbW9kZWxzJ1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVkdWNlck9ic2VydmFibGUgZXh0ZW5kcyBPYnNlcnZhYmxlPFxuXHRBY3Rpb25SZWR1Y2VyPGFueSwgYW55PlxuPiB7fVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciBleHRlbmRzIEFjdGlvbnNTdWJqZWN0IHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGVmYXVsdFJlZHVjZXJGYWN0b3J5PFQsIFUgZXh0ZW5kcyBBY3Rpb24+KCkge1xuXHRyZXR1cm4gKFxuXHRcdHJlZHVjZXJNYXA6IEFjdGlvblJlZHVjZXJNYXA8VCwgQWN0aW9uPixcblx0XHRpbml0aWFsU3RhdGU6IFQgPSB7fSBhcyBhbnlcblx0KTogQWN0aW9uUmVkdWNlcjxULCBVPiA9PiB7XG5cdFx0Y29uc3Qga2V5czogQXJyYXk8a2V5b2YgVD4gPSBPYmplY3Qua2V5cyhyZWR1Y2VyTWFwKSBhcyBBcnJheTxrZXlvZiBUPlxuXHRcdGNvbnN0IGNvbWJpbmU6IEFjdGlvblJlZHVjZXI8VCwgVT4gPSAoKHN0YXRlOiBULCBhY3Rpb246IFUpID0+IHtcblx0XHRcdGNvbnN0IGNvbWJpbmVkU3RhdGU6IFQgPSB7XG5cdFx0XHRcdC4uLmluaXRpYWxTdGF0ZSxcblx0XHRcdFx0Li4uc3RhdGVcblx0XHRcdH1cblx0XHRcdHJldHVybiBrZXlzLnJlZHVjZSgoc3RhdGUsIGtleSkgPT4ge1xuXHRcdFx0XHRjb25zdCBuZXdTdGF0ZTogVCA9IHtcblx0XHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0XHRba2V5XTogcmVkdWNlck1hcFtrZXldKHN0YXRlW2tleV0sIGFjdGlvbilcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBuZXdTdGF0ZVxuXHRcdFx0fSwgY29tYmluZWRTdGF0ZSlcblx0XHR9KSBhcyBBY3Rpb25SZWR1Y2VyPFQsIFU+XG5cdFx0cmV0dXJuIGNvbWJpbmVcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUmVkdWNlck1hbmFnZXIgZXh0ZW5kcyBCZWhhdmlvclN1YmplY3Q8QWN0aW9uUmVkdWNlcjxhbnksIGFueT4+IHtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxhbnksIGFueT4sXG5cdFx0cHJpdmF0ZSBpbml0aWFsU3RhdGU6IG9iamVjdCxcblx0XHRwcml2YXRlIHJlZHVjZXJGYWN0b3J5ID0gbWFrZURlZmF1bHRSZWR1Y2VyRmFjdG9yeTxhbnksIGFueT4oKVxuXHQpIHtcblx0XHRzdXBlcihyZWR1Y2VyRmFjdG9yeShyZWR1Y2VycywgaW5pdGlhbFN0YXRlKSlcblx0fVxuXG5cdGFkZEZlYXR1cmUoZmVhdHVyZTogU3RvcmVGZWF0dXJlPGFueSwgYW55Pikge1xuXHRcdHRoaXMuYWRkRmVhdHVyZXMoW2ZlYXR1cmVdKVxuXHR9XG5cblx0YWRkRmVhdHVyZXMoZmVhdHVyZXM6IFN0b3JlRmVhdHVyZTxhbnksIGFueT5bXSkge1xuXHRcdGNvbnN0IHJlZHVjZXJzID0gZmVhdHVyZXMucmVkdWNlKFxuXHRcdFx0KHJlZHVjZXJNYXAsIHsgcmVkdWNlcnMsIGluaXRpYWxTdGF0ZSwga2V5IH0pID0+IHtcblx0XHRcdFx0Y29uc3QgcmVkdWNlciA9IHRoaXMucmVkdWNlckZhY3RvcnkocmVkdWNlcnMsIGluaXRpYWxTdGF0ZSlcblxuXHRcdFx0XHRyZWR1Y2VyTWFwW2tleV0gPSByZWR1Y2VyXG5cdFx0XHRcdHJldHVybiByZWR1Y2VyTWFwXG5cdFx0XHR9LFxuXHRcdFx0e30gYXMgeyBba2V5OiBzdHJpbmddOiBBY3Rpb25SZWR1Y2VyPGFueSwgYW55PiB9XG5cdFx0KVxuXG5cdFx0dGhpcy5hZGRSZWR1Y2VycyhyZWR1Y2Vycylcblx0fVxuXG5cdGFkZFJlZHVjZXIoa2V5OiBzdHJpbmcsIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8YW55LCBhbnk+KSB7XG5cdFx0dGhpcy5hZGRSZWR1Y2Vycyh7IFtrZXldOiByZWR1Y2VyIH0pXG5cdH1cblxuXHRhZGRSZWR1Y2VycyhyZWR1Y2VyczogeyBba2V5OiBzdHJpbmddOiBBY3Rpb25SZWR1Y2VyPGFueSwgYW55PiB9KSB7XG5cdFx0dGhpcy51cGRhdGVSZWR1Y2VycyhyZWR1Y2Vycylcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlUmVkdWNlcnMobmV3UmVkdWNlcnM6IEFjdGlvblJlZHVjZXJNYXA8YW55LCBhbnk+KSB7XG5cdFx0dGhpcy5yZWR1Y2VycyA9IHsgLi4udGhpcy5yZWR1Y2VycywgLi4ubmV3UmVkdWNlcnMgfVxuXHRcdHRoaXMubmV4dCh0aGlzLnJlZHVjZXJGYWN0b3J5KHRoaXMucmVkdWNlcnMsIHRoaXMuaW5pdGlhbFN0YXRlKSlcblx0fVxufVxuIiwiaW1wb3J0IHsgU2VsZWN0b3IsIFNlbGVjdG9yV2l0aFByb3BzIH0gZnJvbSAnLi9tb2RlbHMnXG5cbmV4cG9ydCB0eXBlIEFueUZuID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnlcblxuZXhwb3J0IHR5cGUgTWVtb2l6ZWRQcm9qZWN0aW9uID0ge1xuXHRtZW1vaXplZDogQW55Rm5cblx0cmVzZXQ6ICgpID0+IHZvaWRcblx0c2V0UmVzdWx0OiAocmVzdWx0PzogYW55KSA9PiB2b2lkXG5cdGNsZWFyUmVzdWx0OiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCB0eXBlIE1lbW9pemVGbiA9ICh0OiBBbnlGbikgPT4gTWVtb2l6ZWRQcm9qZWN0aW9uXG5cbmV4cG9ydCB0eXBlIENvbXBhcmF0b3JGbiA9IChhOiBhbnksIGI6IGFueSkgPT4gYm9vbGVhblxuXG5leHBvcnQgdHlwZSBEZWZhdWx0UHJvamVjdG9yRm48VD4gPSAoLi4uYXJnczogYW55W10pID0+IFRcblxuZXhwb3J0IGludGVyZmFjZSBNZW1vaXplZFNlbGVjdG9yPFxuXHRTdGF0ZSxcblx0UmVzdWx0LFxuXHRQcm9qZWN0b3JGbiA9IERlZmF1bHRQcm9qZWN0b3JGbjxSZXN1bHQ+XG4+IGV4dGVuZHMgU2VsZWN0b3I8U3RhdGUsIFJlc3VsdD4ge1xuXHRyZWxlYXNlKCk6IHZvaWRcblx0cHJvamVjdG9yOiBQcm9qZWN0b3JGblxuXHRzZXRSZXN1bHQ6IChyZXN1bHQ/OiBSZXN1bHQpID0+IHZvaWRcblx0Y2xlYXJSZXN1bHQ6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFxuXHRTdGF0ZSxcblx0UHJvcHMsXG5cdFJlc3VsdCxcblx0UHJvamVjdG9yRm4gPSBEZWZhdWx0UHJvamVjdG9yRm48UmVzdWx0PlxuPiBleHRlbmRzIFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PiB7XG5cdHJlbGVhc2UoKTogdm9pZFxuXHRwcm9qZWN0b3I6IFByb2plY3RvckZuXG5cdHNldFJlc3VsdDogKHJlc3VsdD86IFJlc3VsdCkgPT4gdm9pZFxuXHRjbGVhclJlc3VsdDogKCkgPT4gdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbENoZWNrKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG5cdHJldHVybiBhID09PSBiXG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzQ2hhbmdlZChcblx0YXJnczogSUFyZ3VtZW50cyxcblx0bGFzdEFyZ3VtZW50czogSUFyZ3VtZW50cyxcblx0Y29tcGFyYXRvcjogQ29tcGFyYXRvckZuXG4pIHtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKCFjb21wYXJhdG9yKGFyZ3NbaV0sIGxhc3RBcmd1bWVudHNbaV0pKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3VsdE1lbW9pemUoXG5cdHByb2plY3Rpb25GbjogQW55Rm4sXG5cdGlzUmVzdWx0RXF1YWw6IENvbXBhcmF0b3JGblxuKSB7XG5cdHJldHVybiBkZWZhdWx0TWVtb2l6ZShwcm9qZWN0aW9uRm4sIGlzRXF1YWxDaGVjaywgaXNSZXN1bHRFcXVhbClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKFxuXHRwcm9qZWN0aW9uRm46IEFueUZuLFxuXHRpc0FyZ3VtZW50c0VxdWFsID0gaXNFcXVhbENoZWNrLFxuXHRpc1Jlc3VsdEVxdWFsID0gaXNFcXVhbENoZWNrXG4pOiBNZW1vaXplZFByb2plY3Rpb24ge1xuXHRsZXQgbGFzdEFyZ3VtZW50czogbnVsbCB8IElBcmd1bWVudHMgPSBudWxsXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgYW55dGhpbmcgY291bGQgYmUgdGhlIHJlc3VsdC5cblx0bGV0IGxhc3RSZXN1bHQ6IGFueSA9IG51bGxcblx0bGV0IG92ZXJyaWRlUmVzdWx0OiBhbnlcblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblx0XHRsYXN0QXJndW1lbnRzID0gbnVsbFxuXHRcdGxhc3RSZXN1bHQgPSBudWxsXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRSZXN1bHQocmVzdWx0OiBhbnkgPSB1bmRlZmluZWQpIHtcblx0XHRvdmVycmlkZVJlc3VsdCA9IHsgcmVzdWx0IH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNsZWFyUmVzdWx0KCkge1xuXHRcdG92ZXJyaWRlUmVzdWx0ID0gdW5kZWZpbmVkXG5cdH1cblxuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGFueXRoaW5nIGNvdWxkIGJlIHRoZSByZXN1bHQuXG5cdGZ1bmN0aW9uIG1lbW9pemVkKCk6IGFueSB7XG5cdFx0aWYgKG92ZXJyaWRlUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBvdmVycmlkZVJlc3VsdC5yZXN1bHRcblx0XHR9XG5cblx0XHRpZiAoIWxhc3RBcmd1bWVudHMpIHtcblx0XHRcdGxhc3RSZXN1bHQgPSBwcm9qZWN0aW9uRm4uYXBwbHkobnVsbCwgYXJndW1lbnRzIGFzIGFueSlcblx0XHRcdGxhc3RBcmd1bWVudHMgPSBhcmd1bWVudHNcblx0XHRcdHJldHVybiBsYXN0UmVzdWx0XG5cdFx0fVxuXG5cdFx0aWYgKCFpc0FyZ3VtZW50c0NoYW5nZWQoYXJndW1lbnRzLCBsYXN0QXJndW1lbnRzLCBpc0FyZ3VtZW50c0VxdWFsKSkge1xuXHRcdFx0cmV0dXJuIGxhc3RSZXN1bHRcblx0XHR9XG5cblx0XHRjb25zdCBuZXdSZXN1bHQgPSBwcm9qZWN0aW9uRm4uYXBwbHkobnVsbCwgYXJndW1lbnRzIGFzIGFueSlcblx0XHRsYXN0QXJndW1lbnRzID0gYXJndW1lbnRzXG5cblx0XHRpZiAoaXNSZXN1bHRFcXVhbChsYXN0UmVzdWx0LCBuZXdSZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gbGFzdFJlc3VsdFxuXHRcdH1cblxuXHRcdGxhc3RSZXN1bHQgPSBuZXdSZXN1bHRcblxuXHRcdHJldHVybiBuZXdSZXN1bHRcblx0fVxuXG5cdHJldHVybiB7IG1lbW9pemVkLCByZXNldCwgc2V0UmVzdWx0LCBjbGVhclJlc3VsdCB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFJlc3VsdD4oXG5cdHMxOiBTZWxlY3RvcjxTdGF0ZSwgUzE+LFxuXHRwcm9qZWN0b3I6IChzMTogUzEpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBQcm9wcywgUzEsIFJlc3VsdD4oXG5cdHMxOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0cHJvamVjdG9yOiAoczE6IFMxLCBwcm9wczogUHJvcHMpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1NlbGVjdG9yPFN0YXRlLCBTMT5dLFxuXHRwcm9qZWN0b3I6IChzMTogUzEpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBQcm9wcywgUzEsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1NlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzE+XSxcblx0cHJvamVjdG9yOiAoczE6IFMxLCBwcm9wczogUHJvcHMpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFJlc3VsdD4oXG5cdHMxOiBTZWxlY3RvcjxTdGF0ZSwgUzE+LFxuXHRzMjogU2VsZWN0b3I8U3RhdGUsIFMyPixcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBQcm9wcywgUzEsIFMyLCBSZXN1bHQ+KFxuXHRzMTogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMT4sXG5cdHMyOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHByb3BzOiBQcm9wcykgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1NlbGVjdG9yPFN0YXRlLCBTMT4sIFNlbGVjdG9yPFN0YXRlLCBTMj5dLFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMikgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFByb3BzLCBTMSwgUzIsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1xuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzE+LFxuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzI+XG5cdF0sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBwcm9wczogUHJvcHMpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFMzLCBSZXN1bHQ+KFxuXHRzMTogU2VsZWN0b3I8U3RhdGUsIFMxPixcblx0czI6IFNlbGVjdG9yPFN0YXRlLCBTMj4sXG5cdHMzOiBTZWxlY3RvcjxTdGF0ZSwgUzM+LFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzKSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGUsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUHJvcHMsIFMxLCBTMiwgUzMsIFJlc3VsdD4oXG5cdHMxOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0czI6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzI+LFxuXHRzMzogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMz4sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBzMzogUzMsIHByb3BzOiBQcm9wcykgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFMzLCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtTZWxlY3RvcjxTdGF0ZSwgUzE+LCBTZWxlY3RvcjxTdGF0ZSwgUzI+LCBTZWxlY3RvcjxTdGF0ZSwgUzM+XSxcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHMzOiBTMykgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFByb3BzLCBTMSwgUzIsIFMzLCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPlxuXHRdLFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzLCBwcm9wczogUHJvcHMpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFMzLCBTNCwgUmVzdWx0Pihcblx0czE6IFNlbGVjdG9yPFN0YXRlLCBTMT4sXG5cdHMyOiBTZWxlY3RvcjxTdGF0ZSwgUzI+LFxuXHRzMzogU2VsZWN0b3I8U3RhdGUsIFMzPixcblx0czQ6IFNlbGVjdG9yPFN0YXRlLCBTND4sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBzMzogUzMsIHM0OiBTNCkgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFByb3BzLCBTMSwgUzIsIFMzLCBTNCwgUmVzdWx0Pihcblx0czE6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzE+LFxuXHRzMjogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMj4sXG5cdHMzOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0czQ6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzQ+LFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzLCBzNDogUzQsIHByb3BzOiBQcm9wcykgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBTMSwgUzIsIFMzLCBTNCwgUmVzdWx0Pihcblx0c2VsZWN0b3JzOiBbXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFMxPixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzI+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTMz4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFM0PlxuXHRdLFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzLCBzNDogUzQpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBQcm9wcywgUzEsIFMyLCBTMywgUzQsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1xuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzE+LFxuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzI+LFxuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzM+LFxuXHRcdFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzQ+XG5cdF0sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBzMzogUzMsIHM0OiBTNCwgcHJvcHM6IFByb3BzKSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBSZXN1bHQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBSZXN1bHQ+KFxuXHRzMTogU2VsZWN0b3I8U3RhdGUsIFMxPixcblx0czI6IFNlbGVjdG9yPFN0YXRlLCBTMj4sXG5cdHMzOiBTZWxlY3RvcjxTdGF0ZSwgUzM+LFxuXHRzNDogU2VsZWN0b3I8U3RhdGUsIFM0Pixcblx0czU6IFNlbGVjdG9yPFN0YXRlLCBTNT4sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBzMzogUzMsIHM0OiBTNCwgczU6IFM1KSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGUsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUHJvcHMsIFMxLCBTMiwgUzMsIFM0LCBTNSwgUmVzdWx0Pihcblx0czE6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzE+LFxuXHRzMjogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMj4sXG5cdHMzOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0czQ6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzQ+LFxuXHRzNTogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTNT4sXG5cdHByb2plY3RvcjogKHMxOiBTMSwgczI6IFMyLCBzMzogUzMsIHM0OiBTNCwgczU6IFM1LCBwcm9wczogUHJvcHMpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzE+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTMj4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFMzPixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzQ+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTNT5cblx0XSxcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHMzOiBTMywgczQ6IFM0LCBzNTogUzUpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFN0YXRlLCBQcm9wcywgUzEsIFMyLCBTMywgUzQsIFM1LCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM1PlxuXHRdLFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzLCBzNDogUzQsIHM1OiBTNSwgcHJvcHM6IFByb3BzKSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBSZXN1bHQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBTNiwgUmVzdWx0Pihcblx0czE6IFNlbGVjdG9yPFN0YXRlLCBTMT4sXG5cdHMyOiBTZWxlY3RvcjxTdGF0ZSwgUzI+LFxuXHRzMzogU2VsZWN0b3I8U3RhdGUsIFMzPixcblx0czQ6IFNlbGVjdG9yPFN0YXRlLCBTND4sXG5cdHM1OiBTZWxlY3RvcjxTdGF0ZSwgUzU+LFxuXHRzNjogU2VsZWN0b3I8U3RhdGUsIFM2Pixcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHMzOiBTMywgczQ6IFM0LCBzNTogUzUsIHM2OiBTNikgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFByb3BzLCBTMSwgUzIsIFMzLCBTNCwgUzUsIFM2LCBSZXN1bHQ+KFxuXHRzMTogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMT4sXG5cdHMyOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0czM6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzM+LFxuXHRzNDogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTND4sXG5cdHM1OiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM1Pixcblx0czY6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzY+LFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRwcm9wczogUHJvcHNcblx0KSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFMxLCBTMiwgUzMsIFM0LCBTNSwgUzYsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1xuXHRcdFNlbGVjdG9yPFN0YXRlLCBTMT4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFMyPixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzM+LFxuXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFM0Pixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzU+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTNj5cblx0XSxcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHMzOiBTMywgczQ6IFM0LCBzNTogUzUsIHM2OiBTNikgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFByb3BzLCBTMSwgUzIsIFMzLCBTNCwgUzUsIFM2LCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM1Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM2PlxuXHRdLFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRwcm9wczogUHJvcHNcblx0KSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBSZXN1bHQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBTNiwgUzcsIFJlc3VsdD4oXG5cdHMxOiBTZWxlY3RvcjxTdGF0ZSwgUzE+LFxuXHRzMjogU2VsZWN0b3I8U3RhdGUsIFMyPixcblx0czM6IFNlbGVjdG9yPFN0YXRlLCBTMz4sXG5cdHM0OiBTZWxlY3RvcjxTdGF0ZSwgUzQ+LFxuXHRzNTogU2VsZWN0b3I8U3RhdGUsIFM1Pixcblx0czY6IFNlbGVjdG9yPFN0YXRlLCBTNj4sXG5cdHM3OiBTZWxlY3RvcjxTdGF0ZSwgUzc+LFxuXHRwcm9qZWN0b3I6IChzMTogUzEsIHMyOiBTMiwgczM6IFMzLCBzNDogUzQsIHM1OiBTNSwgczY6IFM2LCBzNzogUzcpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFxuXHRTdGF0ZSxcblx0UHJvcHMsXG5cdFMxLFxuXHRTMixcblx0UzMsXG5cdFM0LFxuXHRTNSxcblx0UzYsXG5cdFM3LFxuXHRSZXN1bHRcbj4oXG5cdHMxOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0czI6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzI+LFxuXHRzMzogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMz4sXG5cdHM0OiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0czU6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzU+LFxuXHRzNjogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTNj4sXG5cdHM3OiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM3Pixcblx0cHJvamVjdG9yOiAoXG5cdFx0czE6IFMxLFxuXHRcdHMyOiBTMixcblx0XHRzMzogUzMsXG5cdFx0czQ6IFM0LFxuXHRcdHM1OiBTNSxcblx0XHRzNjogUzYsXG5cdFx0czc6IFM3LFxuXHRcdHByb3BzOiBQcm9wc1xuXHQpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBTNiwgUzcsIFJlc3VsdD4oXG5cdHNlbGVjdG9yczogW1xuXHRcdFNlbGVjdG9yPFN0YXRlLCBTMT4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFMyPixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzM+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTND4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFM1Pixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzY+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTNz5cblx0XSxcblx0cHJvamVjdG9yOiAoczE6IFMxLCBzMjogUzIsIHMzOiBTMywgczQ6IFM0LCBzNTogUzUsIHM2OiBTNiwgczc6IFM3KSA9PiBSZXN1bHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGUsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvcjxcblx0U3RhdGUsXG5cdFByb3BzLFxuXHRTMSxcblx0UzIsXG5cdFMzLFxuXHRTNCxcblx0UzUsXG5cdFM2LFxuXHRTNyxcblx0UmVzdWx0XG4+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM1Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM2Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM3PlxuXHRdLFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRzNzogUzcsXG5cdFx0cHJvcHM6IFByb3BzXG5cdCkgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUmVzdWx0PlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8U3RhdGUsIFMxLCBTMiwgUzMsIFM0LCBTNSwgUzYsIFM3LCBTOCwgUmVzdWx0Pihcblx0czE6IFNlbGVjdG9yPFN0YXRlLCBTMT4sXG5cdHMyOiBTZWxlY3RvcjxTdGF0ZSwgUzI+LFxuXHRzMzogU2VsZWN0b3I8U3RhdGUsIFMzPixcblx0czQ6IFNlbGVjdG9yPFN0YXRlLCBTND4sXG5cdHM1OiBTZWxlY3RvcjxTdGF0ZSwgUzU+LFxuXHRzNjogU2VsZWN0b3I8U3RhdGUsIFM2Pixcblx0czc6IFNlbGVjdG9yPFN0YXRlLCBTNz4sXG5cdHM4OiBTZWxlY3RvcjxTdGF0ZSwgUzg+LFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRzNzogUzcsXG5cdFx0czg6IFM4XG5cdCkgPT4gUmVzdWx0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlLCBSZXN1bHQ+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3I8XG5cdFN0YXRlLFxuXHRQcm9wcyxcblx0UzEsXG5cdFMyLFxuXHRTMyxcblx0UzQsXG5cdFM1LFxuXHRTNixcblx0UzcsXG5cdFM4LFxuXHRSZXN1bHRcbj4oXG5cdHMxOiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0czI6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzI+LFxuXHRzMzogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTMz4sXG5cdHM0OiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0czU6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzU+LFxuXHRzNjogU2VsZWN0b3JXaXRoUHJvcHM8U3RhdGUsIFByb3BzLCBTNj4sXG5cdHM3OiBTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM3Pixcblx0czg6IFNlbGVjdG9yV2l0aFByb3BzPFN0YXRlLCBQcm9wcywgUzg+LFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRzNzogUzcsXG5cdFx0czg6IFM4LFxuXHRcdHByb3BzOiBQcm9wc1xuXHQpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcjxTdGF0ZSwgUzEsIFMyLCBTMywgUzQsIFM1LCBTNiwgUzcsIFM4LCBSZXN1bHQ+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzE+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTMj4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFMzPixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzQ+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTNT4sXG5cdFx0U2VsZWN0b3I8U3RhdGUsIFM2Pixcblx0XHRTZWxlY3RvcjxTdGF0ZSwgUzc+LFxuXHRcdFNlbGVjdG9yPFN0YXRlLCBTOD5cblx0XSxcblx0cHJvamVjdG9yOiAoXG5cdFx0czE6IFMxLFxuXHRcdHMyOiBTMixcblx0XHRzMzogUzMsXG5cdFx0czQ6IFM0LFxuXHRcdHM1OiBTNSxcblx0XHRzNjogUzYsXG5cdFx0czc6IFM3LFxuXHRcdHM4OiBTOFxuXHQpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZSwgUmVzdWx0PlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yPFxuXHRTdGF0ZSxcblx0UHJvcHMsXG5cdFMxLFxuXHRTMixcblx0UzMsXG5cdFM0LFxuXHRTNSxcblx0UzYsXG5cdFM3LFxuXHRTOCxcblx0UmVzdWx0XG4+KFxuXHRzZWxlY3RvcnM6IFtcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMxPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMyPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFMzPixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM0Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM1Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM2Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM3Pixcblx0XHRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFM4PlxuXHRdLFxuXHRwcm9qZWN0b3I6IChcblx0XHRzMTogUzEsXG5cdFx0czI6IFMyLFxuXHRcdHMzOiBTMyxcblx0XHRzNDogUzQsXG5cdFx0czU6IFM1LFxuXHRcdHM2OiBTNixcblx0XHRzNzogUzcsXG5cdFx0czg6IFM4LFxuXHRcdHByb3BzOiBQcm9wc1xuXHQpID0+IFJlc3VsdFxuKTogTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxTdGF0ZSwgUHJvcHMsIFJlc3VsdD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yKFxuXHQuLi5pbnB1dDogYW55W11cbik6IE1lbW9pemVkU2VsZWN0b3I8YW55LCBhbnk+IHwgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgYW55PiB7XG5cdHJldHVybiBjcmVhdGVTZWxlY3RvckZhY3RvcnkoZGVmYXVsdE1lbW9pemUpKC4uLmlucHV0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFN0YXRlRm4oXG5cdHN0YXRlOiBhbnksXG5cdHNlbGVjdG9yczogU2VsZWN0b3I8YW55LCBhbnk+W10gfCBTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgYW55PltdLFxuXHRwcm9wczogYW55LFxuXHRtZW1vaXplZFByb2plY3RvcjogTWVtb2l6ZWRQcm9qZWN0aW9uXG4pOiBhbnkge1xuXHRpZiAocHJvcHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdGNvbnN0IGFyZ3MgPSAoPFNlbGVjdG9yPGFueSwgYW55PltdPnNlbGVjdG9ycykubWFwKGZuID0+IGZuKHN0YXRlKSlcblx0XHRyZXR1cm4gbWVtb2l6ZWRQcm9qZWN0b3IubWVtb2l6ZWQuYXBwbHkobnVsbCwgYXJncylcblx0fVxuXG5cdGNvbnN0IGFyZ3MgPSAoPFNlbGVjdG9yV2l0aFByb3BzPGFueSwgYW55LCBhbnk+W10+c2VsZWN0b3JzKS5tYXAoZm4gPT5cblx0XHRmbihzdGF0ZSwgcHJvcHMpXG5cdClcblx0cmV0dXJuIG1lbW9pemVkUHJvamVjdG9yLm1lbW9pemVkLmFwcGx5KG51bGwsIFsuLi5hcmdzLCBwcm9wc10pXG59XG5cbmV4cG9ydCB0eXBlIFNlbGVjdG9yRmFjdG9yeUNvbmZpZzxUID0gYW55LCBWID0gYW55PiA9IHtcblx0c3RhdGVGbjogKFxuXHRcdHN0YXRlOiBULFxuXHRcdHByb3BzOiBhbnksXG5cdFx0c2VsZWN0b3JzOiBTZWxlY3RvcjxhbnksIGFueT5bXSxcblx0XHRtZW1vaXplZFByb2plY3RvcjogTWVtb2l6ZWRQcm9qZWN0aW9uXG5cdCkgPT4gVlxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGYWN0b3J5PFQgPSBhbnksIFYgPSBhbnk+KFxuXHRtZW1vaXplOiBNZW1vaXplRm5cbik6ICguLi5pbnB1dDogYW55W10pID0+IE1lbW9pemVkU2VsZWN0b3I8VCwgVj5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZhY3Rvcnk8VCA9IGFueSwgViA9IGFueT4oXG5cdG1lbW9pemU6IE1lbW9pemVGbixcblx0b3B0aW9uczogU2VsZWN0b3JGYWN0b3J5Q29uZmlnPFQsIFY+XG4pOiAoLi4uaW5wdXQ6IGFueVtdKSA9PiBNZW1vaXplZFNlbGVjdG9yPFQsIFY+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGYWN0b3J5PFQgPSBhbnksIFByb3BzID0gYW55LCBWID0gYW55Pihcblx0bWVtb2l6ZTogTWVtb2l6ZUZuXG4pOiAoLi4uaW5wdXQ6IGFueVtdKSA9PiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFQsIFByb3BzLCBWPlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRmFjdG9yeTxUID0gYW55LCBQcm9wcyA9IGFueSwgViA9IGFueT4oXG5cdG1lbW9pemU6IE1lbW9pemVGbixcblx0b3B0aW9uczogU2VsZWN0b3JGYWN0b3J5Q29uZmlnPFQsIFY+XG4pOiAoLi4uaW5wdXQ6IGFueVtdKSA9PiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFQsIFByb3BzLCBWPlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRmFjdG9yeShcblx0bWVtb2l6ZTogTWVtb2l6ZUZuLFxuXHRvcHRpb25zOiBTZWxlY3RvckZhY3RvcnlDb25maWc8YW55LCBhbnk+ID0ge1xuXHRcdHN0YXRlRm46IGRlZmF1bHRTdGF0ZUZuXG5cdH1cbikge1xuXHRyZXR1cm4gZnVuY3Rpb24oXG5cdFx0Li4uaW5wdXQ6IGFueVtdXG5cdCk6IE1lbW9pemVkU2VsZWN0b3I8YW55LCBhbnk+IHwgTWVtb2l6ZWRTZWxlY3RvcldpdGhQcm9wczxhbnksIGFueSwgYW55PiB7XG5cdFx0bGV0IGFyZ3MgPSBpbnB1dFxuXHRcdGlmIChBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG5cdFx0XHRjb25zdCBbaGVhZCwgLi4udGFpbF0gPSBhcmdzXG5cdFx0XHRhcmdzID0gWy4uLmhlYWQsIC4uLnRhaWxdXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2VsZWN0b3JzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpXG5cdFx0Y29uc3QgcHJvamVjdG9yID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXG5cdFx0Y29uc3QgbWVtb2l6ZWRTZWxlY3RvcnMgPSBzZWxlY3RvcnMuZmlsdGVyKFxuXHRcdFx0KHNlbGVjdG9yOiBhbnkpID0+XG5cdFx0XHRcdHNlbGVjdG9yLnJlbGVhc2UgJiYgdHlwZW9mIHNlbGVjdG9yLnJlbGVhc2UgPT09ICdmdW5jdGlvbidcblx0XHQpXG5cblx0XHRjb25zdCBtZW1vaXplZFByb2plY3RvciA9IG1lbW9pemUoZnVuY3Rpb24oLi4uc2VsZWN0b3JzOiBhbnlbXSkge1xuXHRcdFx0cmV0dXJuIHByb2plY3Rvci5hcHBseShudWxsLCBzZWxlY3RvcnMpXG5cdFx0fSlcblxuXHRcdGNvbnN0IG1lbW9pemVkU3RhdGUgPSBkZWZhdWx0TWVtb2l6ZShmdW5jdGlvbihzdGF0ZTogYW55LCBwcm9wczogYW55KSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucy5zdGF0ZUZuLmFwcGx5KG51bGwsIFtcblx0XHRcdFx0c3RhdGUsXG5cdFx0XHRcdHNlbGVjdG9ycyxcblx0XHRcdFx0cHJvcHMsXG5cdFx0XHRcdG1lbW9pemVkUHJvamVjdG9yXG5cdFx0XHRdKVxuXHRcdH0pXG5cblx0XHRmdW5jdGlvbiByZWxlYXNlKCkge1xuXHRcdFx0bWVtb2l6ZWRTdGF0ZS5yZXNldCgpXG5cdFx0XHRtZW1vaXplZFByb2plY3Rvci5yZXNldCgpXG5cblx0XHRcdG1lbW9pemVkU2VsZWN0b3JzLmZvckVhY2goc2VsZWN0b3IgPT4gc2VsZWN0b3IucmVsZWFzZSgpKVxuXHRcdH1cblxuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKG1lbW9pemVkU3RhdGUubWVtb2l6ZWQsIHtcblx0XHRcdHJlbGVhc2UsXG5cdFx0XHRwcm9qZWN0b3I6IG1lbW9pemVkUHJvamVjdG9yLm1lbW9pemVkLFxuXHRcdFx0c2V0UmVzdWx0OiBtZW1vaXplZFN0YXRlLnNldFJlc3VsdCxcblx0XHRcdGNsZWFyUmVzdWx0OiBtZW1vaXplZFN0YXRlLmNsZWFyUmVzdWx0XG5cdFx0fSlcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPFQ+KFxuXHRmZWF0dXJlTmFtZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPG9iamVjdCwgVD5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8VCwgVj4oXG5cdGZlYXR1cmVOYW1lOiBrZXlvZiBUXG4pOiBNZW1vaXplZFNlbGVjdG9yPFQsIFY+XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmVhdHVyZVNlbGVjdG9yKFxuXHRmZWF0dXJlTmFtZTogYW55XG4pOiBNZW1vaXplZFNlbGVjdG9yPGFueSwgYW55PiB7XG5cdHJldHVybiBjcmVhdGVTZWxlY3Rvcihcblx0XHQoc3RhdGU6IGFueSkgPT4ge1xuXHRcdFx0Y29uc3QgZmVhdHVyZVN0YXRlID0gc3RhdGVbZmVhdHVyZU5hbWVdXG5cdFx0XHRpZiAoIShmZWF0dXJlTmFtZSBpbiBzdGF0ZSkpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdGBzdG9yZTogVGhlIGZlYXR1cmUgbmFtZSBcXFwiJHtmZWF0dXJlTmFtZX1cXFwiIGRvZXMgYCArXG5cdFx0XHRcdFx0XHQnbm90IGV4aXN0IGluIHRoZSBzdGF0ZSwgdGhlcmVmb3JlIGNyZWF0ZUZlYXR1cmVTZWxlY3RvciAnICtcblx0XHRcdFx0XHRcdCdjYW5ub3QgYWNjZXNzIGl0LiAgQmUgc3VyZSBpdCBpcyBpbXBvcnRlZCBpbiBhIGxvYWRlZCBtb2R1bGUgJyArXG5cdFx0XHRcdFx0XHRgdXNpbmcgU3RvcmVNb2R1bGUuZm9yUm9vdCgnJHtmZWF0dXJlTmFtZX0nLCAuLi4pIG9yIGAgK1xuXHRcdFx0XHRcdFx0YFN0b3JlTW9kdWxlLmZvckZlYXR1cmUoJyR7ZmVhdHVyZU5hbWV9JywgLi4uKS4gIElmIHRoZSBkZWZhdWx0IGAgK1xuXHRcdFx0XHRcdFx0J3N0YXRlIGlzIGludGVuZGVkIHRvIGJlIHVuZGVmaW5lZCwgYXMgaXMgdGhlIGNhc2Ugd2l0aCByb3V0ZXIgJyArXG5cdFx0XHRcdFx0XHQnc3RhdGUsIHRoaXMgZGV2ZWxvcG1lbnQtb25seSB3YXJuaW5nIG1lc3NhZ2UgY2FuIGJlIGlnbm9yZWQuJ1xuXHRcdFx0XHQpXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmVhdHVyZVN0YXRlXG5cdFx0fSxcblx0XHQoZmVhdHVyZVN0YXRlOiBhbnkpID0+IGZlYXR1cmVTdGF0ZVxuXHQpXG59XG4iLCJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJ1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhdGVTdWJqZWN0IGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0PGFueT4ge31cbiIsImltcG9ydCB7IEFjdGlvbkNyZWF0b3IsIEFjdGlvblJlZHVjZXIsIEFjdGlvblR5cGUsIEFjdGlvbiB9IGZyb20gJy4vbW9kZWxzJ1xuXG4vLyBSZXR1cm4gdHlwZSBvZiB0aGUgYG9uYCBmbi5cbmV4cG9ydCBpbnRlcmZhY2UgT248Uz4ge1xuXHRyZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPFM+XG5cdHR5cGVzOiBzdHJpbmdbXVxufVxuXG4vLyBTcGVjaWFsaXplZCBSZWR1Y2VyIHRoYXQgaXMgYXdhcmUgb2YgdGhlIEFjdGlvbiB0eXBlIGl0IG5lZWRzIHRvIGhhbmRsZVxuZXhwb3J0IGludGVyZmFjZSBPblJlZHVjZXI8UywgQyBleHRlbmRzIEFjdGlvbkNyZWF0b3JbXT4ge1xuXHQoc3RhdGU6IFMsIGFjdGlvbjogQWN0aW9uVHlwZTxDW251bWJlcl0+KTogU1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb248QzEgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLCBTPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRyZWR1Y2VyOiBPblJlZHVjZXI8UywgW0MxXT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248QzEgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLCBDMiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsIFM+KFxuXHRjcmVhdG9yMTogQzEsXG5cdGNyZWF0b3IyOiBDMixcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzJdPlxuKTogT248Uz5cbmV4cG9ydCBmdW5jdGlvbiBvbjxcblx0QzEgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEMzIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0U1xuPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRjcmVhdG9yMjogQzIsXG5cdGNyZWF0b3IzOiBDMyxcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzIsIEMzXT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248XG5cdEMxIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzIgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMyBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM0IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0U1xuPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRjcmVhdG9yMjogQzIsXG5cdGNyZWF0b3IzOiBDMyxcblx0Y3JlYXRvcjQ6IEM0LFxuXHRyZWR1Y2VyOiBPblJlZHVjZXI8UywgW0MxLCBDMiwgQzMsIEM0XT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248XG5cdEMxIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzIgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMyBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM0IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzUgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRTXG4+KFxuXHRjcmVhdG9yMTogQzEsXG5cdGNyZWF0b3IyOiBDMixcblx0Y3JlYXRvcjM6IEMzLFxuXHRjcmVhdG9yNDogQzQsXG5cdGNyZWF0b3I1OiBDNSxcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzIsIEMzLCBDNCwgQzVdPlxuKTogT248Uz5cbmV4cG9ydCBmdW5jdGlvbiBvbjxcblx0QzEgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEMzIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzQgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDNSBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM2IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0U1xuPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRjcmVhdG9yMjogQzIsXG5cdGNyZWF0b3IzOiBDMyxcblx0Y3JlYXRvcjQ6IEM0LFxuXHRjcmVhdG9yNTogQzUsXG5cdGNyZWF0b3I2OiBDNixcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzIsIEMzLCBDNCwgQzUsIEM2XT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248XG5cdEMxIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzIgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMyBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM0IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzUgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDNiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM3IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0U1xuPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRjcmVhdG9yMjogQzIsXG5cdGNyZWF0b3IzOiBDMyxcblx0Y3JlYXRvcjQ6IEM0LFxuXHRjcmVhdG9yNTogQzUsXG5cdGNyZWF0b3I2OiBDNixcblx0Y3JlYXRvcjc6IEM3LFxuXHRyZWR1Y2VyOiBPblJlZHVjZXI8UywgW0MxLCBDMiwgQzMsIEM0LCBDNSwgQzYsIEM3XT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248XG5cdEMxIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzIgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMyBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM0IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzUgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDNiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM3IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzggZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRTXG4+KFxuXHRjcmVhdG9yMTogQzEsXG5cdGNyZWF0b3IyOiBDMixcblx0Y3JlYXRvcjM6IEMzLFxuXHRjcmVhdG9yNDogQzQsXG5cdGNyZWF0b3I1OiBDNSxcblx0Y3JlYXRvcjY6IEM2LFxuXHRjcmVhdG9yNzogQzcsXG5cdGNyZWF0b3I4OiBDOCxcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzIsIEMzLCBDNCwgQzUsIEM2LCBDNywgQzhdPlxuKTogT248Uz5cbmV4cG9ydCBmdW5jdGlvbiBvbjxcblx0QzEgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEMzIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzQgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDNSBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM2IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzcgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDOCBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM5IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0U1xuPihcblx0Y3JlYXRvcjE6IEMxLFxuXHRjcmVhdG9yMjogQzIsXG5cdGNyZWF0b3IzOiBDMyxcblx0Y3JlYXRvcjQ6IEM0LFxuXHRjcmVhdG9yNTogQzUsXG5cdGNyZWF0b3I2OiBDNixcblx0Y3JlYXRvcjc6IEM3LFxuXHRjcmVhdG9yODogQzgsXG5cdGNyZWF0b3I5OiBDOSxcblx0cmVkdWNlcjogT25SZWR1Y2VyPFMsIFtDMSwgQzIsIEMzLCBDNCwgQzUsIEM2LCBDNywgQzgsIEM5XT5cbik6IE9uPFM+XG5leHBvcnQgZnVuY3Rpb24gb248XG5cdEMxIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzIgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDMyBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM0IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzUgZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDNiBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEM3IGV4dGVuZHMgQWN0aW9uQ3JlYXRvcixcblx0QzggZXh0ZW5kcyBBY3Rpb25DcmVhdG9yLFxuXHRDOSBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdEMxMCBleHRlbmRzIEFjdGlvbkNyZWF0b3IsXG5cdFNcbj4oXG5cdGNyZWF0b3IxOiBDMSxcblx0Y3JlYXRvcjI6IEMyLFxuXHRjcmVhdG9yMzogQzMsXG5cdGNyZWF0b3I0OiBDNCxcblx0Y3JlYXRvcjU6IEM1LFxuXHRjcmVhdG9yNjogQzYsXG5cdGNyZWF0b3I3OiBDNyxcblx0Y3JlYXRvcjg6IEM4LFxuXHRjcmVhdG9yOTogQzksXG5cdGNyZWF0b3IxMDogQzEwLFxuXHRyZWR1Y2VyOiBPblJlZHVjZXI8UywgW0MxLCBDMiwgQzMsIEM0LCBDNSwgQzYsIEM3LCBDOCwgQzksIEMxMF0+XG4pOiBPbjxTPlxuZXhwb3J0IGZ1bmN0aW9uIG9uPFM+KFxuXHRjcmVhdG9yOiBBY3Rpb25DcmVhdG9yLFxuXHQuLi5yZXN0OiAoQWN0aW9uQ3JlYXRvciB8IE9uUmVkdWNlcjxTLCBbQWN0aW9uQ3JlYXRvcl0+KVtdXG4pOiBPbjxTPlxuXG5leHBvcnQgZnVuY3Rpb24gb24oXG5cdC4uLmFyZ3M6IChBY3Rpb25DcmVhdG9yIHwgRnVuY3Rpb24pW11cbik6IHsgcmVkdWNlcjogRnVuY3Rpb247IHR5cGVzOiBzdHJpbmdbXSB9IHtcblx0Y29uc3QgcmVkdWNlciA9IGFyZ3MucG9wKCkgYXMgRnVuY3Rpb25cblx0Y29uc3QgdHlwZXMgPSBhcmdzLnJlZHVjZShcblx0XHQocmVzdWx0LCBjcmVhdG9yKSA9PiBbLi4ucmVzdWx0LCAoY3JlYXRvciBhcyBBY3Rpb25DcmVhdG9yKS50eXBlXSxcblx0XHRbXSBhcyBzdHJpbmdbXVxuXHQpXG5cdHJldHVybiB7IHJlZHVjZXIsIHR5cGVzIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXI8UywgQSBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4oXG5cdGluaXRpYWxTdGF0ZTogUyxcblx0Li4ub25zOiBPbjxTPltdXG4pOiBBY3Rpb25SZWR1Y2VyPFMsIEE+IHtcblx0Y29uc3QgbWFwID0gbmV3IE1hcDxzdHJpbmcsIEFjdGlvblJlZHVjZXI8UywgQT4+KClcblx0Zm9yIChsZXQgb24gb2Ygb25zKSB7XG5cdFx0Zm9yIChsZXQgdHlwZSBvZiBvbi50eXBlcykge1xuXHRcdFx0aWYgKG1hcC5oYXModHlwZSkpIHtcblx0XHRcdFx0Y29uc3QgZXhpc3RpbmdSZWR1Y2VyID0gbWFwLmdldCh0eXBlKSBhcyBBY3Rpb25SZWR1Y2VyPFMsIEE+XG5cdFx0XHRcdGNvbnN0IG5ld1JlZHVjZXI6IEFjdGlvblJlZHVjZXI8UywgQT4gPSAoc3RhdGUsIGFjdGlvbikgPT5cblx0XHRcdFx0XHRvbi5yZWR1Y2VyKGV4aXN0aW5nUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSwgYWN0aW9uKVxuXHRcdFx0XHRtYXAuc2V0KHR5cGUsIG5ld1JlZHVjZXIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXAuc2V0KHR5cGUsIG9uLnJlZHVjZXIpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHN0YXRlOiBTID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IEEpOiBTIHtcblx0XHRjb25zdCByZWR1Y2VyID0gbWFwLmdldChhY3Rpb24udHlwZSlcblx0XHRyZXR1cm4gcmVkdWNlciA/IHJlZHVjZXIoc3RhdGUsIGFjdGlvbikgOiBzdGF0ZVxuXHR9XG59XG4iLCJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJ1xuXG5pbXBvcnQge1xuXHRTdGF0ZVN1YmplY3QsXG5cdEFjdGlvbnNTdWJqZWN0LFxuXHRSZWR1Y2VyTWFuYWdlcixcblx0QWN0aW9uUmVkdWNlck1hcFxufSBmcm9tICcuLi8uLi9saWIvc3RvcmUnXG5cbmltcG9ydCB7XG5cdHVzZXJJbnB1dFJlZHVjZXIsXG5cdElucHV0U3RhdGUsXG5cdGNyZWF0ZUluaXRpYWxTdGF0ZSBhcyBtYWtlSW5wdXRTdGF0ZVxufSBmcm9tICcuLi9pbnB1dC1oYW5kbGVyL3JlZHVjZXInXG5pbXBvcnQgeyBTY2VuZXNTdGF0ZSB9IGZyb20gJy4uL3NjZW5lcy9zdG9yZS9yZWR1Y2VyJ1xuaW1wb3J0IHtcblx0Y3JlYXRlSW5pdGlhbFN0YXRlIGFzIG1ha2VTY2VuZXNTdGF0ZSxcblx0cmVkdWNlciBhcyBzY2VuZXNSZWR1Y2VyXG59IGZyb20gJy4uL3NjZW5lcy9zdG9yZS9yZWR1Y2VyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVTdGF0ZSB7XG5cdGlucHV0OiBJbnB1dFN0YXRlXG5cdHNjZW5lczogU2NlbmVzU3RhdGVcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBHYW1lU3RhdGUgPSB7XG5cdGlucHV0OiBtYWtlSW5wdXRTdGF0ZSgpLFxuXHRzY2VuZXM6IG1ha2VTY2VuZXNTdGF0ZSgpXG59XG5jb25zdCByZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxHYW1lU3RhdGUsIGFueT4gPSB7XG5cdGlucHV0OiB1c2VySW5wdXRSZWR1Y2VyLFxuXHRzY2VuZXM6IHNjZW5lc1JlZHVjZXJcbn1cblxuZXhwb3J0IGNvbnN0IHN0YXRlU3ViamVjdDogU3RhdGVTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxHYW1lU3RhdGU+KFxuXHRpbml0aWFsU3RhdGVcbilcbmV4cG9ydCBjb25zdCBhY3Rpb25zT2JzZXJ2ZXI6IEFjdGlvbnNTdWJqZWN0ID0gbmV3IEFjdGlvbnNTdWJqZWN0KClcbmV4cG9ydCBjb25zdCByZWR1Y2VyTWFuYWdlcjogUmVkdWNlck1hbmFnZXIgPSBuZXcgUmVkdWNlck1hbmFnZXIoXG5cdHJlZHVjZXJzLFxuXHRpbml0aWFsU3RhdGVcbilcbiIsImltcG9ydCB7IEFjdGlvblJlZHVjZXJNYXAsIG1ha2VEZWZhdWx0UmVkdWNlckZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi9saWIvc3RvcmUnXG5pbXBvcnQge1xuXHRNYWluTWVudVN0YXRlLFxuXHRtYWluTWVudVJlZHVjZXIsXG5cdGNyZWF0ZUluaXRpYWxTdGF0ZSBhcyBjcmVhdGVNYWluTWVudVN0YXRlXG59IGZyb20gJy4uL21haW4tbWVudS9zdG9yZS9yZWR1Y2VyJ1xuaW1wb3J0IHtcblx0RHVuZ2VvblN0YXRlLFxuXHRkdW5nZW9uUmVkdWNlcixcblx0Y3JlYXRlSW5pdGlhbFN0YXRlIGFzIGNyZWF0ZUR1bmdlb25TdGF0ZVxufSBmcm9tICcuLi9kdW5nZW9uL3N0b3JlL3JlZHVjZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NlbmVzU3RhdGUge1xuXHQnbWFpbi1tZW51JzogTWFpbk1lbnVTdGF0ZVxuXHRkdW5nZW9uOiBEdW5nZW9uU3RhdGVcbn1cblxuY29uc3QgcmVkdWNlcnM6IEFjdGlvblJlZHVjZXJNYXA8U2NlbmVzU3RhdGUsIGFueT4gPSB7XG5cdCdtYWluLW1lbnUnOiBtYWluTWVudVJlZHVjZXIsXG5cdGR1bmdlb246IGR1bmdlb25SZWR1Y2VyXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVJbml0aWFsU3RhdGUgPSAoKTogU2NlbmVzU3RhdGUgPT4gKHtcblx0J21haW4tbWVudSc6IGNyZWF0ZU1haW5NZW51U3RhdGUoKSxcblx0ZHVuZ2VvbjogY3JlYXRlRHVuZ2VvblN0YXRlKClcbn0pXG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyID0gbWFrZURlZmF1bHRSZWR1Y2VyRmFjdG9yeTxhbnksIGFueT4oKShcblx0cmVkdWNlcnMsXG5cdGNyZWF0ZUluaXRpYWxTdGF0ZSgpXG4pXG4iLCJpbXBvcnQgeyBjcmVhdGVSZWR1Y2VyLCBvbiB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9zdG9yZSdcbmltcG9ydCB7IE1haW5NZW51RGltZW5zaW9ucywgdXBkYXRlRGltZW5zaW9ucyB9IGZyb20gJy4vYWN0aW9ucydcblxuZXhwb3J0IGludGVyZmFjZSBNYWluTWVudVN0YXRlIHtcblx0ZGltZW5zaW9uczogTWFpbk1lbnVEaW1lbnNpb25zXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVJbml0aWFsU3RhdGUgPSAoKTogTWFpbk1lbnVTdGF0ZSA9PiAoe1xuXHRkaW1lbnNpb25zOiB7XG5cdFx0Ym9keToge1xuXHRcdFx0aGVpZ2h0OiAwLFxuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRtYXJnaW46IDAsXG5cdFx0XHRwb3NpdGlvbjogWzAsIDBdXG5cdFx0fSxcblx0XHR0aXRsZToge1xuXHRcdFx0aGVpZ2h0OiAwLFxuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRwb3NpdGlvbjogWzAsIDBdXG5cdFx0fVxuXHR9XG59KVxuXG5leHBvcnQgY29uc3QgbWFpbk1lbnVSZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihcblx0Y3JlYXRlSW5pdGlhbFN0YXRlKCksXG5cdG9uKHVwZGF0ZURpbWVuc2lvbnMsIChzdGF0ZSwgeyBkaW1lbnNpb25zIH0pID0+ICh7XG5cdFx0Li4uc3RhdGUsXG5cdFx0ZGltZW5zaW9uc1xuXHR9KSlcbilcbiIsImltcG9ydCB7IGNyZWF0ZVJlZHVjZXIsIG9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3N0b3JlJ1xyXG5pbXBvcnQgKiBhcyBmcm9tQWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnXHJcbmltcG9ydCB7IFJvb20gfSBmcm9tICcuLi9yb29tJ1xyXG5pbXBvcnQgeyBFbnRpdHlTdGF0ZSwgRW50aXR5U3RhdGVBZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL2VudGl0eS1zdGF0ZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRHVuZ2VvblN0YXRlIHtcclxuXHRyb29tczogRW50aXR5U3RhdGU8Um9vbT5cclxuXHRhY3RpdmVSb29tOiBSb29tIHwgbnVsbFxyXG59XHJcblxyXG5jb25zdCByb29tQWRhcHRlciA9IG5ldyBFbnRpdHlTdGF0ZUFkYXB0ZXI8Um9vbT4oKVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUluaXRpYWxTdGF0ZSA9ICgpOiBEdW5nZW9uU3RhdGUgPT4gKHtcclxuXHRyb29tczogbmV3IEVudGl0eVN0YXRlPFJvb20+KCksXHJcblx0YWN0aXZlUm9vbTogbnVsbFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGR1bmdlb25SZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihcclxuXHRjcmVhdGVJbml0aWFsU3RhdGUoKSxcclxuXHRvbihmcm9tQWN0aW9ucy5hZGRSb29tLCAoc3RhdGUsIHsgcm9vbSB9KSA9PiB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHQuLi5zdGF0ZSxcclxuXHRcdFx0cm9vbXM6IHJvb21BZGFwdGVyLnVwc2VydE9uZShyb29tLCBzdGF0ZS5yb29tcylcclxuXHRcdH1cclxuXHR9KSxcclxuXHRvbihmcm9tQWN0aW9ucy5zZXRBY3RpdmVSb29tLCAoc3RhdGUsIHsgcm9vbUlEIH0pID0+IHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdC4uLnN0YXRlLFxyXG5cdFx0XHRhY3RpdmVSb29tOiBzdGF0ZS5yb29tcy5lbnRpdGllc1tyb29tSURdIHx8IG51bGxcclxuXHRcdH1cclxuXHR9KVxyXG4pXHJcbiIsInR5cGUgSGFzSUQgPSB7IGlkOiBzdHJpbmcgfVxyXG5cclxuZXhwb3J0IGNsYXNzIEVudGl0eVN0YXRlPFxyXG5cdFQgZXh0ZW5kcyBIYXNJRCxcclxuXHRVIGV4dGVuZHMgeyBbaWQ6IHN0cmluZ106IFQgfSA9IHsgW2lkOiBzdHJpbmddOiBUIH1cclxuPiB7XHJcblx0cHJpdmF0ZSBfaWRzOiBBcnJheTxrZXlvZiBVPiB8IHVuZGVmaW5lZFxyXG5cclxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZW50aXRpZXM6IFUgPSB7fSBhcyBVKSB7fVxyXG5cclxuXHRwdWJsaWMgZ2V0IGlkcygpIHtcclxuXHRcdGlmICghdGhpcy5faWRzKSB7XHJcblx0XHRcdHRoaXMuX2lkcyA9IFJlZmxlY3Qub3duS2V5cyh0aGlzLmVudGl0aWVzKSBhcyBBcnJheTxrZXlvZiBVPlxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuX2lkc1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVudGl0eVN0YXRlQWRhcHRlcjxUIGV4dGVuZHMgSGFzSUQ+IHtcclxuXHRwcml2YXRlIGFwcGVuZChlbnRpdHk6IFQsIGVudGl0aWVzOiBFbnRpdHlTdGF0ZTxUPlsnZW50aXRpZXMnXSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Li4uZW50aXRpZXMsXHJcblx0XHRcdFtlbnRpdHkuaWRdOiBlbnRpdHlcclxuXHRcdH0gYXMgRW50aXR5U3RhdGU8VD5bJ2VudGl0aWVzJ11cclxuXHR9XHJcblxyXG5cdHVwc2VydE9uZShlbnRpdHk6IFQsIHN0YXRlOiBFbnRpdHlTdGF0ZTxUPik6IEVudGl0eVN0YXRlPFQ+IHtcclxuXHRcdGNvbnN0IGVudGl0aWVzID0gdGhpcy5hcHBlbmQoZW50aXR5LCBzdGF0ZS5lbnRpdGllcylcclxuXHJcblx0XHRyZXR1cm4gbmV3IEVudGl0eVN0YXRlKGVudGl0aWVzKVxyXG5cdH1cclxufVxyXG4iLCJleHBvcnQgKiBmcm9tICcuL2R1bmdlb24uc2NlbmUnXHJcbiIsImltcG9ydCB7IFJlbmRlcmFibGUgfSBmcm9tICcuLi8uLi9yZW5kZXJhYmxlJ1xyXG5pbXBvcnQgeyBXb3JsZCB9IGZyb20gJy4vd29ybGQnXHJcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi4vc2NlbmUnXHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uLy4uL2FjdG9ycy9wbGF5ZXInXHJcbmltcG9ydCB7IHNlbGVjdFJvb21zIH0gZnJvbSAnLi9zdG9yZS9zZWxlY3RvcnMnXHJcbmltcG9ydCB7IFJvb20gfSBmcm9tICcuL3Jvb20nXHJcbmltcG9ydCB7IHNldEFjdGl2ZVJvb20gfSBmcm9tICcuL3N0b3JlL2FjdGlvbnMnXHJcbmltcG9ydCB7IG9mVHlwZSB9IGZyb20gJy4uLy4uLy4uL2xpYi9zdG9yZSdcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXHJcblxyXG5leHBvcnQgY2xhc3MgRHVuZ2VvbiBleHRlbmRzIFNjZW5lIHtcclxuXHRwcml2YXRlIHdvcmxkOiBXb3JsZCA9IG5ldyBXb3JsZCgoc2NlbmU6IFJlbmRlcmFibGUpID0+XHJcblx0XHR0aGlzLnNldEFjdGl2ZVNjZW5lKHNjZW5lKVxyXG5cdClcclxuXHJcblx0cHJpdmF0ZSBwbGF5ZXI6IFBsYXllciA9IG5ldyBQbGF5ZXIoKVxyXG5cdHByaXZhdGUgcHJldmlvdXNBY3RpdmVSb29tOiBSb29tIHwgdW5kZWZpbmVkXHJcblxyXG5cdHB1YmxpYyBvblNldEFjdGl2ZVJvb20kID0gdGhpcy5zdG9yZS5hY3Rpb25zJC5waXBlKFxyXG5cdFx0b2ZUeXBlKHNldEFjdGl2ZVJvb20pLFxyXG5cdFx0bWFwKCh7IHJvb21JRCB9KSA9PiB0aGlzLnN0b3JlLnNlbGVjdFN5bmMoc2VsZWN0Um9vbXMpLmVudGl0aWVzW3Jvb21JRF0pXHJcblx0KVxyXG5cclxuXHRwdWJsaWMgb25Jbml0KCkge1xyXG5cdFx0dGhpcy5vblNldEFjdGl2ZVJvb20kLnN1YnNjcmliZShhY3RpdmVSb29tID0+IHtcclxuXHRcdFx0aWYgKGFjdGl2ZVJvb20pIHtcclxuXHRcdFx0XHRkZWJ1Z2dlclxyXG5cdFx0XHRcdGlmICh0aGlzLnByZXZpb3VzQWN0aXZlUm9vbSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91c0FjdGl2ZVJvb20ucmVtb3ZlQWN0b3IodGhpcy5wbGF5ZXIpXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRhY3RpdmVSb29tLmFkZEFjdG9yKHRoaXMucGxheWVyKVxyXG5cdFx0XHRcdHRoaXMucHJldmlvdXNBY3RpdmVSb29tID0gYWN0aXZlUm9vbVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0cHVibGljIHJlbmRlcigpIHtcclxuXHRcdHRoaXMud29ybGQucmVuZGVyKClcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IHsgdGFwLCBtYXAsIGZpcnN0LCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5cbmltcG9ydCB7IG9mVHlwZSB9IGZyb20gJy4uLy4uLy4uL2xpYi9zdG9yZSdcbmltcG9ydCB7IFJvb20gfSBmcm9tICcuL3Jvb20nXG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4uL3NjZW5lJ1xuaW1wb3J0IHsgc2VsZWN0QWN0aXZlUm9vbSwgc2VsZWN0Um9vbXMgfSBmcm9tICcuL3N0b3JlL3NlbGVjdG9ycydcbmltcG9ydCAqIGFzIGZyb21BY3Rpb25zIGZyb20gJy4vc3RvcmUvYWN0aW9ucydcblxuY29uc3QgSURfU0VQID0gJzonXG5cbmV4cG9ydCBjbGFzcyBXb3JsZCBleHRlbmRzIFNjZW5lIHtcblx0cHVibGljIHN0YXRpYyBjb29yZGluYXRlc1RvSUQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdHJldHVybiBgJHt4fSR7SURfU0VQfSR7eX1gXG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGNvb3JkaW5hdGVzRnJvbUlEKGlkOiBzdHJpbmcpOiBbbnVtYmVyLCBudW1iZXJdIHtcblx0XHRyZXR1cm4gaWRcblx0XHRcdC5zcGxpdChJRF9TRVApXG5cdFx0XHQubWFwKGNvb3JkID0+IE51bWJlcihjb29yZCkpXG5cdFx0XHQuc2xpY2UoMCwgMikgYXMgW251bWJlciwgbnVtYmVyXVxuXHR9XG5cblx0cHVibGljIGdldCByb29tcygpIHtcblx0XHRyZXR1cm4gc2VsZWN0Um9vbXModGhpcy5zdGF0ZSlcblx0fVxuXG5cdHB1YmxpYyBnZXQgY3VycmVudFJvb20oKTogUm9vbSB8IG51bGwge1xuXHRcdHJldHVybiBzZWxlY3RBY3RpdmVSb29tKHRoaXMuc3RhdGUpXG5cdH1cblxuXHRwdWJsaWMgb25FbnRlclJvb20kID0gdGhpcy5zdG9yZS5hY3Rpb25zJC5waXBlKFxuXHRcdG9mVHlwZShmcm9tQWN0aW9ucy5lbnRlclJvb20pLFxuXHRcdHRhcCgoeyB4LCB5IH0pID0+IHRoaXMuZ2VuZXJhdGVSb29tKHgsIHkpKSxcblx0XHRtYXAoKHsgeCwgeSB9KSA9PiB7XG5cdFx0XHRjb25zdCByb29tSUQgPSBXb3JsZC5jb29yZGluYXRlc1RvSUQoeCwgeSlcblx0XHRcdHRoaXMuc3RvcmVcblx0XHRcdFx0LnNlbGVjdEJ5RnVuY3Rpb24oc2VsZWN0Um9vbXMpXG5cdFx0XHRcdC5waXBlKFxuXHRcdFx0XHRcdGZpcnN0KHJvb21zID0+ICEhcm9vbXMuZW50aXRpZXNbcm9vbUlEXSksXG5cdFx0XHRcdFx0dGFrZSgxKVxuXHRcdFx0XHQpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0XHRcdGRlYnVnZ2VyXG5cdFx0XHRcdFx0dGhpcy5zdG9yZS5kaXNwYXRjaChcblx0XHRcdFx0XHRcdGZyb21BY3Rpb25zLnNldEFjdGl2ZVJvb20oe1xuXHRcdFx0XHRcdFx0XHRyb29tSURcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9KVxuXHRcdH0pXG5cdClcblxuXHRwdWJsaWMgb25Jbml0KCkge1xuXHRcdHRoaXMub25FbnRlclJvb20kLnN1YnNjcmliZSgoKSA9PiBjb25zb2xlLmxvZygnRW50ZXJlZCBBIFJvb20nKSlcblx0XHR0aGlzLnN0b3JlLmRpc3BhdGNoKGZyb21BY3Rpb25zLmVudGVyUm9vbSh7IHg6IDAsIHk6IDAgfSkpXG5cdH1cblxuXHRwdWJsaWMgcmVuZGVyKCkge1xuXHRcdHRoaXMuY3VycmVudFJvb20gJiYgdGhpcy5jdXJyZW50Um9vbS5yZW5kZXIoKVxuXHR9XG5cblx0cHVibGljIGdlbmVyYXRlUm9vbSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdHRoaXMuc3RvcmUuZGlzcGF0Y2goXG5cdFx0XHRmcm9tQWN0aW9ucy5hZGRSb29tKHtcblx0XHRcdFx0cm9vbTogbmV3IFJvb20oV29ybGQuY29vcmRpbmF0ZXNUb0lEKHgsIHkpKSxcblx0XHRcdFx0Y29vcmRpbmF0ZXM6IFt4LCB5XVxuXHRcdFx0fSlcblx0XHQpXG5cdH1cbn1cbiIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZydcbmltcG9ydCB7IFJlbmRlcmFibGUgfSBmcm9tICcuLi8uLi9yZW5kZXJhYmxlJ1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vdGlsZSdcbmltcG9ydCB7IEFjdG9yIH0gZnJvbSAnLi4vLi4vYWN0b3InXG5cbmV4cG9ydCBjbGFzcyBSb29tIGV4dGVuZHMgUmVuZGVyYWJsZSB7XG5cdHByaXZhdGUgdGlsZXM6IFRpbGVbXVtdIHwgdW5kZWZpbmVkXG5cdHByaXZhdGUgZ2V0IHRpbGVMaXN0KCk6IFRpbGVbXSB7XG5cdFx0cmV0dXJuIHRoaXMudGlsZXM/LnJlZHVjZSgobGlzdCwgcm93KSA9PiBbLi4ubGlzdCwgLi4ucm93XSwgW10pIHx8IFtdXG5cdH1cblx0cHVibGljIGFjdG9yczogQWN0b3JbXSA9IFtdXG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmcsXG5cdFx0cHJpdmF0ZSByZXF1aXJlZERvb3JzOiBbYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbl0gPSBbXG5cdFx0XHRmYWxzZSxcblx0XHRcdGZhbHNlLFxuXHRcdFx0ZmFsc2UsXG5cdFx0XHRmYWxzZVxuXHRcdF1cblx0KSB7XG5cdFx0c3VwZXIoKVxuXHR9XG5cblx0cHVibGljIG9uSW5pdCgpIHtcblx0XHR0aGlzLmdlbmVyYXRlKClcblx0fVxuXG5cdHB1YmxpYyByZW5kZXIoKSB7XG5cdFx0dGhpcy50aWxlTGlzdC5mb3JFYWNoKHRpbGUgPT4ge1xuXHRcdFx0dGlsZS5yZW5kZXIoKVxuXHRcdH0pXG5cblx0XHR0aGlzLmFjdG9ycy5mb3JFYWNoKGFjdG9yID0+IHtcblx0XHRcdGFjdG9yLnJlbmRlcigpXG5cdFx0fSlcblx0fVxuXG5cdHB1YmxpYyBhZGRBY3RvcihhY3RvclRvQWRkOiBBY3Rvcikge1xuXHRcdGlmICghdGhpcy5hY3RvcnMuaW5jbHVkZXMoYWN0b3JUb0FkZCkpIHtcblx0XHRcdHRoaXMuYWN0b3JzLnB1c2goYWN0b3JUb0FkZClcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVtb3ZlQWN0b3IoYWN0b3JUb1JlbW92ZTogQWN0b3IpIHtcblx0XHR0aGlzLmFjdG9ycyA9IHRoaXMuYWN0b3JzLmZpbHRlcihhY3RvciA9PiBhY3RvciAhPT0gYWN0b3JUb1JlbW92ZSlcblx0fVxuXG5cdHB1YmxpYyBnZW5lcmF0ZSgpIHtcblx0XHRpZiAodGhpcy5yZXF1aXJlZERvb3JzKSB7XG5cdFx0fVxuXG5cdFx0dGhpcy50aWxlcyA9IFtbXV1cblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY3R4LmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdGNvbnN0IHJlbmRlclNpemUgPSBNYXRoLm1pbihcblx0XHRcdE1hdGguZmxvb3Iod2lkdGggLyBjb25maWcucm9vbVNpemVbMF0pLFxuXHRcdFx0TWF0aC5mbG9vcihoZWlnaHQgLyBjb25maWcucm9vbVNpemVbMV0pXG5cdFx0KVxuXHRcdGNvbnN0IFt4LCB5XSA9IFt3aWR0aCAvIDIsIGhlaWdodCAvIDJdXG5cdFx0Y29uc3Qgcm9vbVdpZHRoID0gY29uZmlnLnJvb21TaXplWzBdICogcmVuZGVyU2l6ZVxuXHRcdGNvbnN0IHJvb21IZWlnaHQgPSBjb25maWcucm9vbVNpemVbMV0gKiByZW5kZXJTaXplXG5cdFx0Y29uc3Qgcm9vbUxlZnRFZGdlID0geCAtIHJvb21XaWR0aCAvIDJcblx0XHRjb25zdCByb29tVG9wRWRnZSA9IHkgLSByb29tSGVpZ2h0IC8gMlxuXG5cdFx0Y29uc3QgW2NvbHVtbnMsIHJvd3NdID0gY29uZmlnLnJvb21TaXplXG5cblx0XHRmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCBjb2x1bW5zOyBjb2x1bW4rKykge1xuXHRcdFx0dGhpcy50aWxlc1tjb2x1bW5dID0gW11cblxuXHRcdFx0Zm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcblx0XHRcdFx0Y29uc3QgaXNOb3J0aE9yU291dGhXYWxsID0gcm93ICUgKHJvd3MgLSAxKSA9PSAwXG5cdFx0XHRcdGNvbnN0IGlzTm9ydGhXYWxsID0gcm93ID09PSAwXG5cdFx0XHRcdGNvbnN0IGlzU291dGhXYWxsID0gcm93ID09PSByb3dzIC0gMVxuXHRcdFx0XHRjb25zdCBpc0Vhc3RPcldlc3RXYWxsID0gY29sdW1uICUgKGNvbHVtbnMgLSAxKSA9PSAwXG5cdFx0XHRcdGNvbnN0IGlzV2VzdFdhbGwgPSBjb2x1bW4gPT09IDBcblx0XHRcdFx0Y29uc3QgaXNFYXN0V2FsbCA9IGNvbHVtbiA9PT0gY29sdW1ucyAtIDFcblxuXHRcdFx0XHRsZXQgdHlwZSA9IFRpbGUudHlwZS5GbG9vclxuXG5cdFx0XHRcdGlmIChpc1dlc3RXYWxsKSB0eXBlID0gVGlsZS50eXBlLldfV2FsbFxuXG5cdFx0XHRcdGlmIChpc0Vhc3RXYWxsKSB0eXBlID0gVGlsZS50eXBlLkVfV2FsbFxuXG5cdFx0XHRcdGlmIChpc05vcnRoT3JTb3V0aFdhbGwpIHtcblx0XHRcdFx0XHRpZiAoaXNOb3J0aFdhbGwpIHtcblx0XHRcdFx0XHRcdGlmICghaXNFYXN0T3JXZXN0V2FsbCkge1xuXHRcdFx0XHRcdFx0XHR0eXBlID0gVGlsZS50eXBlLldhbGxfNFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChpc1NvdXRoV2FsbCkge1xuXHRcdFx0XHRcdFx0aWYgKCFpc0Vhc3RPcldlc3RXYWxsKSB7XG5cdFx0XHRcdFx0XHRcdHR5cGUgPSBUaWxlLnR5cGUuV2FsbF8xXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGlzV2VzdFdhbGwpIHtcblx0XHRcdFx0XHRcdFx0dHlwZSA9IFRpbGUudHlwZS5TV19Db3JuZXJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaXNFYXN0V2FsbCkge1xuXHRcdFx0XHRcdFx0XHR0eXBlID0gVGlsZS50eXBlLlNFX0Nvcm5lclxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGlsZXNbY29sdW1uXVtyb3ddID0gbmV3IFRpbGUoXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0TWF0aC5mbG9vcihyb29tTGVmdEVkZ2UgKyBjb2x1bW4gKiByZW5kZXJTaXplKSxcblx0XHRcdFx0XHRcdE1hdGguZmxvb3Iocm9vbVRvcEVkZ2UgKyByb3cgKiByZW5kZXJTaXplKVxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0dHlwZVxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzZhMGQ4MTk1MmQwYzJmZTQ0MjAzNjkwYjg5YmFlN2MucG5nXCI7IiwiaW1wb3J0IFRpbGVzIGZyb20gJy4uLy4uLy4uL2Fzc2V0cy9pbWcvdGlsZXMucG5nJ1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJ1xuaW1wb3J0IHsgUmVuZGVyYWJsZSB9IGZyb20gJy4uLy4uL3JlbmRlcmFibGUnXG5cbmV4cG9ydCBjbGFzcyBUaWxlIGV4dGVuZHMgUmVuZGVyYWJsZSB7XG5cdHN0YXRpYyByZWFkb25seSB0ZXh0dXJlcyA9ICgoKSA9PiB7XG5cdFx0Y29uc3QgaW1nID0gbmV3IEltYWdlKClcblx0XHRpbWcuc3JjID0gVGlsZXNcblx0XHRyZXR1cm4gaW1nXG5cdH0pKClcblx0c3RhdGljIHJlYWRvbmx5IHR5cGUgPSAoKCkgPT4ge1xuXHRcdGVudW0gVGlsZVR5cGVzIHtcblx0XHRcdFdhbGxfMSxcblx0XHRcdFdhbGxfMixcblx0XHRcdFdhbGxfMyxcblx0XHRcdFdhbGxfNCxcblxuXHRcdFx0V2FsbF81LFxuXHRcdFx0V2FsbF82LFxuXHRcdFx0V2FsbF83LFxuXHRcdFx0RG9vcl9TVyxcblxuXHRcdFx0RG9vcl9TRSxcblx0XHRcdElubmVyX0Nvcm5lcnMsXG5cdFx0XHRXX1dhbGwsXG5cdFx0XHRFX1dhbGwsXG5cblx0XHRcdElubmVyX1dhbGxzLFxuXHRcdFx0U1dfQ29ybmVyLFxuXHRcdFx0U0VfQ29ybmVyLFxuXHRcdFx0Rmxvb3Jcblx0XHR9XG5cdFx0cmV0dXJuIFRpbGVUeXBlc1xuXHR9KSgpXG5cblx0cHVibGljIG5lZWRzVG9SZW5kZXI6IGJvb2xlYW4gPSB0cnVlXG5cblx0Y29uc3RydWN0b3IocHVibGljIGxvY2F0aW9uOiBbbnVtYmVyLCBudW1iZXJdLCBwdWJsaWMgdHlwZTogbnVtYmVyKSB7XG5cdFx0c3VwZXIoKVxuXHR9XG5cblx0cHVibGljIHJlbmRlcigpIHtcblx0XHR0aGlzLmRyYXdUaWxlKClcblx0fVxuXG5cdHB1YmxpYyBnZXQgcmVuZGVyU2l6ZSgpOiBudW1iZXIge1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5jdHguY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cblx0XHRyZXR1cm4gTWF0aC5taW4oXG5cdFx0XHRNYXRoLmZsb29yKHdpZHRoIC8gY29uZmlnLnJvb21TaXplWzBdKSxcblx0XHRcdE1hdGguZmxvb3IoaGVpZ2h0IC8gY29uZmlnLnJvb21TaXplWzFdKVxuXHRcdClcblx0fVxuXG5cdHB1YmxpYyBnZXQgdGV4dHVyZUNvb3JkcygpIHtcblx0XHRjb25zdCBbdGV4dHVyZVgsIHRleHR1cmVZXSA9IFt0aGlzLnR5cGUgJSA0LCBNYXRoLmZsb29yKHRoaXMudHlwZSAvIDQpXVxuXHRcdGNvbnN0IFtzb3VyY2VYLCBzb3VyY2VZXSA9IFtcblx0XHRcdHRleHR1cmVYICogY29uZmlnLnRpbGVTaXplLFxuXHRcdFx0dGV4dHVyZVkgKiBjb25maWcudGlsZVNpemVcblx0XHRdXG5cdFx0Y29uc3Qgc291cmNlV2lkdGggPSBjb25maWcudGlsZVNpemVcblx0XHRjb25zdCBzb3VyY2VIZWlnaHQgPSBjb25maWcudGlsZVNpemVcblxuXHRcdGNvbnN0IFtkcmF3WCwgZHJhd1ldID0gdGhpcy5sb2NhdGlvblxuXHRcdGNvbnN0IGRyYXdXaWR0aCA9IHRoaXMucmVuZGVyU2l6ZVxuXHRcdGNvbnN0IGRyYXdIZWlnaHQgPSB0aGlzLnJlbmRlclNpemVcblxuXHRcdHJldHVybiB7XG5cdFx0XHRzb3VyY2VYLFxuXHRcdFx0c291cmNlWSxcblx0XHRcdHNvdXJjZVdpZHRoLFxuXHRcdFx0c291cmNlSGVpZ2h0LFxuXHRcdFx0ZHJhd1gsXG5cdFx0XHRkcmF3WSxcblx0XHRcdGRyYXdXaWR0aCxcblx0XHRcdGRyYXdIZWlnaHRcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZHJhd1RpbGUoKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0c291cmNlWCxcblx0XHRcdHNvdXJjZVksXG5cdFx0XHRzb3VyY2VXaWR0aCxcblx0XHRcdHNvdXJjZUhlaWdodCxcblx0XHRcdGRyYXdYLFxuXHRcdFx0ZHJhd1ksXG5cdFx0XHRkcmF3V2lkdGgsXG5cdFx0XHRkcmF3SGVpZ2h0XG5cdFx0fSA9IHRoaXMudGV4dHVyZUNvb3Jkc1xuXG5cdFx0dGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2Vcblx0XHR0aGlzLmN0eC5kcmF3SW1hZ2UoXG5cdFx0XHRUaWxlLnRleHR1cmVzLFxuXHRcdFx0c291cmNlWCxcblx0XHRcdHNvdXJjZVksXG5cdFx0XHRzb3VyY2VXaWR0aCxcblx0XHRcdHNvdXJjZUhlaWdodCxcblx0XHRcdGRyYXdYLFxuXHRcdFx0ZHJhd1ksXG5cdFx0XHRkcmF3V2lkdGgsXG5cdFx0XHRkcmF3SGVpZ2h0XG5cdFx0KVxuXHR9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDk5NWQ4YzBiY2FiZDk4ZjQ5YTNlZTEyM2JhZmY5YzgucG5nXCI7IiwiaW1wb3J0IHsgY3JlYXRlRmVhdHVyZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vLi4vbGliL3N0b3JlJ1xuaW1wb3J0IHsgU2NlbmVzU3RhdGUgfSBmcm9tICcuL3JlZHVjZXInXG5cbmV4cG9ydCBjb25zdCBzZWxlY3RTY2VuZXMgPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8U2NlbmVzU3RhdGU+KCdzY2VuZXMnKVxuIiwiZXhwb3J0ICogZnJvbSAnLi9wbGF5ZXIuYWN0b3InXHJcbiIsImltcG9ydCB7IEFjdG9yIH0gZnJvbSAnLi4vLi4vYWN0b3InXHJcblxyXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQWN0b3Ige1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoKVxyXG5cdH1cclxuXHJcblx0cHVibGljIHJlbmRlcigpIHt9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVuZGVyYWJsZSB9IGZyb20gJy4vcmVuZGVyYWJsZSdcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJ1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFjdG9yIGV4dGVuZHMgUmVuZGVyYWJsZSB7XHJcblx0cHVibGljIGxvY2F0aW9uSW5Sb29tOiBbbnVtYmVyLCBudW1iZXJdID0gWzAsIDBdXHJcblxyXG5cdHB1YmxpYyBnZXQgZHJhd0Nvb3JkaW5hdGVzKCk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG5cdFx0Y29uc3QgW3gsIHldID0gdGhpcy5sb2NhdGlvbkluUm9vbS5tYXAoXHJcblx0XHRcdGNlbGxDb29yZCA9PiBjZWxsQ29vcmQgKiBjb25maWcudGlsZVNpemVcclxuXHRcdClcclxuXHRcdHJldHVybiBbeCwgeV1cclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoKVxyXG5cdH1cclxuXHJcblx0cHVibGljIGFic3RyYWN0IHJlbmRlcigpOiB2b2lkXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==